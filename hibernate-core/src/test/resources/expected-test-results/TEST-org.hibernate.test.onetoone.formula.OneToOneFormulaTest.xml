<?xml version="1.0" encoding="UTF-8"?>
<testsuite errors="0" failures="0" hostname="dhcp-10.15.208.168.stl.redhat.com" name="org.hibernate.test.onetoone.formula.OneToOneFormulaTest" tests="2" time="0.189" timestamp="2013-02-28T20:17:38">
  <properties />
  <testcase classname="org.hibernate.test.onetoone.formula.OneToOneFormulaTest" name="testOneToOneEmbeddedCompositeKey" time="0.007" />
  <testcase classname="org.hibernate.test.onetoone.formula.OneToOneFormulaTest" name="testOneToOneFormula" time="0.121" />
  <system-out><![CDATA[14:17:38,571  INFO CustomRunner:132 - BeforeClass: org.hibernate.test.onetoone.formula.OneToOneFormulaTest
14:17:38,573  INFO Configuration:706 - HHH000221: Reading mappings from resource: org/hibernate/test/onetoone/formula/Person.hbm.xml
14:17:38,610  INFO DriverManagerConnectionProviderImpl:99 - HHH000402: Using Hibernate built-in connection pool (not for production use!)
14:17:38,611  INFO DriverManagerConnectionProviderImpl:135 - HHH000115: Hibernate connection pool size: 5
14:17:38,611  INFO DriverManagerConnectionProviderImpl:138 - HHH000006: Autocommit mode: false
14:17:38,611  INFO DriverManagerConnectionProviderImpl:153 - HHH000401: using driver [org.h2.Driver] at URL [jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE]
14:17:38,611  INFO DriverManagerConnectionProviderImpl:158 - HHH000046: Connection properties: {user=sa}
14:17:38,612  INFO Dialect:103 - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
14:17:38,613  INFO LobCreatorBuilder:94 - HHH000423: Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
14:17:38,613  INFO TransactionFactoryInitiator:66 - HHH000399: Using default transaction strategy (direct JDBC transactions)
14:17:38,614  INFO ASTQueryTranslatorFactory:48 - HHH000397: Using ASTQueryTranslatorFactory
14:17:38,623  INFO SchemaExport:343 - HHH000227: Running hbm2ddl schema export
14:17:38,624 DEBUG SchemaExport:353 - Import file not found: /import.sql
14:17:38,624 DEBUG SQL:104 - 
    alter table Address 
        drop constraint FK1ED033D4986DE710
14:17:38,625 ERROR SchemaExport:425 - HHH000389: Unsuccessful: alter table Address drop constraint FK1ED033D4986DE710
14:17:38,625 ERROR SchemaExport:426 - Table "ADDRESS" not found; SQL statement:

    alter table Address 
        drop constraint FK1ED033D4986DE710 [42102-145]
14:17:38,625 DEBUG SQL:104 - 
    drop table Address if exists
14:17:38,625 DEBUG SQL:104 - 
    drop table Person if exists
14:17:38,625 DEBUG SQL:104 - 
    create table Address (
        personName varchar(255) not null,
        addressType varchar(255) not null,
        street longvarchar,
        state varchar(255),
        zip varchar(255),
        primary key (personName, addressType),
        check (addressType in ('MAILING', 'HOME', 'BUSINESS'))
    )
14:17:38,626 DEBUG SQL:104 - 
    create table Person (
        name varchar(255) not null,
        primary key (name)
    )
14:17:38,626 DEBUG SQL:104 - 
    alter table Address 
        add constraint FK1ED033D4986DE710 
        foreign key (personName) 
        references Person
14:17:38,626  INFO SchemaExport:405 - HHH000230: Schema export complete
14:17:38,627  WARN SessionFactoryImpl:1554 - HHH000008: JTASessionContext being used with JDBCTransactionFactory; auto-flush will not operate correctly with getCurrentSession()
14:17:38,627  INFO CustomRunner:139 - Test: testOneToOneEmbeddedCompositeKey
14:17:38,628 DEBUG SQL:104 - 
    insert 
    into
        Person
        (name) 
    values
        (?)
14:17:38,629 DEBUG SQL:104 - 
    insert 
    into
        Address
        (street, state, zip, personName, addressType) 
    values
        (?, ?, ?, ?, ?)
14:17:38,630 DEBUG SQL:104 - 
    select
        address0_.personName as personName0_0_,
        address0_.addressType as addressT2_0_0_,
        address0_.street as street0_0_,
        address0_.state as state0_0_,
        address0_.zip as zip0_0_ 
    from
        Address address0_ 
    where
        address0_.personName=? 
        and address0_.addressType=?
14:17:38,631 DEBUG SQL:104 - 
    select
        address0_.personName as personName0_0_,
        address0_.addressType as addressT2_0_0_,
        address0_.street as street0_0_,
        address0_.state as state0_0_,
        address0_.zip as zip0_0_ 
    from
        Address address0_ 
    where
        address0_.personName=? 
        and address0_.addressType=?
14:17:38,631 DEBUG SQL:104 - 
    select
        person0_.name as name1_1_,
        person0_.name as formula100_1_,
        'HOME' as formula101_1_,
        person0_.name as formula102_1_,
        'MAILING' as formula103_1_,
        address1_.personName as personName0_0_,
        address1_.addressType as addressT2_0_0_,
        address1_.street as street0_0_,
        address1_.state as state0_0_,
        address1_.zip as zip0_0_ 
    from
        Person person0_ 
    left outer join
        Address address1_ 
            on person0_.name=address1_.personName 
            and 'HOME'=address1_.addressType 
    where
        person0_.name=?
14:17:38,632 DEBUG SQL:104 - 
    select
        address0_.personName as personName0_0_,
        address0_.addressType as addressT2_0_0_,
        address0_.street as street0_0_,
        address0_.state as state0_0_,
        address0_.zip as zip0_0_ 
    from
        Address address0_ 
    where
        address0_.personName=? 
        and address0_.addressType=?
14:17:38,633 DEBUG SQL:104 - 
    delete 
    from
        Address 
    where
        personName=? 
        and addressType=?
14:17:38,633 DEBUG SQL:104 - 
    delete 
    from
        Person 
    where
        name=?
14:17:38,634  INFO CustomRunner:139 - Test: testOneToOneFormula
14:17:38,635 DEBUG SQL:104 - 
    insert 
    into
        Person
        (name) 
    values
        (?)
14:17:38,636 DEBUG SQL:104 - 
    insert 
    into
        Address
        (street, state, zip, personName, addressType) 
    values
        (?, ?, ?, ?, ?)
14:17:38,636 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.onetoone.formula.Person
14:17:38,660 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[DOT] Node: '.'
                |  |  |  +-[DOT] Node: '.'
                |  |  |  |  +-[IDENT] Node: 'org'
                |  |  |  |  \-[IDENT] Node: 'hibernate'
                |  |  |  \-[IDENT] Node: 'test'
                |  |  \-[IDENT] Node: 'onetoone'
                |  \-[IDENT] Node: 'formula'
                \-[IDENT] Node: 'Person'

14:17:38,661 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:38,661 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.onetoone.formula.Person (<no alias>) -> person0_
14:17:38,662 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} Person person0_ ) )
14:17:38,662 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:17:38,662 DEBUG JoinProcessor:175 - Using FROM fragment [Person person0_]
14:17:38,662 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.name as name1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.onetoone.formula.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.name as formula100_, 'HOME' as formula101_, person0_.name as formula102_, 'MAILING' as formula103_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.onetoone.formula.Person}}

14:17:38,662 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:38,663 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.onetoone.formula.Person
14:17:38,663 DEBUG QueryTranslatorImpl:236 - SQL: select person0_.name as name1_, person0_.name as formula100_, 'HOME' as formula101_, person0_.name as formula102_, 'MAILING' as formula103_ from Person person0_
14:17:38,663 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:38,663 DEBUG SQL:104 - 
    select
        person0_.name as name1_,
        person0_.name as formula100_,
        'HOME' as formula101_,
        person0_.name as formula102_,
        'MAILING' as formula103_ 
    from
        Person person0_
14:17:38,664 DEBUG SQL:104 - 
    select
        address0_.personName as personName0_0_,
        address0_.addressType as addressT2_0_0_,
        address0_.street as street0_0_,
        address0_.state as state0_0_,
        address0_.zip as zip0_0_ 
    from
        Address address0_ 
    where
        address0_.personName=? 
        and address0_.addressType=?
14:17:38,664 DEBUG SQL:104 - 
    select
        address0_.personName as personName0_0_,
        address0_.addressType as addressT2_0_0_,
        address0_.street as street0_0_,
        address0_.state as state0_0_,
        address0_.zip as zip0_0_ 
    from
        Address address0_ 
    where
        address0_.personName=? 
        and address0_.addressType=?
14:17:38,665 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.onetoone.formula.Person p left join fetch p.mailingAddress left join fetch p.address
14:17:38,666 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[DOT] Node: '.'
          |  |  |  |  |  +-[DOT] Node: '.'
          |  |  |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  |  |  \-[IDENT] Node: 'test'
          |  |  |  |  \-[IDENT] Node: 'onetoone'
          |  |  |  \-[IDENT] Node: 'formula'
          |  |  \-[IDENT] Node: 'Person'
          |  \-[ALIAS] Node: 'p'
          +-[JOIN] Node: 'join'
          |  +-[LEFT] Node: 'left'
          |  +-[FETCH] Node: 'fetch'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'p'
          |     \-[IDENT] Node: 'mailingAddress'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'p'
                \-[IDENT] Node: 'address'

14:17:38,666 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:38,666 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.onetoone.formula.Person (p) -> person0_
14:17:38,666 DEBUG FromReferenceNode:74 - Resolved : p -> person0_.name
14:17:38,667 DEBUG DotNode:599 - getDataType() : mailingAddress -> org.hibernate.type.SpecialOneToOneType(org.hibernate.test.onetoone.formula.Address)
14:17:38,667 DEBUG DotNode:389 - dereferenceEntityJoin() : generating join for mailingAddress in org.hibernate.test.onetoone.formula.Person (<no alias>) parent = [ {null} ]
14:17:38,667 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.onetoone.formula.Address (<no alias>) -> address1_
14:17:38,667 DEBUG FromClause:282 - addJoinByPathMap() : p.mailingAddress -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Address,tableAlias=address1_,origin=Person person0_,columns={person0_.name 'MAILING' ,className=org.hibernate.test.onetoone.formula.Address}}
14:17:38,667 DEBUG FromReferenceNode:74 - Resolved : p.mailingAddress -> person0_.name, 'MAILING'
14:17:38,667 DEBUG HqlSqlWalker:403 - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Address address1_' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Address,tableAlias=address1_,origin=Person person0_,columns={person0_.name 'MAILING' ,className=org.hibernate.test.onetoone.formula.Address}}

14:17:38,667 DEBUG FromReferenceNode:74 - Resolved : p -> person0_.name
14:17:38,667 DEBUG DotNode:599 - getDataType() : address -> org.hibernate.type.SpecialOneToOneType(org.hibernate.test.onetoone.formula.Address)
14:17:38,668 DEBUG DotNode:389 - dereferenceEntityJoin() : generating join for address in org.hibernate.test.onetoone.formula.Person (<no alias>) parent = [ {null} ]
14:17:38,668 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.onetoone.formula.Address (<no alias>) -> address2_
14:17:38,668 DEBUG FromClause:282 - addJoinByPathMap() : p.address -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Address,tableAlias=address2_,origin=Person person0_,columns={person0_.name 'HOME' ,className=org.hibernate.test.onetoone.formula.Address}}
14:17:38,668 DEBUG FromReferenceNode:74 - Resolved : p.address -> person0_.name, 'HOME'
14:17:38,668 DEBUG HqlSqlWalker:403 - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Address address2_' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Address,tableAlias=address2_,origin=Person person0_,columns={person0_.name 'HOME' ,className=org.hibernate.test.onetoone.formula.Address}}

14:17:38,668 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} ( Person person0_ Address address1_ Address address2_ ) ) )
14:17:38,668 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:17:38,669 DEBUG JoinProcessor:175 - Using FROM fragment [Person person0_]
14:17:38,669 DEBUG JoinProcessor:175 - Using FROM fragment [left outer join Address address1_ on person0_.name=address1_.personName and 'MAILING'=address1_.addressType]
14:17:38,669 DEBUG JoinProcessor:175 - Using FROM fragment [left outer join Address address2_ on person0_.name=address2_.personName and 'HOME'=address2_.addressType]
14:17:38,669 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Address,Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.name as name1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.onetoone.formula.Person}}}
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'address1_.personName as personName0_1_, address1_.addressType as addressT2_0_1_' {FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Address,tableAlias=address1_,origin=Person person0_,columns={person0_.name 'MAILING' ,className=org.hibernate.test.onetoone.formula.Address}}}
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'address2_.personName as personName0_2_, address2_.addressType as addressT2_0_2_' {FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Address,tableAlias=address2_,origin=Person person0_,columns={person0_.name 'HOME' ,className=org.hibernate.test.onetoone.formula.Address}}}
    |  +-[SQL_TOKEN] SqlFragment: 'person0_.name as formula100_0_, 'HOME' as formula101_0_, person0_.name as formula102_0_, 'MAILING' as formula103_0_'
    |  +-[SQL_TOKEN] SqlFragment: 'address1_.street as street0_1_, address1_.state as state0_1_, address1_.zip as zip0_1_'
    |  \-[SQL_TOKEN] SqlFragment: 'address2_.street as street0_2_, address2_.state as state0_2_, address2_.zip as zip0_2_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=3, fromElements=3, fromElementByClassAlias=[p], fromElementByTableAlias=[person0_, address2_, address1_], fromElementsByPath=[p.mailingAddress, p.address], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.onetoone.formula.Person}}
          +-[JOIN_FRAGMENT] FromElement: 'left outer join Address address1_ on person0_.name=address1_.personName and 'MAILING'=address1_.addressType' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Address,tableAlias=address1_,origin=Person person0_,columns={person0_.name 'MAILING' ,className=org.hibernate.test.onetoone.formula.Address}}
          \-[JOIN_FRAGMENT] FromElement: 'left outer join Address address2_ on person0_.name=address2_.personName and 'HOME'=address2_.addressType' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Address,tableAlias=address2_,origin=Person person0_,columns={person0_.name 'HOME' ,className=org.hibernate.test.onetoone.formula.Address}}

14:17:38,669 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:38,669 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.onetoone.formula.Person p left join fetch p.mailingAddress left join fetch p.address
14:17:38,669 DEBUG QueryTranslatorImpl:236 - SQL: select person0_.name as name1_0_, address1_.personName as personName0_1_, address1_.addressType as addressT2_0_1_, address2_.personName as personName0_2_, address2_.addressType as addressT2_0_2_, person0_.name as formula100_0_, 'HOME' as formula101_0_, person0_.name as formula102_0_, 'MAILING' as formula103_0_, address1_.street as street0_1_, address1_.state as state0_1_, address1_.zip as zip0_1_, address2_.street as street0_2_, address2_.state as state0_2_, address2_.zip as zip0_2_ from Person person0_ left outer join Address address1_ on person0_.name=address1_.personName and 'MAILING'=address1_.addressType left outer join Address address2_ on person0_.name=address2_.personName and 'HOME'=address2_.addressType
14:17:38,669 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:38,670 DEBUG SQL:104 - 
    select
        person0_.name as name1_0_,
        address1_.personName as personName0_1_,
        address1_.addressType as addressT2_0_1_,
        address2_.personName as personName0_2_,
        address2_.addressType as addressT2_0_2_,
        person0_.name as formula100_0_,
        'HOME' as formula101_0_,
        person0_.name as formula102_0_,
        'MAILING' as formula103_0_,
        address1_.street as street0_1_,
        address1_.state as state0_1_,
        address1_.zip as zip0_1_,
        address2_.street as street0_2_,
        address2_.state as state0_2_,
        address2_.zip as zip0_2_ 
    from
        Person person0_ 
    left outer join
        Address address1_ 
            on person0_.name=address1_.personName 
            and 'MAILING'=address1_.addressType 
    left outer join
        Address address2_ 
            on person0_.name=address2_.personName 
            and 'HOME'=address2_.addressType
14:17:38,671 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.onetoone.formula.Person p left join fetch p.address
14:17:38,672 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[DOT] Node: '.'
          |  |  |  |  |  +-[DOT] Node: '.'
          |  |  |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  |  |  \-[IDENT] Node: 'test'
          |  |  |  |  \-[IDENT] Node: 'onetoone'
          |  |  |  \-[IDENT] Node: 'formula'
          |  |  \-[IDENT] Node: 'Person'
          |  \-[ALIAS] Node: 'p'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'p'
                \-[IDENT] Node: 'address'

14:17:38,680 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:38,680 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.onetoone.formula.Person (p) -> person0_
14:17:38,681 DEBUG FromReferenceNode:74 - Resolved : p -> person0_.name
14:17:38,682 DEBUG DotNode:599 - getDataType() : address -> org.hibernate.type.SpecialOneToOneType(org.hibernate.test.onetoone.formula.Address)
14:17:38,682 DEBUG DotNode:389 - dereferenceEntityJoin() : generating join for address in org.hibernate.test.onetoone.formula.Person (<no alias>) parent = [ {null} ]
14:17:38,682 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.onetoone.formula.Address (<no alias>) -> address1_
14:17:38,682 DEBUG FromClause:282 - addJoinByPathMap() : p.address -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Address,tableAlias=address1_,origin=Person person0_,columns={person0_.name 'HOME' ,className=org.hibernate.test.onetoone.formula.Address}}
14:17:38,682 DEBUG FromReferenceNode:74 - Resolved : p.address -> person0_.name, 'HOME'
14:17:38,682 DEBUG HqlSqlWalker:403 - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Address address1_' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Address,tableAlias=address1_,origin=Person person0_,columns={person0_.name 'HOME' ,className=org.hibernate.test.onetoone.formula.Address}}

14:17:38,682 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} ( Person person0_ Address address1_ ) ) )
14:17:38,683 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:17:38,683 DEBUG JoinProcessor:175 - Using FROM fragment [Person person0_]
14:17:38,683 DEBUG JoinProcessor:175 - Using FROM fragment [left outer join Address address1_ on person0_.name=address1_.personName and 'HOME'=address1_.addressType]
14:17:38,683 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Address,Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.name as name1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.onetoone.formula.Person}}}
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'address1_.personName as personName0_1_, address1_.addressType as addressT2_0_1_' {FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Address,tableAlias=address1_,origin=Person person0_,columns={person0_.name 'HOME' ,className=org.hibernate.test.onetoone.formula.Address}}}
    |  +-[SQL_TOKEN] SqlFragment: 'person0_.name as formula100_0_, 'HOME' as formula101_0_, person0_.name as formula102_0_, 'MAILING' as formula103_0_'
    |  \-[SQL_TOKEN] SqlFragment: 'address1_.street as street0_1_, address1_.state as state0_1_, address1_.zip as zip0_1_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[p], fromElementByTableAlias=[person0_, address1_], fromElementsByPath=[p.address], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.onetoone.formula.Person}}
          \-[JOIN_FRAGMENT] FromElement: 'left outer join Address address1_ on person0_.name=address1_.personName and 'HOME'=address1_.addressType' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Address,tableAlias=address1_,origin=Person person0_,columns={person0_.name 'HOME' ,className=org.hibernate.test.onetoone.formula.Address}}

14:17:38,697 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:38,697 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.onetoone.formula.Person p left join fetch p.address
14:17:38,697 DEBUG QueryTranslatorImpl:236 - SQL: select person0_.name as name1_0_, address1_.personName as personName0_1_, address1_.addressType as addressT2_0_1_, person0_.name as formula100_0_, 'HOME' as formula101_0_, person0_.name as formula102_0_, 'MAILING' as formula103_0_, address1_.street as street0_1_, address1_.state as state0_1_, address1_.zip as zip0_1_ from Person person0_ left outer join Address address1_ on person0_.name=address1_.personName and 'HOME'=address1_.addressType
14:17:38,698 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:38,698 DEBUG SQL:104 - 
    select
        person0_.name as name1_0_,
        address1_.personName as personName0_1_,
        address1_.addressType as addressT2_0_1_,
        person0_.name as formula100_0_,
        'HOME' as formula101_0_,
        person0_.name as formula102_0_,
        'MAILING' as formula103_0_,
        address1_.street as street0_1_,
        address1_.state as state0_1_,
        address1_.zip as zip0_1_ 
    from
        Person person0_ 
    left outer join
        Address address1_ 
            on person0_.name=address1_.personName 
            and 'HOME'=address1_.addressType
14:17:38,699 DEBUG SQL:104 - 
    select
        address0_.personName as personName0_0_,
        address0_.addressType as addressT2_0_0_,
        address0_.street as street0_0_,
        address0_.state as state0_0_,
        address0_.zip as zip0_0_ 
    from
        Address address0_ 
    where
        address0_.personName=? 
        and address0_.addressType=?
14:17:38,710 DEBUG SQL:104 - 
    select
        this_.name as name1_2_,
        this_.name as formula100_2_,
        'HOME' as formula101_2_,
        this_.name as formula102_2_,
        'MAILING' as formula103_2_,
        address1_.personName as personName0_0_,
        address1_.addressType as addressT2_0_0_,
        address1_.street as street0_0_,
        address1_.state as state0_0_,
        address1_.zip as zip0_0_,
        address4_.personName as personName0_1_,
        address4_.addressType as addressT2_0_1_,
        address4_.street as street0_1_,
        address4_.state as state0_1_,
        address4_.zip as zip0_1_ 
    from
        Person this_ 
    inner join
        Address address1_ 
            on this_.name=address1_.personName 
            and 'HOME'=address1_.addressType 
    left outer join
        Address address4_ 
            on this_.name=address4_.personName 
            and 'MAILING'=address4_.addressType 
    where
        address1_.zip=?
14:17:38,721 DEBUG SQL:104 - 
    select
        this_.name as name1_1_,
        this_.name as formula100_1_,
        'HOME' as formula101_1_,
        this_.name as formula102_1_,
        'MAILING' as formula103_1_,
        address2_.personName as personName0_0_,
        address2_.addressType as addressT2_0_0_,
        address2_.street as street0_0_,
        address2_.state as state0_0_,
        address2_.zip as zip0_0_ 
    from
        Person this_ 
    left outer join
        Address address2_ 
            on this_.name=address2_.personName 
            and 'HOME'=address2_.addressType
14:17:38,732 DEBUG SQL:104 - 
    select
        address0_.personName as personName0_0_,
        address0_.addressType as addressT2_0_0_,
        address0_.street as street0_0_,
        address0_.state as state0_0_,
        address0_.zip as zip0_0_ 
    from
        Address address0_ 
    where
        address0_.personName=? 
        and address0_.addressType=?
14:17:38,733 DEBUG SQL:104 - 
    select
        this_.name as name1_2_,
        this_.name as formula100_2_,
        'HOME' as formula101_2_,
        this_.name as formula102_2_,
        'MAILING' as formula103_2_,
        address2_.personName as personName0_0_,
        address2_.addressType as addressT2_0_0_,
        address2_.street as street0_0_,
        address2_.state as state0_0_,
        address2_.zip as zip0_0_,
        address3_.personName as personName0_1_,
        address3_.addressType as addressT2_0_1_,
        address3_.street as street0_1_,
        address3_.state as state0_1_,
        address3_.zip as zip0_1_ 
    from
        Person this_ 
    left outer join
        Address address2_ 
            on this_.name=address2_.personName 
            and 'HOME'=address2_.addressType 
    left outer join
        Address address3_ 
            on this_.name=address3_.personName 
            and 'MAILING'=address3_.addressType
14:17:38,742 DEBUG SQL:104 - 
    delete 
    from
        Address 
    where
        personName=? 
        and addressType=?
14:17:38,743 DEBUG SQL:104 - 
    delete 
    from
        Person 
    where
        name=?
14:17:38,755  INFO SchemaExport:343 - HHH000227: Running hbm2ddl schema export
14:17:38,756 DEBUG SchemaExport:353 - Import file not found: /import.sql
14:17:38,756 DEBUG SQL:104 - 
    alter table Address 
        drop constraint FK1ED033D4986DE710
14:17:38,757 DEBUG SQL:104 - 
    drop table Address if exists
14:17:38,757 DEBUG SQL:104 - 
    drop table Person if exists
14:17:38,757  INFO SchemaExport:405 - HHH000230: Schema export complete
14:17:38,757  INFO DriverManagerConnectionProviderImpl:162 - HHH000030: Cleaning up connection pool [jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE]
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
