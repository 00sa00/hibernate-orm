<?xml version="1.0" encoding="UTF-8"?>
<testsuite errors="0" failures="0" hostname="dhcp-10.15.208.168.stl.redhat.com" name="org.hibernate.test.subclassfilter.JoinedSubclassFilterTest" tests="1" time="0.26" timestamp="2013-02-28T20:19:21">
  <properties />
  <testcase classname="org.hibernate.test.subclassfilter.JoinedSubclassFilterTest" name="testFiltersWithJoinedSubclass" time="0.207" />
  <system-out><![CDATA[14:19:21,679  INFO CustomRunner:132 - BeforeClass: org.hibernate.test.subclassfilter.JoinedSubclassFilterTest
14:19:21,681  INFO Configuration:706 - HHH000221: Reading mappings from resource: org/hibernate/test/subclassfilter/joined-subclass.hbm.xml
14:19:21,687  INFO DriverManagerConnectionProviderImpl:99 - HHH000402: Using Hibernate built-in connection pool (not for production use!)
14:19:21,688  INFO DriverManagerConnectionProviderImpl:135 - HHH000115: Hibernate connection pool size: 5
14:19:21,688  INFO DriverManagerConnectionProviderImpl:138 - HHH000006: Autocommit mode: false
14:19:21,688  INFO DriverManagerConnectionProviderImpl:153 - HHH000401: using driver [org.h2.Driver] at URL [jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE]
14:19:21,688  INFO DriverManagerConnectionProviderImpl:158 - HHH000046: Connection properties: {user=sa}
14:19:21,690  INFO Dialect:103 - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
14:19:21,690  INFO LobCreatorBuilder:94 - HHH000423: Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
14:19:21,690  INFO TransactionFactoryInitiator:66 - HHH000399: Using default transaction strategy (direct JDBC transactions)
14:19:21,691  INFO ASTQueryTranslatorFactory:48 - HHH000397: Using ASTQueryTranslatorFactory
14:19:21,691  WARN CachingRegionFactory:58 - CachingRegionFactory should be only used for testing.
14:19:21,697  INFO SchemaExport:343 - HHH000227: Running hbm2ddl schema export
14:19:21,698 DEBUG SchemaExport:353 - Import file not found: /import.sql
14:19:21,698 DEBUG SQL:104 - 
    alter table JCustomer 
        drop constraint FK3C3FA48A3A05842
14:19:21,699 ERROR SchemaExport:425 - HHH000389: Unsuccessful: alter table JCustomer drop constraint FK3C3FA48A3A05842
14:19:21,699 ERROR SchemaExport:426 - Table "JCUSTOMER" not found; SQL statement:

    alter table JCustomer 
        drop constraint FK3C3FA48A3A05842 [42102-145]
14:19:21,699 DEBUG SQL:104 - 
    alter table JCustomer 
        drop constraint FK3C3FA48D01561E9
14:19:21,699 ERROR SchemaExport:425 - HHH000389: Unsuccessful: alter table JCustomer drop constraint FK3C3FA48D01561E9
14:19:21,699 ERROR SchemaExport:426 - Table "JCUSTOMER" not found; SQL statement:

    alter table JCustomer 
        drop constraint FK3C3FA48D01561E9 [42102-145]
14:19:21,699 DEBUG SQL:104 - 
    alter table JEmployee 
        drop constraint FK26C56118A3A05842
14:19:21,699 ERROR SchemaExport:425 - HHH000389: Unsuccessful: alter table JEmployee drop constraint FK26C56118A3A05842
14:19:21,700 ERROR SchemaExport:426 - Table "JEMPLOYEE" not found; SQL statement:

    alter table JEmployee 
        drop constraint FK26C56118A3A05842 [42102-145]
14:19:21,700 DEBUG SQL:104 - 
    alter table JEmployee 
        drop constraint FK26C5611842E7F3F8
14:19:21,700 ERROR SchemaExport:425 - HHH000389: Unsuccessful: alter table JEmployee drop constraint FK26C5611842E7F3F8
14:19:21,700 ERROR SchemaExport:426 - Table "JEMPLOYEE" not found; SQL statement:

    alter table JEmployee 
        drop constraint FK26C5611842E7F3F8 [42102-145]
14:19:21,700 DEBUG SQL:104 - 
    drop table JCustomer if exists
14:19:21,700 DEBUG SQL:104 - 
    drop table JEmployee if exists
14:19:21,700 DEBUG SQL:104 - 
    drop table JPerson if exists
14:19:21,701 DEBUG SQL:104 - 
    create table JCustomer (
        person_id bigint not null,
        contactOwner bigint,
        primary key (person_id)
    )
14:19:21,701 DEBUG SQL:104 - 
    create table JEmployee (
        person_id bigint not null,
        title varchar(255),
        dept varchar(255),
        mgr_id bigint,
        primary key (person_id)
    )
14:19:21,701 DEBUG SQL:104 - 
    create table JPerson (
        person_id bigint generated by default as identity,
        name varchar(255),
        company varchar(255),
        region varchar(255),
        primary key (person_id)
    )
14:19:21,702 DEBUG SQL:104 - 
    alter table JCustomer 
        add constraint FK3C3FA48A3A05842 
        foreign key (person_id) 
        references JPerson
14:19:21,702 DEBUG SQL:104 - 
    alter table JCustomer 
        add constraint FK3C3FA48D01561E9 
        foreign key (contactOwner) 
        references JEmployee
14:19:21,702 DEBUG SQL:104 - 
    alter table JEmployee 
        add constraint FK26C56118A3A05842 
        foreign key (person_id) 
        references JPerson
14:19:21,703 DEBUG SQL:104 - 
    alter table JEmployee 
        add constraint FK26C5611842E7F3F8 
        foreign key (mgr_id) 
        references JEmployee
14:19:21,703  INFO SchemaExport:405 - HHH000230: Schema export complete
14:19:21,704  WARN SessionFactoryImpl:1554 - HHH000008: JTASessionContext being used with JDBCTransactionFactory; auto-flush will not operate correctly with getCurrentSession()
14:19:21,704  INFO CustomRunner:139 - Test: testFiltersWithJoinedSubclass
14:19:21,709 DEBUG SQL:104 - 
    insert 
    into
        JPerson
        (person_id, name, company, region) 
    values
        (null, ?, ?, ?)
14:19:21,709 DEBUG SQL:104 - 
    insert 
    into
        JEmployee
        (title, dept, mgr_id, person_id) 
    values
        (?, ?, ?, ?)
14:19:21,710 DEBUG SQL:104 - 
    insert 
    into
        JPerson
        (person_id, name, company, region) 
    values
        (null, ?, ?, ?)
14:19:21,710 DEBUG SQL:104 - 
    insert 
    into
        JEmployee
        (title, dept, mgr_id, person_id) 
    values
        (?, ?, ?, ?)
14:19:21,711 DEBUG SQL:104 - 
    insert 
    into
        JPerson
        (person_id, name, company, region) 
    values
        (null, ?, ?, ?)
14:19:21,711 DEBUG SQL:104 - 
    insert 
    into
        JEmployee
        (title, dept, mgr_id, person_id) 
    values
        (?, ?, ?, ?)
14:19:21,712 DEBUG SQL:104 - 
    insert 
    into
        JPerson
        (person_id, name, company, region) 
    values
        (null, ?, ?, ?)
14:19:21,712 DEBUG SQL:104 - 
    insert 
    into
        JCustomer
        (contactOwner, person_id) 
    values
        (?, ?)
14:19:21,713 DEBUG SQL:104 - 
    insert 
    into
        JPerson
        (person_id, name, company, region) 
    values
        (null, ?, ?, ?)
14:19:21,713 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.subclassfilter.Person
14:19:21,714 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[DOT] Node: '.'
                |  |  |  +-[IDENT] Node: 'org'
                |  |  |  \-[IDENT] Node: 'hibernate'
                |  |  \-[IDENT] Node: 'test'
                |  \-[IDENT] Node: 'subclassfilter'
                \-[IDENT] Node: 'Person'

14:19:21,714 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,714 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.subclassfilter.Person (<no alias>) -> person0_
14:19:21,714 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} JPerson person0_ ) )
14:19:21,715 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:19:21,715 DEBUG JoinProcessor:175 - Using FROM fragment [JPerson person0_ left outer join JEmployee person0_1_ on person0_.person_id=person0_1_.person_id left outer join JCustomer person0_2_ on person0_.person_id=person0_2_.person_id]
14:19:21,715 DEBUG SyntheticAndFactory:92 - Using unprocessed WHERE-fragment [person0_.region = :region.userRegion]
14:19:21,715 DEBUG SyntheticAndFactory:124 - Using processed WHERE-fragment [person0_.region = ?]
14:19:21,715 DEBUG QueryNode:73 - getWhereClause() : Creating a new WHERE clause...
14:19:21,715 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (JPerson)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.person_id as person1_2_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=JPerson,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.subclassfilter.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.name as name2_, person0_.company as company2_, person0_.region as region2_, person0_1_.title as title1_, person0_1_.dept as dept1_, person0_1_.mgr_id as mgr4_1_, person0_2_.contactOwner as contactO2_0_, case when person0_1_.person_id is not null then 1 when person0_2_.person_id is not null then 2 when person0_.person_id is not null then 0 end as clazz_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'JPerson person0_ left outer join JEmployee person0_1_ on person0_.person_id=person0_1_.person_id left outer join JCustomer person0_2_ on person0_.person_id=person0_2_.person_id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=JPerson,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.subclassfilter.Person}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[FILTERS] SqlNode: '{filter conditions}'
          \-[SQL_TOKEN] SqlFragment: 'person0_.region = ?'

14:19:21,715 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,716 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.subclassfilter.Person
14:19:21,716 DEBUG QueryTranslatorImpl:236 - SQL: select person0_.person_id as person1_2_, person0_.name as name2_, person0_.company as company2_, person0_.region as region2_, person0_1_.title as title1_, person0_1_.dept as dept1_, person0_1_.mgr_id as mgr4_1_, person0_2_.contactOwner as contactO2_0_, case when person0_1_.person_id is not null then 1 when person0_2_.person_id is not null then 2 when person0_.person_id is not null then 0 end as clazz_ from JPerson person0_ left outer join JEmployee person0_1_ on person0_.person_id=person0_1_.person_id left outer join JCustomer person0_2_ on person0_.person_id=person0_2_.person_id where person0_.region = ?
14:19:21,716 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,716 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_2_,
        person0_.name as name2_,
        person0_.company as company2_,
        person0_.region as region2_,
        person0_1_.title as title1_,
        person0_1_.dept as dept1_,
        person0_1_.mgr_id as mgr4_1_,
        person0_2_.contactOwner as contactO2_0_,
        case 
            when person0_1_.person_id is not null then 1 
            when person0_2_.person_id is not null then 2 
            when person0_.person_id is not null then 0 
        end as clazz_ 
    from
        JPerson person0_ 
    left outer join
        JEmployee person0_1_ 
            on person0_.person_id=person0_1_.person_id 
    left outer join
        JCustomer person0_2_ 
            on person0_.person_id=person0_2_.person_id 
    where
        person0_.region = ?
14:19:21,723 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.subclassfilter.Employee
14:19:21,724 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[DOT] Node: '.'
                |  |  |  +-[IDENT] Node: 'org'
                |  |  |  \-[IDENT] Node: 'hibernate'
                |  |  \-[IDENT] Node: 'test'
                |  \-[IDENT] Node: 'subclassfilter'
                \-[IDENT] Node: 'Employee'

14:19:21,724 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,724 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.subclassfilter.Employee (<no alias>) -> employee0_
14:19:21,724 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} JEmployee employee0_ ) )
14:19:21,724 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:19:21,724 DEBUG JoinProcessor:175 - Using FROM fragment [JEmployee employee0_ inner join JPerson employee0_1_ on employee0_.person_id=employee0_1_.person_id]
14:19:21,725 DEBUG SyntheticAndFactory:92 - Using unprocessed WHERE-fragment [employee0_1_.region = :region.userRegion]
14:19:21,725 DEBUG SyntheticAndFactory:124 - Using processed WHERE-fragment [employee0_1_.region = ?]
14:19:21,725 DEBUG QueryNode:73 - getWhereClause() : Creating a new WHERE clause...
14:19:21,725 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (JPerson,JEmployee)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'employee0_.person_id as person1_2_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=JEmployee,tableAlias=employee0_,origin=null,columns={,className=org.hibernate.test.subclassfilter.Employee}}}
    |  \-[SQL_TOKEN] SqlFragment: 'employee0_1_.name as name2_, employee0_1_.company as company2_, employee0_1_.region as region2_, employee0_.title as title1_, employee0_.dept as dept1_, employee0_.mgr_id as mgr4_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[employee0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'JEmployee employee0_ inner join JPerson employee0_1_ on employee0_.person_id=employee0_1_.person_id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=JEmployee,tableAlias=employee0_,origin=null,columns={,className=org.hibernate.test.subclassfilter.Employee}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[FILTERS] SqlNode: '{filter conditions}'
          \-[SQL_TOKEN] SqlFragment: 'employee0_1_.region = ?'

14:19:21,734 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,735 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.subclassfilter.Employee
14:19:21,735 DEBUG QueryTranslatorImpl:236 - SQL: select employee0_.person_id as person1_2_, employee0_1_.name as name2_, employee0_1_.company as company2_, employee0_1_.region as region2_, employee0_.title as title1_, employee0_.dept as dept1_, employee0_.mgr_id as mgr4_1_ from JEmployee employee0_ inner join JPerson employee0_1_ on employee0_.person_id=employee0_1_.person_id where employee0_1_.region = ?
14:19:21,735 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,735 DEBUG SQL:104 - 
    select
        employee0_.person_id as person1_2_,
        employee0_1_.name as name2_,
        employee0_1_.company as company2_,
        employee0_1_.region as region2_,
        employee0_.title as title1_,
        employee0_.dept as dept1_,
        employee0_.mgr_id as mgr4_1_ 
    from
        JEmployee employee0_ 
    inner join
        JPerson employee0_1_ 
            on employee0_.person_id=employee0_1_.person_id 
    where
        employee0_1_.region = ?
14:19:21,746 DEBUG SQL:104 - 
    select
        minions0_.mgr_id as mgr4_2_1_,
        minions0_.person_id as person1_1_1_,
        minions0_.person_id as person1_2_0_,
        minions0_1_.name as name2_0_,
        minions0_1_.company as company2_0_,
        minions0_1_.region as region2_0_,
        minions0_.title as title1_0_,
        minions0_.dept as dept1_0_,
        minions0_.mgr_id as mgr4_1_0_ 
    from
        JEmployee minions0_ 
    inner join
        JPerson minions0_1_ 
            on minions0_.person_id=minions0_1_.person_id 
    where
        minions0_.mgr_id=?
14:19:21,756 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.subclassfilter.Person as p left join fetch p.minions
14:19:21,757 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[DOT] Node: '.'
          |  |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  |  \-[IDENT] Node: 'test'
          |  |  |  \-[IDENT] Node: 'subclassfilter'
          |  |  \-[IDENT] Node: 'Person'
          |  \-[ALIAS] Node: 'p'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'p'
                \-[IDENT] Node: 'minions'

14:19:21,757 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,758 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.subclassfilter.Person (p) -> person0_
14:19:21,758 DEBUG FromReferenceNode:74 - Resolved : p -> person0_.person_id
14:19:21,758 DEBUG DotNode:599 - getDataType() : minions -> org.hibernate.type.SetType(org.hibernate.test.subclassfilter.Employee.minions)
14:19:21,767 DEBUG FromElementFactory:376 - createEntityAssociation() : One to many - path = p.minions role = org.hibernate.test.subclassfilter.Employee.minions associatedEntityName = org.hibernate.test.subclassfilter.Employee
14:19:21,768 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.subclassfilter.Employee (<no alias>) -> minions1_
14:19:21,768 DEBUG FromClause:282 - addJoinByPathMap() : p.minions -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=JEmployee,tableAlias=minions1_,origin=JPerson person0_,columns={person0_.person_id ,className=org.hibernate.test.subclassfilter.Employee}}
14:19:21,768 DEBUG DotNode:308 - dereferenceCollection() : Created new FROM element for p.minions : JEmployee minions1_
14:19:21,768 DEBUG FromReferenceNode:74 - Resolved : p.minions -> .
14:19:21,768 DEBUG HqlSqlWalker:403 - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'JEmployee minions1_' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=org.hibernate.test.subclassfilter.Employee.minions,tableName=JEmployee,tableAlias=minions1_,origin=JPerson person0_,columns={person0_.person_id ,className=org.hibernate.test.subclassfilter.Employee}}

14:19:21,768 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} ( JPerson person0_ JEmployee minions1_ ) ) )
14:19:21,768 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:19:21,769 DEBUG JoinProcessor:175 - Using FROM fragment [JPerson person0_ left outer join JEmployee person0_1_ on person0_.person_id=person0_1_.person_id left outer join JCustomer person0_2_ on person0_.person_id=person0_2_.person_id]
14:19:21,769 DEBUG SyntheticAndFactory:92 - Using unprocessed WHERE-fragment [person0_.region = :region.userRegion]
14:19:21,769 DEBUG SyntheticAndFactory:124 - Using processed WHERE-fragment [person0_.region = ?]
14:19:21,769 DEBUG QueryNode:73 - getWhereClause() : Creating a new WHERE clause...
14:19:21,769 DEBUG JoinProcessor:175 - Using FROM fragment [left outer join JEmployee minions1_ on person0_.person_id=minions1_.mgr_id left outer join JPerson minions1_1_ on minions1_.person_id=minions1_1_.person_id]
14:19:21,769 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (JPerson,JEmployee)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.person_id as person1_2_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=JPerson,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.subclassfilter.Person}}}
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'minions1_.person_id as person1_2_1_' {FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=org.hibernate.test.subclassfilter.Employee.minions,tableName=JEmployee,tableAlias=minions1_,origin=JPerson person0_ left outer join JEmployee person0_1_ on person0_.person_id=person0_1_.person_id left outer join JCustomer person0_2_ on person0_.person_id=person0_2_.person_id,columns={person0_.person_id ,className=org.hibernate.test.subclassfilter.Employee}}}
    |  +-[SQL_TOKEN] SqlFragment: 'person0_.name as name2_0_, person0_.company as company2_0_, person0_.region as region2_0_, person0_1_.title as title1_0_, person0_1_.dept as dept1_0_, person0_1_.mgr_id as mgr4_1_0_, person0_2_.contactOwner as contactO2_0_0_, case when person0_1_.person_id is not null then 1 when person0_2_.person_id is not null then 2 when person0_.person_id is not null then 0 end as clazz_0_'
    |  +-[SQL_TOKEN] SqlFragment: 'minions1_1_.name as name2_1_, minions1_1_.company as company2_1_, minions1_1_.region as region2_1_, minions1_.title as title1_1_, minions1_.dept as dept1_1_, minions1_.mgr_id as mgr4_1_1_'
    |  \-[SQL_TOKEN] SqlFragment: 'minions1_.mgr_id as mgr4_2_0__, minions1_.person_id as person1_1_0__'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[p], fromElementByTableAlias=[minions1_, person0_], fromElementsByPath=[p.minions], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'JPerson person0_ left outer join JEmployee person0_1_ on person0_.person_id=person0_1_.person_id left outer join JCustomer person0_2_ on person0_.person_id=person0_2_.person_id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=JPerson,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.subclassfilter.Person}}
    |     \-[JOIN_FRAGMENT] FromElement: 'left outer join JEmployee minions1_ on person0_.person_id=minions1_.mgr_id left outer join JPerson minions1_1_ on minions1_.person_id=minions1_1_.person_id' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=org.hibernate.test.subclassfilter.Employee.minions,tableName=JEmployee,tableAlias=minions1_,origin=JPerson person0_ left outer join JEmployee person0_1_ on person0_.person_id=person0_1_.person_id left outer join JCustomer person0_2_ on person0_.person_id=person0_2_.person_id,columns={person0_.person_id ,className=org.hibernate.test.subclassfilter.Employee}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[FILTERS] SqlNode: '{filter conditions}'
          \-[SQL_TOKEN] SqlFragment: 'person0_.region = ?'

14:19:21,769 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,779 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.subclassfilter.Person as p left join fetch p.minions
14:19:21,779 DEBUG QueryTranslatorImpl:236 - SQL: select person0_.person_id as person1_2_0_, minions1_.person_id as person1_2_1_, person0_.name as name2_0_, person0_.company as company2_0_, person0_.region as region2_0_, person0_1_.title as title1_0_, person0_1_.dept as dept1_0_, person0_1_.mgr_id as mgr4_1_0_, person0_2_.contactOwner as contactO2_0_0_, case when person0_1_.person_id is not null then 1 when person0_2_.person_id is not null then 2 when person0_.person_id is not null then 0 end as clazz_0_, minions1_1_.name as name2_1_, minions1_1_.company as company2_1_, minions1_1_.region as region2_1_, minions1_.title as title1_1_, minions1_.dept as dept1_1_, minions1_.mgr_id as mgr4_1_1_, minions1_.mgr_id as mgr4_2_0__, minions1_.person_id as person1_1_0__ from JPerson person0_ left outer join JEmployee person0_1_ on person0_.person_id=person0_1_.person_id left outer join JCustomer person0_2_ on person0_.person_id=person0_2_.person_id left outer join JEmployee minions1_ on person0_.person_id=minions1_.mgr_id left outer join JPerson minions1_1_ on minions1_.person_id=minions1_1_.person_id where person0_.region = ?
14:19:21,779 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,780 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_2_0_,
        minions1_.person_id as person1_2_1_,
        person0_.name as name2_0_,
        person0_.company as company2_0_,
        person0_.region as region2_0_,
        person0_1_.title as title1_0_,
        person0_1_.dept as dept1_0_,
        person0_1_.mgr_id as mgr4_1_0_,
        person0_2_.contactOwner as contactO2_0_0_,
        case 
            when person0_1_.person_id is not null then 1 
            when person0_2_.person_id is not null then 2 
            when person0_.person_id is not null then 0 
        end as clazz_0_,
        minions1_1_.name as name2_1_,
        minions1_1_.company as company2_1_,
        minions1_1_.region as region2_1_,
        minions1_.title as title1_1_,
        minions1_.dept as dept1_1_,
        minions1_.mgr_id as mgr4_1_1_,
        minions1_.mgr_id as mgr4_2_0__,
        minions1_.person_id as person1_1_0__ 
    from
        JPerson person0_ 
    left outer join
        JEmployee person0_1_ 
            on person0_.person_id=person0_1_.person_id 
    left outer join
        JCustomer person0_2_ 
            on person0_.person_id=person0_2_.person_id 
    left outer join
        JEmployee minions1_ 
            on person0_.person_id=minions1_.mgr_id 
    left outer join
        JPerson minions1_1_ 
            on minions1_.person_id=minions1_1_.person_id 
    where
        person0_.region = ?
14:19:21,798 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.subclassfilter.Employee as p left join fetch p.minions
14:19:21,799 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[DOT] Node: '.'
          |  |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  |  \-[IDENT] Node: 'test'
          |  |  |  \-[IDENT] Node: 'subclassfilter'
          |  |  \-[IDENT] Node: 'Employee'
          |  \-[ALIAS] Node: 'p'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'p'
                \-[IDENT] Node: 'minions'

14:19:21,803 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,804 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.subclassfilter.Employee (p) -> employee0_
14:19:21,804 DEBUG FromReferenceNode:74 - Resolved : p -> employee0_.person_id
14:19:21,804 DEBUG DotNode:599 - getDataType() : minions -> org.hibernate.type.SetType(org.hibernate.test.subclassfilter.Employee.minions)
14:19:21,804 DEBUG FromElementFactory:376 - createEntityAssociation() : One to many - path = p.minions role = org.hibernate.test.subclassfilter.Employee.minions associatedEntityName = org.hibernate.test.subclassfilter.Employee
14:19:21,804 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.subclassfilter.Employee (<no alias>) -> minions1_
14:19:21,804 DEBUG FromClause:282 - addJoinByPathMap() : p.minions -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=JEmployee,tableAlias=minions1_,origin=JEmployee employee0_,columns={employee0_.person_id ,className=org.hibernate.test.subclassfilter.Employee}}
14:19:21,805 DEBUG DotNode:308 - dereferenceCollection() : Created new FROM element for p.minions : JEmployee minions1_
14:19:21,805 DEBUG FromReferenceNode:74 - Resolved : p.minions -> .
14:19:21,805 DEBUG HqlSqlWalker:403 - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'JEmployee minions1_' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=org.hibernate.test.subclassfilter.Employee.minions,tableName=JEmployee,tableAlias=minions1_,origin=JEmployee employee0_,columns={employee0_.person_id ,className=org.hibernate.test.subclassfilter.Employee}}

14:19:21,805 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} ( JEmployee employee0_ JEmployee minions1_ ) ) )
14:19:21,805 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:19:21,805 DEBUG JoinProcessor:175 - Using FROM fragment [JEmployee employee0_ inner join JPerson employee0_1_ on employee0_.person_id=employee0_1_.person_id]
14:19:21,805 DEBUG SyntheticAndFactory:92 - Using unprocessed WHERE-fragment [employee0_1_.region = :region.userRegion]
14:19:21,806 DEBUG SyntheticAndFactory:124 - Using processed WHERE-fragment [employee0_1_.region = ?]
14:19:21,806 DEBUG QueryNode:73 - getWhereClause() : Creating a new WHERE clause...
14:19:21,806 DEBUG JoinProcessor:175 - Using FROM fragment [left outer join JEmployee minions1_ on employee0_.person_id=minions1_.mgr_id left outer join JPerson minions1_1_ on minions1_.person_id=minions1_1_.person_id]
14:19:21,806 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (JPerson,JEmployee)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'employee0_.person_id as person1_2_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=JEmployee,tableAlias=employee0_,origin=null,columns={,className=org.hibernate.test.subclassfilter.Employee}}}
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'minions1_.person_id as person1_2_1_' {FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=org.hibernate.test.subclassfilter.Employee.minions,tableName=JEmployee,tableAlias=minions1_,origin=JEmployee employee0_ inner join JPerson employee0_1_ on employee0_.person_id=employee0_1_.person_id,columns={employee0_.person_id ,className=org.hibernate.test.subclassfilter.Employee}}}
    |  +-[SQL_TOKEN] SqlFragment: 'employee0_1_.name as name2_0_, employee0_1_.company as company2_0_, employee0_1_.region as region2_0_, employee0_.title as title1_0_, employee0_.dept as dept1_0_, employee0_.mgr_id as mgr4_1_0_'
    |  +-[SQL_TOKEN] SqlFragment: 'minions1_1_.name as name2_1_, minions1_1_.company as company2_1_, minions1_1_.region as region2_1_, minions1_.title as title1_1_, minions1_.dept as dept1_1_, minions1_.mgr_id as mgr4_1_1_'
    |  \-[SQL_TOKEN] SqlFragment: 'minions1_.mgr_id as mgr4_2_0__, minions1_.person_id as person1_1_0__'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[p], fromElementByTableAlias=[minions1_, employee0_], fromElementsByPath=[p.minions], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'JEmployee employee0_ inner join JPerson employee0_1_ on employee0_.person_id=employee0_1_.person_id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=JEmployee,tableAlias=employee0_,origin=null,columns={,className=org.hibernate.test.subclassfilter.Employee}}
    |     \-[JOIN_FRAGMENT] FromElement: 'left outer join JEmployee minions1_ on employee0_.person_id=minions1_.mgr_id left outer join JPerson minions1_1_ on minions1_.person_id=minions1_1_.person_id' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=org.hibernate.test.subclassfilter.Employee.minions,tableName=JEmployee,tableAlias=minions1_,origin=JEmployee employee0_ inner join JPerson employee0_1_ on employee0_.person_id=employee0_1_.person_id,columns={employee0_.person_id ,className=org.hibernate.test.subclassfilter.Employee}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[FILTERS] SqlNode: '{filter conditions}'
          \-[SQL_TOKEN] SqlFragment: 'employee0_1_.region = ?'

14:19:21,814 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,814 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.subclassfilter.Employee as p left join fetch p.minions
14:19:21,814 DEBUG QueryTranslatorImpl:236 - SQL: select employee0_.person_id as person1_2_0_, minions1_.person_id as person1_2_1_, employee0_1_.name as name2_0_, employee0_1_.company as company2_0_, employee0_1_.region as region2_0_, employee0_.title as title1_0_, employee0_.dept as dept1_0_, employee0_.mgr_id as mgr4_1_0_, minions1_1_.name as name2_1_, minions1_1_.company as company2_1_, minions1_1_.region as region2_1_, minions1_.title as title1_1_, minions1_.dept as dept1_1_, minions1_.mgr_id as mgr4_1_1_, minions1_.mgr_id as mgr4_2_0__, minions1_.person_id as person1_1_0__ from JEmployee employee0_ inner join JPerson employee0_1_ on employee0_.person_id=employee0_1_.person_id left outer join JEmployee minions1_ on employee0_.person_id=minions1_.mgr_id left outer join JPerson minions1_1_ on minions1_.person_id=minions1_1_.person_id where employee0_1_.region = ?
14:19:21,814 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,815 DEBUG SQL:104 - 
    select
        employee0_.person_id as person1_2_0_,
        minions1_.person_id as person1_2_1_,
        employee0_1_.name as name2_0_,
        employee0_1_.company as company2_0_,
        employee0_1_.region as region2_0_,
        employee0_.title as title1_0_,
        employee0_.dept as dept1_0_,
        employee0_.mgr_id as mgr4_1_0_,
        minions1_1_.name as name2_1_,
        minions1_1_.company as company2_1_,
        minions1_1_.region as region2_1_,
        minions1_.title as title1_1_,
        minions1_.dept as dept1_1_,
        minions1_.mgr_id as mgr4_1_1_,
        minions1_.mgr_id as mgr4_2_0__,
        minions1_.person_id as person1_1_0__ 
    from
        JEmployee employee0_ 
    inner join
        JPerson employee0_1_ 
            on employee0_.person_id=employee0_1_.person_id 
    left outer join
        JEmployee minions1_ 
            on employee0_.person_id=minions1_.mgr_id 
    left outer join
        JPerson minions1_1_ 
            on minions1_.person_id=minions1_1_.person_id 
    where
        employee0_1_.region = ?
14:19:21,827 DEBUG QueryTranslatorImpl:265 - parse() - HQL: delete org.hibernate.test.subclassfilter.Customer where contactOwner is not null
14:19:21,828 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[DELETE] Node: 'delete'
    +-[FROM] Node: 'FROM'
    |  \-[RANGE] Node: 'RANGE'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'subclassfilter'
    |        \-[IDENT] Node: 'Customer'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[IDENT] Node: 'contactOwner'

14:19:21,835 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,836 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.subclassfilter.Customer (<no alias>) -> customer0_
14:19:21,836 DEBUG FromReferenceNode:74 - Resolved : {synthetic-alias} -> {synthetic-alias}
14:19:21,836 DEBUG DotNode:599 - getDataType() : contactOwner -> org.hibernate.type.ManyToOneType(org.hibernate.test.subclassfilter.Employee)
14:19:21,836 DEBUG DotNode:562 - dereferenceShortcut() : property contactOwner in org.hibernate.test.subclassfilter.Customer does not require a join.
14:19:21,836 DEBUG DotNode:588 - Terminal propertyPath = [contactOwner]
14:19:21,836 DEBUG FromReferenceNode:74 - Resolved : {synthetic-alias}.contactOwner -> customer0_.contactOwner
14:19:21,837 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[DELETE] DeleteStatement: 'delete'  querySpaces (JCustomer,JPerson)
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[customer0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'JCustomer' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=JCustomer,tableAlias=customer0_,origin=null,columns={,className=org.hibernate.test.subclassfilter.Customer}}
    \-[WHERE] SqlNode: 'where'
       \-[IS_NOT_NULL] IsNotNullLogicOperatorNode: 'is not null'
          \-[DOT] DotNode: 'customer0_.contactOwner' {propertyName=contactOwner,dereferenceType=0,propertyPath=contactOwner,path={synthetic-alias}.contactOwner,tableAlias=customer0_,className=org.hibernate.test.subclassfilter.Customer,classAlias=null}
             +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             \-[IDENT] IdentNode: 'contactOwner' {originalText=contactOwner}

14:19:21,837 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,837 DEBUG SQL:104 - 
    insert 
    into
        HT_JCustomer
        select
            customer0_.person_id as person_id 
        from
            JCustomer customer0_ 
        inner join
            JPerson customer0_1_ 
                on customer0_.person_id=customer0_1_.person_id 
        where
            customer0_.contactOwner is not null
14:19:21,838 DEBUG SQL:104 - 
    delete 
    from
        JCustomer 
    where
        (
            person_id
        ) IN (
            select
                person_id 
            from
                HT_JCustomer
        )
14:19:21,838 DEBUG SQL:104 - 
    delete 
    from
        JPerson 
    where
        (
            person_id
        ) IN (
            select
                person_id 
            from
                HT_JCustomer
        )
14:19:21,849 DEBUG SQL:104 - 
    delete 
    from
        HT_JCustomer
14:19:21,849 DEBUG QueryTranslatorImpl:265 - parse() - HQL: delete org.hibernate.test.subclassfilter.Employee where manager is not null
14:19:21,850 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[DELETE] Node: 'delete'
    +-[FROM] Node: 'FROM'
    |  \-[RANGE] Node: 'RANGE'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'subclassfilter'
    |        \-[IDENT] Node: 'Employee'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[IDENT] Node: 'manager'

14:19:21,861 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,861 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.subclassfilter.Employee (<no alias>) -> employee0_
14:19:21,862 DEBUG FromReferenceNode:74 - Resolved : {synthetic-alias} -> {synthetic-alias}
14:19:21,862 DEBUG DotNode:599 - getDataType() : manager -> org.hibernate.type.ManyToOneType(org.hibernate.test.subclassfilter.Employee)
14:19:21,862 DEBUG DotNode:562 - dereferenceShortcut() : property manager in org.hibernate.test.subclassfilter.Employee does not require a join.
14:19:21,862 DEBUG DotNode:588 - Terminal propertyPath = [manager]
14:19:21,862 DEBUG FromReferenceNode:74 - Resolved : {synthetic-alias}.manager -> employee0_.mgr_id
14:19:21,862 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[DELETE] DeleteStatement: 'delete'  querySpaces (JPerson,JEmployee)
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[employee0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'JEmployee' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=JEmployee,tableAlias=employee0_,origin=null,columns={,className=org.hibernate.test.subclassfilter.Employee}}
    \-[WHERE] SqlNode: 'where'
       \-[IS_NOT_NULL] IsNotNullLogicOperatorNode: 'is not null'
          \-[DOT] DotNode: 'employee0_.mgr_id' {propertyName=manager,dereferenceType=0,propertyPath=manager,path={synthetic-alias}.manager,tableAlias=employee0_,className=org.hibernate.test.subclassfilter.Employee,classAlias=null}
             +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             \-[IDENT] IdentNode: 'manager' {originalText=manager}

14:19:21,863 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,863 DEBUG SQL:104 - 
    insert 
    into
        HT_JEmployee
        select
            employee0_.person_id as person_id 
        from
            JEmployee employee0_ 
        inner join
            JPerson employee0_1_ 
                on employee0_.person_id=employee0_1_.person_id 
        where
            employee0_.mgr_id is not null
14:19:21,871 DEBUG SQL:104 - 
    delete 
    from
        JEmployee 
    where
        (
            person_id
        ) IN (
            select
                person_id 
            from
                HT_JEmployee
        )
14:19:21,880 DEBUG SQL:104 - 
    delete 
    from
        JPerson 
    where
        (
            person_id
        ) IN (
            select
                person_id 
            from
                HT_JEmployee
        )
14:19:21,880 DEBUG SQL:104 - 
    delete 
    from
        HT_JEmployee
14:19:21,880 DEBUG QueryTranslatorImpl:265 - parse() - HQL: delete org.hibernate.test.subclassfilter.Person
14:19:21,881 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[DELETE] Node: 'delete'
    \-[FROM] Node: 'FROM'
       \-[RANGE] Node: 'RANGE'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'subclassfilter'
             \-[IDENT] Node: 'Person'

14:19:21,890 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,890 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.subclassfilter.Person (<no alias>) -> person0_
14:19:21,890 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[DELETE] DeleteStatement: 'delete'  querySpaces (JPerson)
    \-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'JPerson' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=JPerson,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.subclassfilter.Person}}

14:19:21,891 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:19:21,891 DEBUG DeleteStatement:73 - getWhereClause() : Creating a new WHERE clause...
14:19:21,891 DEBUG SQL:104 - 
    insert 
    into
        HT_JPerson
        select
            person0_.person_id as person_id 
        from
            JPerson person0_
14:19:21,891 DEBUG SQL:104 - 
    delete 
    from
        JCustomer 
    where
        (
            person_id
        ) IN (
            select
                person_id 
            from
                HT_JPerson
        )
14:19:21,901 DEBUG SQL:104 - 
    delete 
    from
        JEmployee 
    where
        (
            person_id
        ) IN (
            select
                person_id 
            from
                HT_JPerson
        )
14:19:21,901 DEBUG SQL:104 - 
    delete 
    from
        JPerson 
    where
        (
            person_id
        ) IN (
            select
                person_id 
            from
                HT_JPerson
        )
14:19:21,910 DEBUG SQL:104 - 
    delete 
    from
        HT_JPerson
14:19:21,911  INFO SchemaExport:343 - HHH000227: Running hbm2ddl schema export
14:19:21,911 DEBUG SchemaExport:353 - Import file not found: /import.sql
14:19:21,912 DEBUG SQL:104 - 
    alter table JCustomer 
        drop constraint FK3C3FA48A3A05842
14:19:21,912 DEBUG SQL:104 - 
    alter table JCustomer 
        drop constraint FK3C3FA48D01561E9
14:19:21,912 DEBUG SQL:104 - 
    alter table JEmployee 
        drop constraint FK26C56118A3A05842
14:19:21,912 DEBUG SQL:104 - 
    alter table JEmployee 
        drop constraint FK26C5611842E7F3F8
14:19:21,912 DEBUG SQL:104 - 
    drop table JCustomer if exists
14:19:21,913 DEBUG SQL:104 - 
    drop table JEmployee if exists
14:19:21,913 DEBUG SQL:104 - 
    drop table JPerson if exists
14:19:21,914  INFO SchemaExport:405 - HHH000230: Schema export complete
14:19:21,920  INFO DriverManagerConnectionProviderImpl:162 - HHH000030: Cleaning up connection pool [jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE]
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
