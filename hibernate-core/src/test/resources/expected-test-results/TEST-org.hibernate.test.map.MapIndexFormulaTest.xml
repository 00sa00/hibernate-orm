<?xml version="1.0" encoding="UTF-8"?>
<testsuite errors="0" failures="0" hostname="dhcp-10.15.208.168.stl.redhat.com" name="org.hibernate.test.map.MapIndexFormulaTest" tests="3" time="0.461" timestamp="2013-02-28T20:17:28">
  <properties />
  <testcase classname="org.hibernate.test.map.MapIndexFormulaTest" name="testIndexFormulaMap" time="0.036" />
  <testcase classname="org.hibernate.test.map.MapIndexFormulaTest" name="testIndexFunctionOnManyToManyMap" time="0.173" />
  <testcase classname="org.hibernate.test.map.MapIndexFormulaTest" name="testSQLQuery" time="0.081" />
  <system-out><![CDATA[14:17:28,335  INFO CustomRunner:132 - BeforeClass: org.hibernate.test.map.MapIndexFormulaTest
14:17:28,338  INFO Configuration:706 - HHH000221: Reading mappings from resource: org/hibernate/test/map/UserGroup.hbm.xml
14:17:28,376  INFO DriverManagerConnectionProviderImpl:99 - HHH000402: Using Hibernate built-in connection pool (not for production use!)
14:17:28,377  INFO DriverManagerConnectionProviderImpl:135 - HHH000115: Hibernate connection pool size: 5
14:17:28,377  INFO DriverManagerConnectionProviderImpl:138 - HHH000006: Autocommit mode: false
14:17:28,377  INFO DriverManagerConnectionProviderImpl:153 - HHH000401: using driver [org.h2.Driver] at URL [jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE]
14:17:28,377  INFO DriverManagerConnectionProviderImpl:158 - HHH000046: Connection properties: {user=sa}
14:17:28,378  INFO Dialect:103 - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
14:17:28,379  INFO LobCreatorBuilder:94 - HHH000423: Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
14:17:28,379  INFO TransactionFactoryInitiator:66 - HHH000399: Using default transaction strategy (direct JDBC transactions)
14:17:28,379  INFO ASTQueryTranslatorFactory:48 - HHH000397: Using ASTQueryTranslatorFactory
14:17:28,380  WARN CachingRegionFactory:58 - CachingRegionFactory should be only used for testing.
14:17:28,409  INFO SchemaExport:343 - HHH000227: Running hbm2ddl schema export
14:17:28,409 DEBUG SchemaExport:353 - Import file not found: /import.sql
14:17:28,410 DEBUG SQL:104 - 
    alter table group_user 
        drop constraint FK4C71E58BCAACCD3
14:17:28,410 ERROR SchemaExport:425 - HHH000389: Unsuccessful: alter table group_user drop constraint FK4C71E58BCAACCD3
14:17:28,410 ERROR SchemaExport:426 - Table "GROUP_USER" not found; SQL statement:

    alter table group_user 
        drop constraint FK4C71E58BCAACCD3 [42102-145]
14:17:28,410 DEBUG SQL:104 - 
    alter table group_user 
        drop constraint FK4C71E58B48234761
14:17:28,410 ERROR SchemaExport:425 - HHH000389: Unsuccessful: alter table group_user drop constraint FK4C71E58B48234761
14:17:28,410 ERROR SchemaExport:426 - Table "GROUP_USER" not found; SQL statement:

    alter table group_user 
        drop constraint FK4C71E58B48234761 [42102-145]
14:17:28,410 DEBUG SQL:104 - 
    alter table session_attributes 
        drop constraint FK88CD22A0D454F249
14:17:28,411 ERROR SchemaExport:425 - HHH000389: Unsuccessful: alter table session_attributes drop constraint FK88CD22A0D454F249
14:17:28,411 ERROR SchemaExport:426 - Table "SESSION_ATTRIBUTES" not found; SQL statement:

    alter table session_attributes 
        drop constraint FK88CD22A0D454F249 [42102-145]
14:17:28,411 DEBUG SQL:104 - 
    drop table group_user if exists
14:17:28,411 DEBUG SQL:104 - 
    drop table groups if exists
14:17:28,411 DEBUG SQL:104 - 
    drop table session_attributes if exists
14:17:28,411 DEBUG SQL:104 - 
    drop table users if exists
14:17:28,411 DEBUG SQL:104 - 
    create table group_user (
        groupName varchar(255) not null,
        personName varchar(255) not null,
        primary key (groupName, personName)
    )
14:17:28,412 DEBUG SQL:104 - 
    create table groups (
        name varchar(255) not null,
        primary key (name)
    )
14:17:28,412 DEBUG SQL:104 - 
    create table session_attributes (
        id bigint generated by default as identity,
        name varchar(255) not null,
        stringData varchar(255),
        objectData binary(255),
        userName varchar(255) not null,
        primary key (id)
    )
14:17:28,412 DEBUG SQL:104 - 
    create table users (
        name varchar(255) not null,
        password varchar(255),
        primary key (name)
    )
14:17:28,413 DEBUG SQL:104 - 
    alter table group_user 
        add constraint FK4C71E58BCAACCD3 
        foreign key (personName) 
        references users
14:17:28,413 DEBUG SQL:104 - 
    alter table group_user 
        add constraint FK4C71E58B48234761 
        foreign key (groupName) 
        references groups
14:17:28,413 DEBUG SQL:104 - 
    alter table session_attributes 
        add constraint FK88CD22A0D454F249 
        foreign key (userName) 
        references users
14:17:28,414  INFO SchemaExport:405 - HHH000230: Schema export complete
14:17:28,414  WARN SessionFactoryImpl:1554 - HHH000008: JTASessionContext being used with JDBCTransactionFactory; auto-flush will not operate correctly with getCurrentSession()
14:17:28,425  INFO CustomRunner:139 - Test: testIndexFormulaMap
14:17:28,427 DEBUG SQL:104 - 
    insert 
    into
        groups
        (name) 
    values
        (?)
14:17:28,428 DEBUG SQL:104 - 
    insert 
    into
        users
        (password, name) 
    values
        (?, ?)
14:17:28,428 DEBUG SQL:104 - 
    insert 
    into
        users
        (password, name) 
    values
        (?, ?)
14:17:28,428 DEBUG SQL:104 - 
    insert 
    into
        session_attributes
        (id, name, stringData, objectData, userName) 
    values
        (null, ?, ?, ?, ?)
14:17:28,429 DEBUG SQL:104 - 
    insert 
    into
        session_attributes
        (id, name, stringData, objectData, userName) 
    values
        (null, ?, ?, ?, ?)
14:17:28,429 DEBUG SQL:104 - 
    insert 
    into
        group_user
        (groupName, personName) 
    values
        (?, ?)
14:17:28,429 DEBUG SQL:104 - 
    insert 
    into
        group_user
        (groupName, personName) 
    values
        (?, ?)
14:17:28,430 DEBUG SQL:104 - 
    update
        session_attributes 
    set
        userName=? 
    where
        id=?
14:17:28,430 DEBUG SQL:104 - 
    update
        session_attributes 
    set
        userName=? 
    where
        id=?
14:17:28,430 DEBUG SQL:104 - 
    select
        group0_.name as name1_0_ 
    from
        groups group0_ 
    where
        group0_.name=?
14:17:28,431 DEBUG SQL:104 - 
    select
        users0_.groupName as groupName1_1_,
        users0_.personName as personName0_1_,
        lower(users0_.personName) as formula96_1_,
        user1_.name as name3_0_,
        user1_.password as password3_0_ 
    from
        group_user users0_ 
    inner join
        users user1_ 
            on users0_.personName=user1_.name 
    where
        users0_.groupName=?
14:17:28,431 DEBUG SQL:104 - 
    select
        session0_.userName as userName3_1_,
        session0_.id as id2_1_,
        lower(session0_.name) as formula97_1_,
        session0_.id as id2_0_,
        session0_.name as name2_0_,
        session0_.stringData as stringData2_0_,
        session0_.objectData as objectData2_0_ 
    from
        session_attributes session0_ 
    where
        session0_.userName=?
14:17:28,432 DEBUG SQL:104 - 
    delete 
    from
        group_user 
    where
        groupName=? 
        and personName=?
14:17:28,433 DEBUG SQL:104 - 
    delete 
    from
        session_attributes 
    where
        id=?
14:17:28,433 DEBUG SQL:104 - 
    select
        group0_.name as name1_0_ 
    from
        groups group0_ 
    where
        group0_.name=?
14:17:28,436 DEBUG SQL:104 - 
    select
        users0_.groupName as groupName1_1_,
        users0_.personName as personName0_1_,
        lower(users0_.personName) as formula96_1_,
        user1_.name as name3_0_,
        user1_.password as password3_0_ 
    from
        group_user users0_ 
    inner join
        users user1_ 
            on users0_.personName=user1_.name 
    where
        users0_.groupName=?
14:17:28,437 DEBUG SQL:104 - 
    select
        session0_.userName as userName3_1_,
        session0_.id as id2_1_,
        lower(session0_.name) as formula97_1_,
        session0_.id as id2_0_,
        session0_.name as name2_0_,
        session0_.stringData as stringData2_0_,
        session0_.objectData as objectData2_0_ 
    from
        session_attributes session0_ 
    where
        session0_.userName=?
14:17:28,438 DEBUG QueryTranslatorImpl:265 - parse() - HQL: select count(*) from org.hibernate.test.map.SessionAttribute
14:17:28,439 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     \-[DOT] Node: '.'
       |        +-[DOT] Node: '.'
       |        |  +-[DOT] Node: '.'
       |        |  |  +-[DOT] Node: '.'
       |        |  |  |  +-[IDENT] Node: 'org'
       |        |  |  |  \-[IDENT] Node: 'hibernate'
       |        |  |  \-[IDENT] Node: 'test'
       |        |  \-[IDENT] Node: 'map'
       |        \-[IDENT] Node: 'SessionAttribute'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[ROW_STAR] Node: '*'

14:17:28,439 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,439 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.map.SessionAttribute (<no alias>) -> sessionatt0_
14:17:28,439 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} session_attributes sessionatt0_ ) )
14:17:28,439 DEBUG JoinProcessor:175 - Using FROM fragment [session_attributes sessionatt0_]
14:17:28,440 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (session_attributes)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[sessionatt0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'session_attributes sessionatt0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=session_attributes,tableAlias=sessionatt0_,origin=null,columns={,className=org.hibernate.test.map.SessionAttribute}}

14:17:28,440 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,440 DEBUG QueryTranslatorImpl:235 - HQL: select count(*) from org.hibernate.test.map.SessionAttribute
14:17:28,440 DEBUG QueryTranslatorImpl:236 - SQL: select count(*) as col_0_0_ from session_attributes sessionatt0_
14:17:28,440 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,440 DEBUG SQL:104 - 
    update
        group_user 
    set
        personName=? 
    where
        groupName=? 
        and personName=?
14:17:28,441 DEBUG SQL:104 - 
    delete 
    from
        session_attributes 
    where
        id=?
14:17:28,441 DEBUG SQL:104 - 
    delete 
    from
        users 
    where
        name=?
14:17:28,441 DEBUG SQL:104 - 
    select
        count(*) as col_0_0_ 
    from
        session_attributes sessionatt0_
14:17:28,442 DEBUG SQL:104 - 
    select
        group0_.name as name1_0_ 
    from
        groups group0_ 
    where
        group0_.name=?
14:17:28,442 DEBUG SQL:104 - 
    select
        users0_.groupName as groupName1_1_,
        users0_.personName as personName0_1_,
        lower(users0_.personName) as formula96_1_,
        user1_.name as name3_0_,
        user1_.password as password3_0_ 
    from
        group_user users0_ 
    inner join
        users user1_ 
            on users0_.personName=user1_.name 
    where
        users0_.groupName=?
14:17:28,443 DEBUG SQL:104 - 
    select
        session0_.userName as userName3_1_,
        session0_.id as id2_1_,
        lower(session0_.name) as formula97_1_,
        session0_.id as id2_0_,
        session0_.name as name2_0_,
        session0_.stringData as stringData2_0_,
        session0_.objectData as objectData2_0_ 
    from
        session_attributes session0_ 
    where
        session0_.userName=?
14:17:28,444 DEBUG QueryTranslatorImpl:265 - parse() - HQL: select count(*) from org.hibernate.test.map.User
14:17:28,444 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     \-[DOT] Node: '.'
       |        +-[DOT] Node: '.'
       |        |  +-[DOT] Node: '.'
       |        |  |  +-[DOT] Node: '.'
       |        |  |  |  +-[IDENT] Node: 'org'
       |        |  |  |  \-[IDENT] Node: 'hibernate'
       |        |  |  \-[IDENT] Node: 'test'
       |        |  \-[IDENT] Node: 'map'
       |        \-[IDENT] Node: 'User'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[ROW_STAR] Node: '*'

14:17:28,444 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,445 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.map.User (<no alias>) -> user0_
14:17:28,445 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} users user0_ ) )
14:17:28,445 DEBUG JoinProcessor:175 - Using FROM fragment [users user0_]
14:17:28,445 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (users)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'users user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=users,tableAlias=user0_,origin=null,columns={,className=org.hibernate.test.map.User}}

14:17:28,445 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,445 DEBUG QueryTranslatorImpl:235 - HQL: select count(*) from org.hibernate.test.map.User
14:17:28,445 DEBUG QueryTranslatorImpl:236 - SQL: select count(*) as col_0_0_ from users user0_
14:17:28,445 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,446 DEBUG SQL:104 - 
    select
        count(*) as col_0_0_ 
    from
        users user0_
14:17:28,461 DEBUG SQL:104 - 
    delete 
    from
        group_user 
    where
        groupName=?
14:17:28,461 DEBUG SQL:104 - 
    delete 
    from
        groups 
    where
        name=?
14:17:28,461 DEBUG SQL:104 - 
    delete 
    from
        users 
    where
        name=?
14:17:28,462 DEBUG SQL:104 - 
    select
        count(*) as col_0_0_ 
    from
        users user0_
14:17:28,462  INFO CustomRunner:139 - Test: testIndexFunctionOnManyToManyMap
14:17:28,463 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.map.Group g join g.users u where g.name = 'something' and index(u) = 'nada'
14:17:28,463 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Group",<108> previously: <24>,line=1,col=29,possibleID=true]
14:17:28,464 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  |  \-[IDENT] Node: 'test'
    |     |  |  |  \-[IDENT] Node: 'map'
    |     |  |  \-[IDENT] Node: 'Group'
    |     |  \-[ALIAS] Node: 'g'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'g'
    |        |  \-[IDENT] Node: 'users'
    |        \-[ALIAS] Node: 'u'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'g'
          |  |  \-[IDENT] Node: 'name'
          |  \-[QUOTED_STRING] Node: ''something''
          \-[EQ] Node: '='
             +-[METHOD_CALL] Node: '('
             |  +-[IDENT] Node: 'index'
             |  \-[EXPR_LIST] Node: 'exprList'
             |     \-[IDENT] Node: 'u'
             \-[QUOTED_STRING] Node: ''nada''

14:17:28,492 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,492 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.map.Group (g) -> group0_
14:17:28,492 DEBUG FromReferenceNode:74 - Resolved : g -> group0_.name
14:17:28,493 DEBUG DotNode:599 - getDataType() : users -> org.hibernate.type.MapType(org.hibernate.test.map.Group.users)
14:17:28,493 DEBUG FromElementFactory:385 - createManyToMany() : path = g.users role = org.hibernate.test.map.Group.users associatedEntityName = org.hibernate.test.map.User
14:17:28,493 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.map.User (u) -> user2_
14:17:28,493 DEBUG FromClause:282 - addJoinByPathMap() : g.users -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=users,tableAlias=user2_,origin=groups group0_,columns={group0_.name ,className=org.hibernate.test.map.User}}
14:17:28,493 DEBUG DotNode:308 - dereferenceCollection() : Created new FROM element for g.users : group_user user2_
14:17:28,493 DEBUG FromReferenceNode:74 - Resolved : g.users -> .
14:17:28,494 DEBUG HqlSqlWalker:403 - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'group_user user2_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=org.hibernate.test.map.Group.users,tableName=users,tableAlias=user2_,origin=groups group0_,columns={group0_.name ,className=org.hibernate.test.map.User}}

14:17:28,523 DEBUG FromReferenceNode:74 - Resolved : g -> group0_.name
14:17:28,524 DEBUG DotNode:599 - getDataType() : name -> org.hibernate.type.StringType@2dc8de40
14:17:28,524 DEBUG FromReferenceNode:74 - Resolved : g.name -> group0_.name
14:17:28,524 DEBUG FromReferenceNode:74 - Resolved : u -> user2_.name
14:17:28,525 DEBUG MethodNode:151 - collectionProperty() :  name=index type=org.hibernate.type.ManyToOneType(org.hibernate.test.map.User)
14:17:28,525 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} ( groups group0_  ) ) ( where ( and ( = ( group0_.name group0_.name name ) 'something' ) ( = ( lower(users1_.personName) index ( exprList user2_.name ) ) 'nada' ) ) ) )
14:17:28,525 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:17:28,526 DEBUG JoinProcessor:175 - Using FROM fragment [groups group0_]
14:17:28,526 DEBUG JoinProcessor:175 - Using FROM fragment [inner join group_user users1_ on group0_.name=users1_.groupName inner join users user2_ on users1_.personName=user2_.name]
14:17:28,527 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (users,group_user,groups)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'group0_.name as name1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=g,role=null,tableName=groups,tableAlias=group0_,origin=null,columns={,className=org.hibernate.test.map.Group}}}
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user2_.name as name3_1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=org.hibernate.test.map.Group.users,tableName=users,tableAlias=user2_,origin=groups group0_,columns={group0_.name ,className=org.hibernate.test.map.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user2_.password as password3_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[g, u], fromElementByTableAlias=[user2_, group0_], fromElementsByPath=[g.users], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'groups group0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=g,role=null,tableName=groups,tableAlias=group0_,origin=null,columns={,className=org.hibernate.test.map.Group}}
    |     \-[JOIN_FRAGMENT] FromElement: 'inner join group_user users1_ on group0_.name=users1_.groupName inner join users user2_ on users1_.personName=user2_.name' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=org.hibernate.test.map.Group.users,tableName=users,tableAlias=user2_,origin=groups group0_,columns={group0_.name ,className=org.hibernate.test.map.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'group0_.name' {propertyName=name,dereferenceType=ALL,propertyPath=name,path=g.name,tableAlias=group0_,className=org.hibernate.test.map.Group,classAlias=g}
          |  |  +-[ALIAS_REF] IdentNode: 'group0_.name' {alias=g, className=org.hibernate.test.map.Group, tableAlias=group0_}
          |  |  \-[IDENT] IdentNode: 'name' {originalText=name}
          |  \-[QUOTED_STRING] LiteralNode: ''something''
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[SQL_TOKEN] MethodNode: 'lower(users1_.personName)'
             |  +-[METHOD_NAME] IdentNode: 'index' {originalText=index}
             |  \-[EXPR_LIST] SqlNode: 'exprList'
             |     \-[ALIAS_REF] IdentNode: 'user2_.name' {alias=u, className=org.hibernate.test.map.User, tableAlias=user2_}
             \-[QUOTED_STRING] LiteralNode: ''nada''

14:17:28,536 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,537 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.map.Group g join g.users u where g.name = 'something' and index(u) = 'nada'
14:17:28,537 DEBUG QueryTranslatorImpl:236 - SQL: select group0_.name as name1_0_, user2_.name as name3_1_, user2_.password as password3_1_ from groups group0_ inner join group_user users1_ on group0_.name=users1_.groupName inner join users user2_ on users1_.personName=user2_.name where group0_.name='something' and lower(users1_.personName)='nada'
14:17:28,537 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,537 DEBUG SQL:104 - 
    select
        group0_.name as name1_0_,
        user2_.name as name3_1_,
        user2_.password as password3_1_ 
    from
        groups group0_ 
    inner join
        group_user users1_ 
            on group0_.name=users1_.groupName 
    inner join
        users user2_ 
            on users1_.personName=user2_.name 
    where
        group0_.name='something' 
        and lower(users1_.personName)='nada'
14:17:28,538 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.map.Group g join g.users u where g.name = 'something' and minindex(u) = 'nada'
14:17:28,538 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Group",<108> previously: <24>,line=1,col=29,possibleID=true]
14:17:28,539 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  |  \-[IDENT] Node: 'test'
    |     |  |  |  \-[IDENT] Node: 'map'
    |     |  |  \-[IDENT] Node: 'Group'
    |     |  \-[ALIAS] Node: 'g'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'g'
    |        |  \-[IDENT] Node: 'users'
    |        \-[ALIAS] Node: 'u'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'g'
          |  |  \-[IDENT] Node: 'name'
          |  \-[QUOTED_STRING] Node: ''something''
          \-[EQ] Node: '='
             +-[METHOD_CALL] Node: '('
             |  +-[IDENT] Node: 'minindex'
             |  \-[EXPR_LIST] Node: 'exprList'
             |     \-[IDENT] Node: 'u'
             \-[QUOTED_STRING] Node: ''nada''

14:17:28,552 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,552 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.map.Group (g) -> group0_
14:17:28,560 DEBUG FromReferenceNode:74 - Resolved : g -> group0_.name
14:17:28,561 DEBUG DotNode:599 - getDataType() : users -> org.hibernate.type.MapType(org.hibernate.test.map.Group.users)
14:17:28,563 DEBUG FromElementFactory:385 - createManyToMany() : path = g.users role = org.hibernate.test.map.Group.users associatedEntityName = org.hibernate.test.map.User
14:17:28,563 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.map.User (u) -> user2_
14:17:28,563 DEBUG FromClause:282 - addJoinByPathMap() : g.users -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=users,tableAlias=user2_,origin=groups group0_,columns={group0_.name ,className=org.hibernate.test.map.User}}
14:17:28,563 DEBUG DotNode:308 - dereferenceCollection() : Created new FROM element for g.users : group_user user2_
14:17:28,563 DEBUG FromReferenceNode:74 - Resolved : g.users -> .
14:17:28,563 DEBUG HqlSqlWalker:403 - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'group_user user2_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=org.hibernate.test.map.Group.users,tableName=users,tableAlias=user2_,origin=groups group0_,columns={group0_.name ,className=org.hibernate.test.map.User}}

14:17:28,563 DEBUG FromReferenceNode:74 - Resolved : g -> group0_.name
14:17:28,563 DEBUG DotNode:599 - getDataType() : name -> org.hibernate.type.StringType@2dc8de40
14:17:28,564 DEBUG FromReferenceNode:74 - Resolved : g.name -> group0_.name
14:17:28,564 DEBUG FromReferenceNode:74 - Resolved : u -> user2_.name
14:17:28,564 DEBUG MethodNode:151 - collectionProperty() :  name=minindex type=org.hibernate.type.ManyToOneType(org.hibernate.test.map.User)
14:17:28,564 DEBUG FromElementType:347 - toColumns(user2_,minIndex) : subquery = select min(lower(users1_.personName)) from group_user users1_, users user2_ where group0_.name=users1_.groupName and users1_.personName=user2_.name
14:17:28,564 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} ( groups group0_  ) ) ( where ( and ( = ( group0_.name group0_.name name ) 'something' ) ( = ( (select min(lower(users1_.personName)) from group_user users1_, users user2_ where group0_.name=users1_.groupName and users1_.personName=user2_.name) minindex ( exprList user2_.name ) ) 'nada' ) ) ) )
14:17:28,564 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:17:28,565 DEBUG JoinProcessor:175 - Using FROM fragment [groups group0_]
14:17:28,565 DEBUG JoinProcessor:175 - Using FROM fragment [inner join group_user users1_ on group0_.name=users1_.groupName inner join users user2_ on users1_.personName=user2_.name]
14:17:28,566 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (users,group_user,groups)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'group0_.name as name1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=g,role=null,tableName=groups,tableAlias=group0_,origin=null,columns={,className=org.hibernate.test.map.Group}}}
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user2_.name as name3_1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=org.hibernate.test.map.Group.users,tableName=users,tableAlias=user2_,origin=groups group0_,columns={group0_.name ,className=org.hibernate.test.map.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user2_.password as password3_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[g, u], fromElementByTableAlias=[user2_, group0_], fromElementsByPath=[g.users], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'groups group0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=g,role=null,tableName=groups,tableAlias=group0_,origin=null,columns={,className=org.hibernate.test.map.Group}}
    |     \-[JOIN_FRAGMENT] FromElement: 'inner join group_user users1_ on group0_.name=users1_.groupName inner join users user2_ on users1_.personName=user2_.name' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=org.hibernate.test.map.Group.users,tableName=users,tableAlias=user2_,origin=groups group0_,columns={group0_.name ,className=org.hibernate.test.map.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'group0_.name' {propertyName=name,dereferenceType=ALL,propertyPath=name,path=g.name,tableAlias=group0_,className=org.hibernate.test.map.Group,classAlias=g}
          |  |  +-[ALIAS_REF] IdentNode: 'group0_.name' {alias=g, className=org.hibernate.test.map.Group, tableAlias=group0_}
          |  |  \-[IDENT] IdentNode: 'name' {originalText=name}
          |  \-[QUOTED_STRING] LiteralNode: ''something''
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[SQL_TOKEN] MethodNode: '(select min(lower(users1_.personName)) from group_user users1_, users user2_ where group0_.name=users1_.groupName and users1_.personName=user2_.name)'
             |  +-[METHOD_NAME] IdentNode: 'minindex' {originalText=minindex}
             |  \-[EXPR_LIST] SqlNode: 'exprList'
             |     \-[ALIAS_REF] IdentNode: 'user2_.name' {alias=u, className=org.hibernate.test.map.User, tableAlias=user2_}
             \-[QUOTED_STRING] LiteralNode: ''nada''

14:17:28,577 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,577 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.map.Group g join g.users u where g.name = 'something' and minindex(u) = 'nada'
14:17:28,577 DEBUG QueryTranslatorImpl:236 - SQL: select group0_.name as name1_0_, user2_.name as name3_1_, user2_.password as password3_1_ from groups group0_ inner join group_user users1_ on group0_.name=users1_.groupName inner join users user2_ on users1_.personName=user2_.name where group0_.name='something' and (select min(lower(users1_.personName)) from group_user users1_, users user2_ where group0_.name=users1_.groupName and users1_.personName=user2_.name)='nada'
14:17:28,577 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,577 DEBUG SQL:104 - 
    select
        group0_.name as name1_0_,
        user2_.name as name3_1_,
        user2_.password as password3_1_ 
    from
        groups group0_ 
    inner join
        group_user users1_ 
            on group0_.name=users1_.groupName 
    inner join
        users user2_ 
            on users1_.personName=user2_.name 
    where
        group0_.name='something' 
        and (
            select
                min(lower(users1_.personName)) 
            from
                group_user users1_,
                users user2_ 
            where
                group0_.name=users1_.groupName 
                and users1_.personName=user2_.name
        )='nada'
14:17:28,579 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.map.Group g join g.users u where g.name = 'something' and maxindex(u) = 'nada'
14:17:28,579 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Group",<108> previously: <24>,line=1,col=29,possibleID=true]
14:17:28,581 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  |  \-[IDENT] Node: 'test'
    |     |  |  |  \-[IDENT] Node: 'map'
    |     |  |  \-[IDENT] Node: 'Group'
    |     |  \-[ALIAS] Node: 'g'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'g'
    |        |  \-[IDENT] Node: 'users'
    |        \-[ALIAS] Node: 'u'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'g'
          |  |  \-[IDENT] Node: 'name'
          |  \-[QUOTED_STRING] Node: ''something''
          \-[EQ] Node: '='
             +-[METHOD_CALL] Node: '('
             |  +-[IDENT] Node: 'maxindex'
             |  \-[EXPR_LIST] Node: 'exprList'
             |     \-[IDENT] Node: 'u'
             \-[QUOTED_STRING] Node: ''nada''

14:17:28,592 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,592 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.map.Group (g) -> group0_
14:17:28,592 DEBUG FromReferenceNode:74 - Resolved : g -> group0_.name
14:17:28,592 DEBUG DotNode:599 - getDataType() : users -> org.hibernate.type.MapType(org.hibernate.test.map.Group.users)
14:17:28,593 DEBUG FromElementFactory:385 - createManyToMany() : path = g.users role = org.hibernate.test.map.Group.users associatedEntityName = org.hibernate.test.map.User
14:17:28,593 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.map.User (u) -> user2_
14:17:28,593 DEBUG FromClause:282 - addJoinByPathMap() : g.users -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=users,tableAlias=user2_,origin=groups group0_,columns={group0_.name ,className=org.hibernate.test.map.User}}
14:17:28,593 DEBUG DotNode:308 - dereferenceCollection() : Created new FROM element for g.users : group_user user2_
14:17:28,593 DEBUG FromReferenceNode:74 - Resolved : g.users -> .
14:17:28,593 DEBUG HqlSqlWalker:403 - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'group_user user2_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=org.hibernate.test.map.Group.users,tableName=users,tableAlias=user2_,origin=groups group0_,columns={group0_.name ,className=org.hibernate.test.map.User}}

14:17:28,593 DEBUG FromReferenceNode:74 - Resolved : g -> group0_.name
14:17:28,593 DEBUG DotNode:599 - getDataType() : name -> org.hibernate.type.StringType@2dc8de40
14:17:28,594 DEBUG FromReferenceNode:74 - Resolved : g.name -> group0_.name
14:17:28,594 DEBUG FromReferenceNode:74 - Resolved : u -> user2_.name
14:17:28,594 DEBUG MethodNode:151 - collectionProperty() :  name=maxindex type=org.hibernate.type.ManyToOneType(org.hibernate.test.map.User)
14:17:28,594 DEBUG FromElementType:347 - toColumns(user2_,maxIndex) : subquery = select max(lower(users1_.personName)) from group_user users1_, users user2_ where group0_.name=users1_.groupName and users1_.personName=user2_.name
14:17:28,594 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} ( groups group0_  ) ) ( where ( and ( = ( group0_.name group0_.name name ) 'something' ) ( = ( (select max(lower(users1_.personName)) from group_user users1_, users user2_ where group0_.name=users1_.groupName and users1_.personName=user2_.name) maxindex ( exprList user2_.name ) ) 'nada' ) ) ) )
14:17:28,594 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:17:28,594 DEBUG JoinProcessor:175 - Using FROM fragment [groups group0_]
14:17:28,595 DEBUG JoinProcessor:175 - Using FROM fragment [inner join group_user users1_ on group0_.name=users1_.groupName inner join users user2_ on users1_.personName=user2_.name]
14:17:28,595 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (users,group_user,groups)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'group0_.name as name1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=g,role=null,tableName=groups,tableAlias=group0_,origin=null,columns={,className=org.hibernate.test.map.Group}}}
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'user2_.name as name3_1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=org.hibernate.test.map.Group.users,tableName=users,tableAlias=user2_,origin=groups group0_,columns={group0_.name ,className=org.hibernate.test.map.User}}}
    |  \-[SQL_TOKEN] SqlFragment: 'user2_.password as password3_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[g, u], fromElementByTableAlias=[user2_, group0_], fromElementsByPath=[g.users], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'groups group0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=g,role=null,tableName=groups,tableAlias=group0_,origin=null,columns={,className=org.hibernate.test.map.Group}}
    |     \-[JOIN_FRAGMENT] FromElement: 'inner join group_user users1_ on group0_.name=users1_.groupName inner join users user2_ on users1_.personName=user2_.name' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=org.hibernate.test.map.Group.users,tableName=users,tableAlias=user2_,origin=groups group0_,columns={group0_.name ,className=org.hibernate.test.map.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'group0_.name' {propertyName=name,dereferenceType=ALL,propertyPath=name,path=g.name,tableAlias=group0_,className=org.hibernate.test.map.Group,classAlias=g}
          |  |  +-[ALIAS_REF] IdentNode: 'group0_.name' {alias=g, className=org.hibernate.test.map.Group, tableAlias=group0_}
          |  |  \-[IDENT] IdentNode: 'name' {originalText=name}
          |  \-[QUOTED_STRING] LiteralNode: ''something''
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[SQL_TOKEN] MethodNode: '(select max(lower(users1_.personName)) from group_user users1_, users user2_ where group0_.name=users1_.groupName and users1_.personName=user2_.name)'
             |  +-[METHOD_NAME] IdentNode: 'maxindex' {originalText=maxindex}
             |  \-[EXPR_LIST] SqlNode: 'exprList'
             |     \-[ALIAS_REF] IdentNode: 'user2_.name' {alias=u, className=org.hibernate.test.map.User, tableAlias=user2_}
             \-[QUOTED_STRING] LiteralNode: ''nada''

14:17:28,616 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,616 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.map.Group g join g.users u where g.name = 'something' and maxindex(u) = 'nada'
14:17:28,617 DEBUG QueryTranslatorImpl:236 - SQL: select group0_.name as name1_0_, user2_.name as name3_1_, user2_.password as password3_1_ from groups group0_ inner join group_user users1_ on group0_.name=users1_.groupName inner join users user2_ on users1_.personName=user2_.name where group0_.name='something' and (select max(lower(users1_.personName)) from group_user users1_, users user2_ where group0_.name=users1_.groupName and users1_.personName=user2_.name)='nada'
14:17:28,617 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,617 DEBUG SQL:104 - 
    select
        group0_.name as name1_0_,
        user2_.name as name3_1_,
        user2_.password as password3_1_ 
    from
        groups group0_ 
    inner join
        group_user users1_ 
            on group0_.name=users1_.groupName 
    inner join
        users user2_ 
            on users1_.personName=user2_.name 
    where
        group0_.name='something' 
        and (
            select
                max(lower(users1_.personName)) 
            from
                group_user users1_,
                users user2_ 
            where
                group0_.name=users1_.groupName 
                and users1_.personName=user2_.name
        )='nada'
14:17:28,636  INFO CustomRunner:139 - Test: testSQLQuery
14:17:28,638 DEBUG SQL:104 - 
    insert 
    into
        users
        (password, name) 
    values
        (?, ?)
14:17:28,638 DEBUG SQL:104 - 
    insert 
    into
        session_attributes
        (id, name, stringData, objectData, userName) 
    values
        (null, ?, ?, ?, ?)
14:17:28,656 DEBUG SQL:104 - 
    insert 
    into
        session_attributes
        (id, name, stringData, objectData, userName) 
    values
        (null, ?, ?, ?, ?)
14:17:28,656 DEBUG SQL:104 - 
    insert 
    into
        users
        (password, name) 
    values
        (?, ?)
14:17:28,657 DEBUG SQL:104 - 
    update
        session_attributes 
    set
        userName=? 
    where
        id=?
14:17:28,657 DEBUG SQL:104 - 
    update
        session_attributes 
    set
        userName=? 
    where
        id=?
14:17:28,657 DEBUG SQL:104 - 
    select
        lower(u.name) as name3_0_,
        lower(u.password) as password3_0_,
        lower(s.userName) as userName3_0__,
        lower(s.name) as formula97_0__,
        s.id as id2_0__,
        s.id as id2_1_,
        s.name as name2_1_,
        s.stringData as stringData2_1_,
        s.objectData as objectData2_1_   
    from
        users u    
    join
        session_attributes s 
            on lower(s.userName) = lower(u.name)   
    where
        u.name like ?
14:17:28,703 DEBUG QueryTranslatorImpl:265 - parse() - HQL: delete org.hibernate.test.map.SessionAttribute
14:17:28,704 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[DELETE] Node: 'delete'
    \-[FROM] Node: 'FROM'
       \-[RANGE] Node: 'RANGE'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'map'
             \-[IDENT] Node: 'SessionAttribute'

14:17:28,704 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,704 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.map.SessionAttribute (<no alias>) -> sessionatt0_
14:17:28,704 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[DELETE] DeleteStatement: 'delete'  querySpaces (session_attributes)
    \-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[sessionatt0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'session_attributes' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=session_attributes,tableAlias=sessionatt0_,origin=null,columns={,className=org.hibernate.test.map.SessionAttribute}}

14:17:28,704 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,705 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,705 DEBUG SQL:104 - 
    delete 
    from
        session_attributes
14:17:28,705 DEBUG QueryTranslatorImpl:265 - parse() - HQL: delete org.hibernate.test.map.User
14:17:28,706 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[DELETE] Node: 'delete'
    \-[FROM] Node: 'FROM'
       \-[RANGE] Node: 'RANGE'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'map'
             \-[IDENT] Node: 'User'

14:17:28,714 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,715 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.map.User (<no alias>) -> user0_
14:17:28,715 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[DELETE] DeleteStatement: 'delete'  querySpaces (users)
    \-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'users' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=users,tableAlias=user0_,origin=null,columns={,className=org.hibernate.test.map.User}}

14:17:28,715 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,716 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:17:28,716 DEBUG SQL:104 - 
    delete 
    from
        users
14:17:28,719  INFO SchemaExport:343 - HHH000227: Running hbm2ddl schema export
14:17:28,719 DEBUG SchemaExport:353 - Import file not found: /import.sql
14:17:28,719 DEBUG SQL:104 - 
    alter table group_user 
        drop constraint FK4C71E58BCAACCD3
14:17:28,720 DEBUG SQL:104 - 
    alter table group_user 
        drop constraint FK4C71E58B48234761
14:17:28,720 DEBUG SQL:104 - 
    alter table session_attributes 
        drop constraint FK88CD22A0D454F249
14:17:28,720 DEBUG SQL:104 - 
    drop table group_user if exists
14:17:28,720 DEBUG SQL:104 - 
    drop table groups if exists
14:17:28,752 DEBUG SQL:104 - 
    drop table session_attributes if exists
14:17:28,753 DEBUG SQL:104 - 
    drop table users if exists
14:17:28,754  INFO SchemaExport:405 - HHH000230: Schema export complete
14:17:28,754  INFO DriverManagerConnectionProviderImpl:162 - HHH000030: Cleaning up connection pool [jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE]
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
