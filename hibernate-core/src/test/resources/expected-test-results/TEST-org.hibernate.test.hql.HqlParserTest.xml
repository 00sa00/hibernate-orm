<?xml version="1.0" encoding="UTF-8"?>
<testsuite errors="0" failures="0" hostname="dhcp-10.15.208.168.stl.redhat.com" name="org.hibernate.test.hql.HqlParserTest" tests="50" time="10.857" timestamp="2013-02-28T20:13:24">
  <properties />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testOrderBy" time="0.001" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testWhere" time="0.002" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testWhereAsIdentifier" time="0.001" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testEjbqlKeywordsAsIdentifier" time="0.001" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testMultiByteCharacters" time="0.001" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testHHH719" time="0.0" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testHHH1107" time="0.001" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testHHH1247" time="0.001" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testHHH1780" time="0.174" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testLineAndColumnNumber" time="0.001" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testUnion" time="0.0" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testUnnamedParameter" time="0.001" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testInElements" time="0.0" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDotElements" time="0.006" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testSelectAll" time="0.0" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testNot" time="0.009" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testOtherSyntax" time="0.004" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testEjbqlExtensions" time="0.002" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testEmptyFilter" time="0.0" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testOrderByFilter" time="0.0" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testRestrictionFilter" time="0.001" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testNoFrom" time="0.002" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testHB1042" time="0.0" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testKeywordInPath" time="0.038" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testPathologicalKeywordAsIdentifier" time="0.076" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testHHH354" time="0.001" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testConstructorIn" time="0.019" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDocoExamples92" time="0.022" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDocoExamples93" time="0.044" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDocoExamples94" time="0.047" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDocoExamples95" time="0.033" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDocoExamples96" time="0.02" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDocoExamples97" time="0.087" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDocoExamples98" time="0.255" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDocoExamples99" time="0.02" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDocoExamples910" time="0.074" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDocoExamples911" time="0.02" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDocoExamples912" time="0.251" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testExamples1" time="0.002" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testArrayExpr" time="0.003" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testMultipleActualParameters" time="0.001" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testMultipleFromClasses" time="0.024" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testFromWithJoin" time="0.014" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testSelect" time="0.145" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testGroupBy" time="0.047" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testDoubleLiteral" time="0.056" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testComplexConstructor" time="0.042" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testInNotIn" time="0.02" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testOperatorPrecedence" time="0.024" />
  <testcase classname="org.hibernate.test.hql.HqlParserTest" name="testUnitTestHql" time="8.871" />
  <system-out><![CDATA[input: ->FROM eg.mypackage.Cat qat order by avg(qat.toes)<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( order ( avg ( . qat toes ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'FROM'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'eg'
    |        |  |  \-[IDENT] Node: 'mypackage'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'qat'
    \-[ORDER] Node: 'order'
       \-[AGGREGATE] Node: 'avg'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'qat'
             \-[IDENT] Node: 'toes'

input: ->from Animal an order by sqrt(an.bodyWeight)/2<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ) ( order ( / ( ( sqrt ( exprList ( . an bodyWeight ) ) ) 2 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Animal'
    |        \-[ALIAS] Node: 'an'
    \-[ORDER] Node: 'order'
       \-[DIV] Node: '/'
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'sqrt'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[DOT] Node: '.'
          |        +-[IDENT] Node: 'an'
          |        \-[IDENT] Node: 'bodyWeight'
          \-[NUM_INT] Node: '2'

input: ->FROM eg.mypackage.Cat qat where qat.name like '%fluffy%' or qat.toes > 5<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( where ( or ( like ( . qat name ) '%fluffy%' ) ( > ( . qat toes ) 5 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'FROM'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'eg'
    |        |  |  \-[IDENT] Node: 'mypackage'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'qat'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[LIKE] Node: 'like'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'qat'
          |  |  \-[IDENT] Node: 'name'
          |  \-[QUOTED_STRING] Node: ''%fluffy%''
          \-[GT] Node: '>'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'qat'
             |  \-[IDENT] Node: 'toes'
             \-[NUM_INT] Node: '5'

input: ->FROM eg.mypackage.Cat qat where not qat.name like '%fluffy%' or qat.toes > 5<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( where ( or ( {not}like ( . qat name ) '%fluffy%' ) ( > ( . qat toes ) 5 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'FROM'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'eg'
    |        |  |  \-[IDENT] Node: 'mypackage'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'qat'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[NOT_LIKE] Node: '{not}like'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'qat'
          |  |  \-[IDENT] Node: 'name'
          |  \-[QUOTED_STRING] Node: ''%fluffy%''
          \-[GT] Node: '>'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'qat'
             |  \-[IDENT] Node: 'toes'
             \-[NUM_INT] Node: '5'

input: ->FROM eg.mypackage.Cat qat where not qat.name not like '%fluffy%'<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( where ( {not}not like ( . qat name ) '%fluffy%' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'FROM'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'eg'
    |        |  |  \-[IDENT] Node: 'mypackage'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'qat'
    \-[WHERE] Node: 'where'
       \-[LIKE] Node: '{not}not like'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'qat'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''%fluffy%''

input: ->FROM eg.mypackage.Cat qat where qat.name in ('crater','bean','fluffy')<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( where ( in ( . qat name ) ( inList 'crater' 'bean' 'fluffy' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'FROM'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'eg'
    |        |  |  \-[IDENT] Node: 'mypackage'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'qat'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'qat'
          |  \-[IDENT] Node: 'name'
          \-[IN_LIST] Node: 'inList'
             +-[QUOTED_STRING] Node: ''crater''
             +-[QUOTED_STRING] Node: ''bean''
             \-[QUOTED_STRING] Node: ''fluffy''

input: ->FROM eg.mypackage.Cat qat where qat.name not in ('crater','bean','fluffy')<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( where ( not in ( . qat name ) ( inList 'crater' 'bean' 'fluffy' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'FROM'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'eg'
    |        |  |  \-[IDENT] Node: 'mypackage'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'qat'
    \-[WHERE] Node: 'where'
       \-[NOT_IN] Node: 'not in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'qat'
          |  \-[IDENT] Node: 'name'
          \-[IN_LIST] Node: 'inList'
             +-[QUOTED_STRING] Node: ''crater''
             +-[QUOTED_STRING] Node: ''bean''
             \-[QUOTED_STRING] Node: ''fluffy''

input: ->from Animal an where sqrt(an.bodyWeight)/2 > 10<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ) ( where ( > ( / ( ( sqrt ( exprList ( . an bodyWeight ) ) ) 2 ) 10 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Animal'
    |        \-[ALIAS] Node: 'an'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DIV] Node: '/'
          |  +-[METHOD_CALL] Node: '('
          |  |  +-[IDENT] Node: 'sqrt'
          |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |     \-[DOT] Node: '.'
          |  |        +-[IDENT] Node: 'an'
          |  |        \-[IDENT] Node: 'bodyWeight'
          |  \-[NUM_INT] Node: '2'
          \-[NUM_INT] Node: '10'

input: ->from Animal an where (an.bodyWeight > 10 and an.bodyWeight < 100) or an.bodyWeight is null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ) ( where ( or ( and ( > ( . an bodyWeight ) 10 ) ( < ( . an bodyWeight ) 100 ) ) ( is null ( . an bodyWeight ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Animal'
    |        \-[ALIAS] Node: 'an'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[AND] Node: 'and'
          |  +-[GT] Node: '>'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'an'
          |  |  |  \-[IDENT] Node: 'bodyWeight'
          |  |  \-[NUM_INT] Node: '10'
          |  \-[LT] Node: '<'
          |     +-[DOT] Node: '.'
          |     |  +-[IDENT] Node: 'an'
          |     |  \-[IDENT] Node: 'bodyWeight'
          |     \-[NUM_INT] Node: '100'
          \-[IS_NULL] Node: 'is null'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'an'
                \-[IDENT] Node: 'bodyWeight'

input: ->from where.Order<-
14:13:24,486 DEBUG HqlParser:358 - weakKeywords() : new LT(1) token - ["where",<108> previously: <53>,line=1,col=6,possibleID=true]
14:13:24,487 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=12,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . where Order ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'where'
                \-[IDENT] Node: 'Order'

input: ->from org.hibernate.test.Bar bar where bar.object.id = ? and bar.object.class = ?<-
14:13:24,487 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=42,possibleID=false]
14:13:24,487 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=64,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) ( where ( and ( = ( . ( . bar object ) id ) ? ) ( = ( . ( . bar object ) class ) ? ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Bar'
    |        \-[ALIAS] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'bar'
          |  |  |  \-[IDENT] Node: 'object'
          |  |  \-[IDENT] Node: 'id'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'bar'
             |  |  \-[IDENT] Node: 'object'
             |  \-[CLASS] Node: 'class'
             \-[PARAM] Node: '?'

input: ->from User user where user.name like '%nn\u4e2dnn%'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE User user ) ) ) ( where ( like ( . user name ) '%nn中nn%' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'User'
    |        \-[ALIAS] Node: 'user'
    \-[WHERE] Node: 'where'
       \-[LIKE] Node: 'like'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''%nn\u4e2dnn%''

input: ->from User user where user.\u432d like '%\u4e2d%'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE User user ) ) ) ( where ( like ( . user 䌭 ) '%中%' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'User'
    |        \-[ALIAS] Node: 'user'
    \-[WHERE] Node: 'where'
       \-[LIKE] Node: 'like'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: '\u432d'
          \-[QUOTED_STRING] Node: ''%\u4e2d%''

input: ->from \u432d \u432d where \u432d.name like '%fred%'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE 䌭 䌭 ) ) ) ( where ( like ( . 䌭 name ) '%fred%' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: '\u432d'
    |        \-[ALIAS] Node: '\u432d'
    \-[WHERE] Node: 'where'
       \-[LIKE] Node: 'like'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: '\u432d'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''%fred%''

input: ->from Foo f order by com.fooco.SpecialFunction(f.id)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Foo f ) ) ) ( order ( ( ( . ( . com fooco ) SpecialFunction ) ( exprList ( . f id ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'f'
    \-[ORDER] Node: 'order'
       \-[METHOD_CALL] Node: '('
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'com'
          |  |  \-[IDENT] Node: 'fooco'
          |  \-[IDENT] Node: 'SpecialFunction'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'f'
                \-[IDENT] Node: 'id'

input: ->from Animal where zoo.address.street = '123 Bogus St.'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Animal ) ) ) ( where ( = ( . ( . zoo address ) street ) '123 Bogus St.' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[IDENT] Node: 'Animal'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'zoo'
          |  |  \-[IDENT] Node: 'address'
          |  \-[IDENT] Node: 'street'
          \-[QUOTED_STRING] Node: ''123 Bogus St.''

input: ->select distinct user.party from com.itf.iceclaims.domain.party.user.UserImpl user inner join user.party.$RelatedWorkgroups relatedWorkgroups where relatedWorkgroups.workgroup.id = :workgroup and relatedWorkgroups.effectiveTime.start <= :datesnow and relatedWorkgroups.effectiveTime.end > :dateenow <-
14:13:24,490 DEBUG ErrorCounter:63 - Keyword  'end' is being interpreted as an identifier due to: expecting IDENT, found 'end'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . ( . ( . ( . com itf ) iceclaims ) domain ) party ) user ) UserImpl ) user ) ( join inner ( . ( . user party ) $RelatedWorkgroups ) relatedWorkgroups ) ) ( select distinct ( . user party ) ) ) ( where ( and ( and ( = ( . ( . relatedWorkgroups workgroup ) id ) ( : workgroup ) ) ( <= ( . ( . relatedWorkgroups effectiveTime ) start ) ( : datesnow ) ) ) ( > ( . ( . relatedWorkgroups effectiveTime ) end ) ( : dateenow ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  |  |  |  +-[IDENT] Node: 'com'
    |  |  |  |  |  |  |  |  |  \-[IDENT] Node: 'itf'
    |  |  |  |  |  |  |  |  \-[IDENT] Node: 'iceclaims'
    |  |  |  |  |  |  |  \-[IDENT] Node: 'domain'
    |  |  |  |  |  |  \-[IDENT] Node: 'party'
    |  |  |  |  |  \-[IDENT] Node: 'user'
    |  |  |  |  \-[IDENT] Node: 'UserImpl'
    |  |  |  \-[ALIAS] Node: 'user'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[INNER] Node: 'inner'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[IDENT] Node: 'user'
    |  |     |  |  \-[IDENT] Node: 'party'
    |  |     |  \-[IDENT] Node: '$RelatedWorkgroups'
    |  |     \-[ALIAS] Node: 'relatedWorkgroups'
    |  \-[SELECT] Node: 'select'
    |     +-[DISTINCT] Node: 'distinct'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'user'
    |        \-[IDENT] Node: 'party'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[AND] Node: 'and'
          |  +-[EQ] Node: '='
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'relatedWorkgroups'
          |  |  |  |  \-[IDENT] Node: 'workgroup'
          |  |  |  \-[IDENT] Node: 'id'
          |  |  \-[COLON] Node: ':'
          |  |     \-[IDENT] Node: 'workgroup'
          |  \-[LE] Node: '<='
          |     +-[DOT] Node: '.'
          |     |  +-[DOT] Node: '.'
          |     |  |  +-[IDENT] Node: 'relatedWorkgroups'
          |     |  |  \-[IDENT] Node: 'effectiveTime'
          |     |  \-[IDENT] Node: 'start'
          |     \-[COLON] Node: ':'
          |        \-[IDENT] Node: 'datesnow'
          \-[GT] Node: '>'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'relatedWorkgroups'
             |  |  \-[IDENT] Node: 'effectiveTime'
             |  \-[WEIRD_IDENT] Node: 'end'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'dateenow'

input: ->from Person p where not ( p.name is null and exists(select a.id from Address a where a.id=p.id))<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Person p ) ) ) ( where ( {or} ( {not}is null ( . p name ) ) ( not ( exists ( query ( SELECT_FROM ( from ( RANGE Address a ) ) ( select ( . a id ) ) ) ( where ( = ( . a id ) ( . p id ) ) ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Person'
    |        \-[ALIAS] Node: 'p'
    \-[WHERE] Node: 'where'
       \-[OR] Node: '{or}'
          +-[IS_NOT_NULL] Node: '{not}is null'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'p'
          |     \-[IDENT] Node: 'name'
          \-[NOT] Node: 'not'
             \-[EXISTS] Node: 'exists'
                \-[QUERY] Node: 'query'
                   +-[SELECT_FROM] Node: 'SELECT_FROM'
                   |  +-[FROM] Node: 'from'
                   |  |  \-[RANGE] Node: 'RANGE'
                   |  |     +-[IDENT] Node: 'Address'
                   |  |     \-[ALIAS] Node: 'a'
                   |  \-[SELECT] Node: 'select'
                   |     \-[DOT] Node: '.'
                   |        +-[IDENT] Node: 'a'
                   |        \-[IDENT] Node: 'id'
                   \-[WHERE] Node: 'where'
                      \-[EQ] Node: '='
                         +-[DOT] Node: '.'
                         |  +-[IDENT] Node: 'a'
                         |  \-[IDENT] Node: 'id'
                         \-[DOT] Node: '.'
                            +-[IDENT] Node: 'p'
                            \-[IDENT] Node: 'id'

input: ->from Person p where not ( p.name is null or exists(select a.id from Address a where a.id=p.id))<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Person p ) ) ) ( where ( {and} ( {not}is null ( . p name ) ) ( not ( exists ( query ( SELECT_FROM ( from ( RANGE Address a ) ) ( select ( . a id ) ) ) ( where ( = ( . a id ) ( . p id ) ) ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Person'
    |        \-[ALIAS] Node: 'p'
    \-[WHERE] Node: 'where'
       \-[AND] Node: '{and}'
          +-[IS_NOT_NULL] Node: '{not}is null'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'p'
          |     \-[IDENT] Node: 'name'
          \-[NOT] Node: 'not'
             \-[EXISTS] Node: 'exists'
                \-[QUERY] Node: 'query'
                   +-[SELECT_FROM] Node: 'SELECT_FROM'
                   |  +-[FROM] Node: 'from'
                   |  |  \-[RANGE] Node: 'RANGE'
                   |  |     +-[IDENT] Node: 'Address'
                   |  |     \-[ALIAS] Node: 'a'
                   |  \-[SELECT] Node: 'select'
                   |     \-[DOT] Node: '.'
                   |        +-[IDENT] Node: 'a'
                   |        \-[IDENT] Node: 'id'
                   \-[WHERE] Node: 'where'
                      \-[EQ] Node: '='
                         +-[DOT] Node: '.'
                         |  +-[IDENT] Node: 'a'
                         |  \-[IDENT] Node: 'id'
                         \-[DOT] Node: '.'
                            +-[IDENT] Node: 'p'
                            \-[IDENT] Node: 'id'

input: ->from Foo f
where f.name = 'fred'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Foo f ) ) ) ( where ( = ( . f name ) 'fred' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'f'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'f'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''fred''

input: ->from Animal a where a in (from Cat union from Dog) <-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( in a ( inList ( query ( SELECT_FROM ( from ( RANGE Cat ) ) ) union ( SELECT_FROM ( from ( RANGE Dog ) ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Animal'
    |        \-[ALIAS] Node: 'a'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[IDENT] Node: 'a'
          \-[IN_LIST] Node: 'inList'
             \-[QUERY] Node: 'query'
                +-[SELECT_FROM] Node: 'SELECT_FROM'
                |  \-[FROM] Node: 'from'
                |     \-[RANGE] Node: 'RANGE'
                |        \-[IDENT] Node: 'Cat'
                +-[UNION] Node: 'union'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   \-[FROM] Node: 'from'
                      \-[RANGE] Node: 'RANGE'
                         \-[IDENT] Node: 'Dog'

input: ->select foo, bar from org.hibernate.test.Foo foo left outer join foo.foo bar where foo = ?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( join left outer ( . foo foo ) bar ) ) ( select foo bar ) ) ( where ( = foo ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Foo'
    |  |  |  \-[ALIAS] Node: 'foo'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[OUTER] Node: 'outer'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'foo'
    |  |     |  \-[IDENT] Node: 'foo'
    |  |     \-[ALIAS] Node: 'bar'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'foo'
    |     \-[IDENT] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'foo'
          \-[PARAM] Node: '?'

input: ->from bar in class org.hibernate.test.Bar, foo in elements(bar.baz.fooArray)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . ( . bar baz ) fooArray ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Bar'
          |  \-[ALIAS] Node: 'bar'
          \-[JOIN] Node: 'join'
             +-[INNER] Node: 'inner'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'bar'
             |  |  \-[IDENT] Node: 'baz'
             |  \-[IDENT] Node: 'fooArray'
             \-[ALIAS] Node: 'foo'

input: ->select distinct foo from baz in class org.hibernate.test.Baz, foo in elements(baz.fooArray)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join inner ( . baz fooArray ) foo ) ) ( select distinct foo ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Baz'
       |  |  \-[ALIAS] Node: 'baz'
       |  \-[JOIN] Node: 'join'
       |     +-[INNER] Node: 'inner'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'baz'
       |     |  \-[IDENT] Node: 'fooArray'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          +-[DISTINCT] Node: 'distinct'
          \-[IDENT] Node: 'foo'

input: ->select foo from baz in class org.hibernate.test.Baz, foo in elements(baz.fooSet)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join inner ( . baz fooSet ) foo ) ) ( select foo ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Baz'
       |  |  \-[ALIAS] Node: 'baz'
       |  \-[JOIN] Node: 'join'
       |     +-[INNER] Node: 'inner'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'baz'
       |     |  \-[IDENT] Node: 'fooSet'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'foo'

input: ->select foo from baz in class org.hibernate.test.Baz, foo in elements(baz.fooArray)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join inner ( . baz fooArray ) foo ) ) ( select foo ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Baz'
       |  |  \-[ALIAS] Node: 'baz'
       |  \-[JOIN] Node: 'join'
       |     +-[INNER] Node: 'inner'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'baz'
       |     |  \-[IDENT] Node: 'fooArray'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'foo'

input: ->from org.hibernate.test.Baz baz where 'b' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ) ( where ( and ( in 'b' ( inList ( elements ( . ( . ( . baz collectionComponent ) nested ) foos ) ) ) ) ( in 1.0 ( inList ( elements ( . ( . ( . baz collectionComponent ) nested ) floats ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Baz'
    |        \-[ALIAS] Node: 'baz'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[IN] Node: 'in'
          |  +-[QUOTED_STRING] Node: ''b''
          |  \-[IN_LIST] Node: 'inList'
          |     \-[ELEMENTS] Node: 'elements'
          |        \-[DOT] Node: '.'
          |           +-[DOT] Node: '.'
          |           |  +-[DOT] Node: '.'
          |           |  |  +-[IDENT] Node: 'baz'
          |           |  |  \-[IDENT] Node: 'collectionComponent'
          |           |  \-[IDENT] Node: 'nested'
          |           \-[IDENT] Node: 'foos'
          \-[IN] Node: 'in'
             +-[NUM_DOUBLE] Node: '1.0'
             \-[IN_LIST] Node: 'inList'
                \-[ELEMENTS] Node: 'elements'
                   \-[DOT] Node: '.'
                      +-[DOT] Node: '.'
                      |  +-[DOT] Node: '.'
                      |  |  +-[IDENT] Node: 'baz'
                      |  |  \-[IDENT] Node: 'collectionComponent'
                      |  \-[IDENT] Node: 'nested'
                      \-[IDENT] Node: 'floats'

input: ->select all s, s.other from s in class org.hibernate.test.Simple where s = :s<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( all s ) ( . s other ) ) ) ( where ( = s ( : s ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Simple'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     +-[ALL] Node: 'all'
    |     |  \-[IDENT] Node: 's'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 's'
    |        \-[IDENT] Node: 'other'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 's'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 's'

input: ->from eg.Cat cat where not ( cat.kittens.size < 1 )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( {not}< ( . ( . cat kittens ) size ) 1 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[GE] Node: '{not}<'
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'cat'
          |  |  \-[IDENT] Node: 'kittens'
          |  \-[IDENT] Node: 'size'
          \-[NUM_INT] Node: '1'

input: ->from eg.Cat cat where not ( cat.kittens.size > 1 )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( {not}> ( . ( . cat kittens ) size ) 1 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[LE] Node: '{not}>'
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'cat'
          |  |  \-[IDENT] Node: 'kittens'
          |  \-[IDENT] Node: 'size'
          \-[NUM_INT] Node: '1'

input: ->from eg.Cat cat where not ( cat.kittens.size >= 1 )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( {not}>= ( . ( . cat kittens ) size ) 1 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[LT] Node: '{not}>='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'cat'
          |  |  \-[IDENT] Node: 'kittens'
          |  \-[IDENT] Node: 'size'
          \-[NUM_INT] Node: '1'

input: ->from eg.Cat cat where not ( cat.kittens.size <= 1 )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( {not}<= ( . ( . cat kittens ) size ) 1 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '{not}<='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'cat'
          |  |  \-[IDENT] Node: 'kittens'
          |  \-[IDENT] Node: 'size'
          \-[NUM_INT] Node: '1'

input: ->from eg.DomesticCat cat where not ( cat.name between 'A' and 'B' ) <-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( {not}between ( . cat name ) 'A' 'B' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'DomesticCat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[NOT_BETWEEN] Node: '{not}between'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'name'
          +-[QUOTED_STRING] Node: ''A''
          \-[QUOTED_STRING] Node: ''B''

input: ->from eg.DomesticCat cat where not ( cat.name not between 'A' and 'B' ) <-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( {not}not between ( . cat name ) 'A' 'B' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'DomesticCat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[BETWEEN] Node: '{not}not between'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'name'
          +-[QUOTED_STRING] Node: ''A''
          \-[QUOTED_STRING] Node: ''B''

input: ->from eg.Cat cat where not ( not cat.kittens.size <= 1 )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( {not}{not}<= ( . ( . cat kittens ) size ) 1 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[LE] Node: '{not}{not}<='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'cat'
          |  |  \-[IDENT] Node: 'kittens'
          |  \-[IDENT] Node: 'size'
          \-[NUM_INT] Node: '1'

input: ->from eg.Cat cat where not  not ( not cat.kittens.size <= 1 )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( {not}{not}{not}<= ( . ( . cat kittens ) size ) 1 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '{not}{not}{not}<='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'cat'
          |  |  \-[IDENT] Node: 'kittens'
          |  \-[IDENT] Node: 'size'
          \-[NUM_INT] Node: '1'

input: ->select bar from org.hibernate.test.Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select bar ) ) ( order ( * ( - ( . bar x ) ( : valueX ) ) ( - ( . bar x ) ( : valueX ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Bar'
    |  |     \-[ALIAS] Node: 'bar'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'bar'
    \-[ORDER] Node: 'order'
       \-[STAR] Node: '*'
          +-[MINUS] Node: '-'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'bar'
          |  |  \-[IDENT] Node: 'x'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'valueX'
          \-[MINUS] Node: '-'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'bar'
             |  \-[IDENT] Node: 'x'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'valueX'

input: ->from bar in class org.hibernate.test.Bar, foo in elements(bar.baz.fooSet)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . ( . bar baz ) fooSet ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Bar'
          |  \-[ALIAS] Node: 'bar'
          \-[JOIN] Node: 'join'
             +-[INNER] Node: 'inner'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'bar'
             |  |  \-[IDENT] Node: 'baz'
             |  \-[IDENT] Node: 'fooSet'
             \-[ALIAS] Node: 'foo'

input: ->from one in class org.hibernate.test.One, many in elements(one.manies) where one.id = 1 and many.id = 1<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ( join inner ( . one manies ) many ) ) ) ( where ( and ( = ( . one id ) 1 ) ( = ( . many id ) 1 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'One'
    |     |  \-[ALIAS] Node: 'one'
    |     \-[JOIN] Node: 'join'
    |        +-[INNER] Node: 'inner'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'one'
    |        |  \-[IDENT] Node: 'manies'
    |        \-[ALIAS] Node: 'many'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'one'
          |  |  \-[IDENT] Node: 'id'
          |  \-[NUM_INT] Node: '1'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'many'
             |  \-[IDENT] Node: 'id'
             \-[NUM_INT] Node: '1'

input: ->from org.hibernate.test.Inner _inner join _inner.middles middle<-
14:13:24,686 DEBUG ErrorCounter:63 - Keyword  'Inner' is being interpreted as an identifier due to: expecting IDENT, found 'Inner'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Inner ) _inner ) ( join ( . _inner middles ) middle ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[WEIRD_IDENT] Node: 'Inner'
          |  \-[ALIAS] Node: '_inner'
          \-[JOIN] Node: 'join'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: '_inner'
             |  \-[IDENT] Node: 'middles'
             \-[ALIAS] Node: 'middle'

input: ->FROM m IN CLASS org.hibernate.test.Master WHERE NOT EXISTS ( FROM d IN elements(m.details) WHERE NOT d.i=5 )<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Master ) m ) ) ) ( WHERE ( not ( EXISTS ( query ( SELECT_FROM ( FROM ( join inner ( . m details ) d ) ) ) ( WHERE ( {not}= ( . d i ) 5 ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'FROM'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Master'
    |        \-[ALIAS] Node: 'm'
    \-[WHERE] Node: 'WHERE'
       \-[NOT] Node: 'not'
          \-[EXISTS] Node: 'EXISTS'
             \-[QUERY] Node: 'query'
                +-[SELECT_FROM] Node: 'SELECT_FROM'
                |  \-[FROM] Node: 'FROM'
                |     \-[JOIN] Node: 'join'
                |        +-[INNER] Node: 'inner'
                |        +-[DOT] Node: '.'
                |        |  +-[IDENT] Node: 'm'
                |        |  \-[IDENT] Node: 'details'
                |        \-[ALIAS] Node: 'd'
                \-[WHERE] Node: 'WHERE'
                   \-[NE] Node: '{not}='
                      +-[DOT] Node: '.'
                      |  +-[IDENT] Node: 'd'
                      |  \-[IDENT] Node: 'i'
                      \-[NUM_INT] Node: '5'

input: ->FROM m IN CLASS org.hibernate.test.Master WHERE NOT 5 IN ( SELECT d.i FROM d IN elements(m.details) )<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Master ) m ) ) ) ( WHERE ( {not}in 5 ( inList ( query ( SELECT_FROM ( FROM ( join inner ( . m details ) d ) ) ( SELECT ( . d i ) ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'FROM'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Master'
    |        \-[ALIAS] Node: 'm'
    \-[WHERE] Node: 'WHERE'
       \-[NOT_IN] Node: '{not}in'
          +-[NUM_INT] Node: '5'
          \-[IN_LIST] Node: 'inList'
             \-[QUERY] Node: 'query'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   +-[FROM] Node: 'FROM'
                   |  \-[JOIN] Node: 'join'
                   |     +-[INNER] Node: 'inner'
                   |     +-[DOT] Node: '.'
                   |     |  +-[IDENT] Node: 'm'
                   |     |  \-[IDENT] Node: 'details'
                   |     \-[ALIAS] Node: 'd'
                   \-[SELECT] Node: 'SELECT'
                      \-[DOT] Node: '.'
                         +-[IDENT] Node: 'd'
                         \-[IDENT] Node: 'i'

input: ->SELECT m FROM m IN CLASS org.hibernate.test.Master, d IN elements(m.details) WHERE d.i=5<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Master ) m ) ( join inner ( . m details ) d ) ) ( SELECT m ) ) ( WHERE ( = ( . d i ) 5 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Master'
    |  |  |  \-[ALIAS] Node: 'm'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[INNER] Node: 'inner'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'm'
    |  |     |  \-[IDENT] Node: 'details'
    |  |     \-[ALIAS] Node: 'd'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'm'
    \-[WHERE] Node: 'WHERE'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'd'
          |  \-[IDENT] Node: 'i'
          \-[NUM_INT] Node: '5'

input: ->SELECT m FROM m IN CLASS org.hibernate.test.Master, d IN elements(m.details) WHERE d.i=5<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Master ) m ) ( join inner ( . m details ) d ) ) ( SELECT m ) ) ( WHERE ( = ( . d i ) 5 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Master'
    |  |  |  \-[ALIAS] Node: 'm'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[INNER] Node: 'inner'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'm'
    |  |     |  \-[IDENT] Node: 'details'
    |  |     \-[ALIAS] Node: 'd'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'm'
    \-[WHERE] Node: 'WHERE'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'd'
          |  \-[IDENT] Node: 'i'
          \-[NUM_INT] Node: '5'

input: ->SELECT m.id FROM m IN CLASS org.hibernate.test.Master, d IN elements(m.details) WHERE d.i=5<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Master ) m ) ( join inner ( . m details ) d ) ) ( SELECT ( . m id ) ) ) ( WHERE ( = ( . d i ) 5 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Master'
    |  |  |  \-[ALIAS] Node: 'm'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[INNER] Node: 'inner'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'm'
    |  |     |  \-[IDENT] Node: 'details'
    |  |     \-[ALIAS] Node: 'd'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'm'
    |        \-[IDENT] Node: 'id'
    \-[WHERE] Node: 'WHERE'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'd'
          |  \-[IDENT] Node: 'i'
          \-[NUM_INT] Node: '5'

input: ->select object(a) from Animal a where a.mother member of a.offspring<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( object a ) ) ) ( where ( in ( . a mother ) ( inList ( elements ( . a offspring ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[IDENT] Node: 'Animal'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'select'
    |     \-[OBJECT] Node: 'object'
    |        \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'a'
          |  \-[IDENT] Node: 'mother'
          \-[IN_LIST] Node: 'inList'
             \-[ELEMENTS] Node: 'elements'
                \-[DOT] Node: '.'
                   +-[IDENT] Node: 'a'
                   \-[IDENT] Node: 'offspring'

input: ->select object(a) from Animal a where a.mother member a.offspring<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( object a ) ) ) ( where ( in ( . a mother ) ( inList ( elements ( . a offspring ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[IDENT] Node: 'Animal'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'select'
    |     \-[OBJECT] Node: 'object'
    |        \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'a'
          |  \-[IDENT] Node: 'mother'
          \-[IN_LIST] Node: 'inList'
             \-[ELEMENTS] Node: 'elements'
                \-[DOT] Node: '.'
                   +-[IDENT] Node: 'a'
                   \-[IDENT] Node: 'offspring'

input: ->select object(a) from Animal a where a.offspring is empty<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( object a ) ) ) ( where ( not ( exists ( QUERY ( SELECT_FROM ( from ( RANGE ( . a offspring ) ) ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[IDENT] Node: 'Animal'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'select'
    |     \-[OBJECT] Node: 'object'
    |        \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'where'
       \-[NOT] Node: 'not'
          \-[EXISTS] Node: 'exists'
             \-[QUERY] Node: 'QUERY'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   \-[FROM] Node: 'from'
                      \-[RANGE] Node: 'RANGE'
                         \-[DOT] Node: '.'
                            +-[IDENT] Node: 'a'
                            \-[IDENT] Node: 'offspring'

input: -><-
AST  :   ( query ( SELECT_FROM {filter-implied FROM} ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: '{filter-implied FROM}'

input: ->order by this.id<-
AST  :   ( query ( SELECT_FROM {filter-implied FROM} ) ( order ( . this id ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: '{filter-implied FROM}'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'this'
          \-[IDENT] Node: 'id'

input: ->where this.name = ?<-
AST  :   ( query ( SELECT_FROM {filter-implied FROM} ) ( where ( = ( . this name ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: '{filter-implied FROM}'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'this'
          |  \-[IDENT] Node: 'name'
          \-[PARAM] Node: '?'

***** This test ensures that an error is detected ERROR MESSAGES ARE OKAY!  *****
14:13:24,693 ERROR ErrorCounter:54 -  FROM expected (non-filter queries must contain a FROM clause)
14:13:24,693 ERROR ErrorCounter:50 -  FROM expected (non-filter queries must contain a FROM clause)
 FROM expected (non-filter queries must contain a FROM clause)
	at org.hibernate.hql.internal.antlr.HqlBaseParser.selectFrom(HqlBaseParser.java:1102)
	at org.hibernate.hql.internal.antlr.HqlBaseParser.queryRule(HqlBaseParser.java:720)
	at org.hibernate.hql.internal.antlr.HqlBaseParser.selectStatement(HqlBaseParser.java:313)
	at org.hibernate.hql.internal.antlr.HqlBaseParser.statement(HqlBaseParser.java:176)
	at org.hibernate.test.hql.HqlParserTest.testNoFrom(HqlParserTest.java:949)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:55)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:42)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:75)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:49)
	at sun.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at $Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:103)
	at sun.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.remote.internal.TypeCastDispatch.dispatch(TypeCastDispatch.java:30)
	at org.gradle.messaging.remote.internal.WorkerProtocol.handleIncoming(WorkerProtocol.java:53)
	at org.gradle.messaging.remote.internal.WorkerProtocol.handleIncoming(WorkerProtocol.java:31)
	at org.gradle.messaging.remote.internal.ProtocolStack$ProtocolStage.handleIncoming(ProtocolStack.java:167)
	at org.gradle.messaging.remote.internal.ProtocolStack$BottomStage.handleIncoming(ProtocolStack.java:277)
	at org.gradle.messaging.remote.internal.ProtocolStack$BottomConnection$1.run(ProtocolStack.java:299)
	at org.gradle.messaging.remote.internal.ProtocolStack$ExecuteRunnable.dispatch(ProtocolStack.java:120)
	at org.gradle.messaging.remote.internal.ProtocolStack$ExecuteRunnable.dispatch(ProtocolStack.java:116)
	at org.gradle.messaging.dispatch.AsyncDispatch.dispatchMessages(AsyncDispatch.java:132)
	at org.gradle.messaging.dispatch.AsyncDispatch.access$000(AsyncDispatch.java:33)
	at org.gradle.messaging.dispatch.AsyncDispatch$1.run(AsyncDispatch.java:72)
	at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:66)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
***** END OF ERROR TEST  *****
input: ->select x from fmc_web.pool.Pool x left join x.containers c0 where (upper(x.name) = upper(':') and c0.id = 1)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . fmc_web pool ) Pool ) x ) ( join left ( . x containers ) c0 ) ) ( select x ) ) ( where ( and ( = ( ( upper ( exprList ( . x name ) ) ) ( ( upper ( exprList ':' ) ) ) ( = ( . c0 id ) 1 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[IDENT] Node: 'fmc_web'
    |  |  |  |  |  \-[IDENT] Node: 'pool'
    |  |  |  |  \-[IDENT] Node: 'Pool'
    |  |  |  \-[ALIAS] Node: 'x'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'x'
    |  |     |  \-[IDENT] Node: 'containers'
    |  |     \-[ALIAS] Node: 'c0'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'x'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[METHOD_CALL] Node: '('
          |  |  +-[IDENT] Node: 'upper'
          |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |     \-[DOT] Node: '.'
          |  |        +-[IDENT] Node: 'x'
          |  |        \-[IDENT] Node: 'name'
          |  \-[METHOD_CALL] Node: '('
          |     +-[IDENT] Node: 'upper'
          |     \-[EXPR_LIST] Node: 'exprList'
          |        \-[QUOTED_STRING] Node: '':''
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'c0'
             |  \-[IDENT] Node: 'id'
             \-[NUM_INT] Node: '1'

input: ->from Customer c where c.order.status = 'argh'<-
14:13:24,694 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=24,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Customer c ) ) ) ( where ( = ( . ( . c order ) status ) 'argh' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Customer'
    |        \-[ALIAS] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'c'
          |  |  \-[IDENT] Node: 'order'
          |  \-[IDENT] Node: 'status'
          \-[QUOTED_STRING] Node: ''argh''

input: ->from Customer c where c.order.count > 3<-
14:13:24,695 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=24,possibleID=false]
14:13:24,695 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE Customer c ) ) ) ( where ( > ( . ( . c order ) count ) 3 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Customer'
    |        \-[ALIAS] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'c'
          |  |  \-[IDENT] Node: 'order'
          |  \-[WEIRD_IDENT] Node: 'count'
          \-[NUM_INT] Node: '3'

input: ->select c.where from Customer c where c.order.count > 3<-
14:13:24,723 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=9,possibleID=false]
14:13:24,723 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=39,possibleID=false]
14:13:24,723 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE Customer c ) ) ( select ( . c where ) ) ) ( where ( > ( . ( . c order ) count ) 3 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[IDENT] Node: 'Customer'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'c'
    |        \-[IDENT] Node: 'where'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'c'
          |  |  \-[IDENT] Node: 'order'
          |  \-[WEIRD_IDENT] Node: 'count'
          \-[NUM_INT] Node: '3'

input: ->from Interval i where i.end <:end<-
14:13:24,724 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=24,possibleID=false]
14:13:24,724 DEBUG ErrorCounter:63 - Keyword  'end' is being interpreted as an identifier due to: expecting IDENT, found 'end'
AST  :   ( query ( SELECT_FROM ( from ( RANGE Interval i ) ) ) ( where ( < ( . i end ) ( : end ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Interval'
    |        \-[ALIAS] Node: 'i'
    \-[WHERE] Node: 'where'
       \-[LT] Node: '<'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'i'
          |  \-[IDENT] Node: 'end'
          \-[COLON] Node: ':'
             \-[WEIRD_IDENT] Node: 'end'

input: ->from Letter l where l.case = :case<-
14:13:24,725 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=22,possibleID=false]
14:13:24,725 DEBUG ErrorCounter:63 - Keyword  'case' is being interpreted as an identifier due to: expecting IDENT, found 'case'
AST  :   ( query ( SELECT_FROM ( from ( RANGE Letter l ) ) ) ( where ( = ( . l case ) ( : case ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Letter'
    |        \-[ALIAS] Node: 'l'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'l'
          |  \-[IDENT] Node: 'case'
          \-[COLON] Node: ':'
             \-[WEIRD_IDENT] Node: 'case'

input: ->from Order order<-
14:13:24,760 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=6,possibleID=true]
14:13:24,760 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["order",<108> previously: <41>,line=1,col=12,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Order order ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[IDENT] Node: 'Order'
             \-[ALIAS] Node: 'order'

input: ->from X x order by x.group.by.from<-
14:13:24,761 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=20,possibleID=false]
14:13:24,761 DEBUG ErrorCounter:63 - Keyword  'by' is being interpreted as an identifier due to: expecting IDENT, found 'by'
14:13:24,761 DEBUG ErrorCounter:63 - Keyword  'from' is being interpreted as an identifier due to: expecting IDENT, found 'from'
AST  :   ( query ( SELECT_FROM ( from ( RANGE X x ) ) ) ( order ( . ( . ( . x group ) by ) from ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'X'
    |        \-[ALIAS] Node: 'x'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'x'
          |  |  \-[IDENT] Node: 'group'
          |  \-[WEIRD_IDENT] Node: 'by'
          \-[WEIRD_IDENT] Node: 'from'

input: ->from Order x order by x.order.group.by.from<-
14:13:24,771 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=6,possibleID=true]
14:13:24,771 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=24,possibleID=false]
14:13:24,772 DEBUG ErrorCounter:63 - Keyword  'group' is being interpreted as an identifier due to: expecting IDENT, found 'group'
14:13:24,772 DEBUG ErrorCounter:63 - Keyword  'by' is being interpreted as an identifier due to: expecting IDENT, found 'by'
14:13:24,772 DEBUG ErrorCounter:63 - Keyword  'from' is being interpreted as an identifier due to: expecting IDENT, found 'from'
AST  :   ( query ( SELECT_FROM ( from ( RANGE Order x ) ) ) ( order ( . ( . ( . ( . x order ) group ) by ) from ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Order'
    |        \-[ALIAS] Node: 'x'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'x'
          |  |  |  \-[IDENT] Node: 'order'
          |  |  \-[WEIRD_IDENT] Node: 'group'
          |  \-[WEIRD_IDENT] Node: 'by'
          \-[WEIRD_IDENT] Node: 'from'

input: ->select order.id from Order order<-
14:13:24,772 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["order",<108> previously: <41>,line=1,col=8,possibleID=true]
14:13:24,773 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=22,possibleID=true]
14:13:24,773 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["order",<108> previously: <41>,line=1,col=28,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Order order ) ) ( select ( . order id ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[IDENT] Node: 'Order'
       |     \-[ALIAS] Node: 'order'
       \-[SELECT] Node: 'select'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'order'
             \-[IDENT] Node: 'id'

input: ->select order from Order order<-
14:13:24,784 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["order",<108> previously: <41>,line=1,col=8,possibleID=true]
14:13:24,785 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=19,possibleID=true]
14:13:24,785 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["order",<108> previously: <41>,line=1,col=25,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Order order ) ) ( select order ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[IDENT] Node: 'Order'
       |     \-[ALIAS] Node: 'order'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'order'

input: ->from Order order where order.group.by.from is not null<-
14:13:24,785 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=6,possibleID=true]
14:13:24,785 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["order",<108> previously: <41>,line=1,col=12,possibleID=true]
14:13:24,786 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["order",<108> previously: <41>,line=1,col=24,possibleID=true]
14:13:24,786 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=29,possibleID=false]
14:13:24,786 DEBUG ErrorCounter:63 - Keyword  'by' is being interpreted as an identifier due to: expecting IDENT, found 'by'
14:13:24,786 DEBUG ErrorCounter:63 - Keyword  'from' is being interpreted as an identifier due to: expecting IDENT, found 'from'
AST  :   ( query ( SELECT_FROM ( from ( RANGE Order order ) ) ) ( where ( is not null ( . ( . ( . order group ) by ) from ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Order'
    |        \-[ALIAS] Node: 'order'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'order'
             |  |  \-[IDENT] Node: 'group'
             |  \-[WEIRD_IDENT] Node: 'by'
             \-[WEIRD_IDENT] Node: 'from'

input: ->from Order order order by order.group.by.from<-
14:13:24,787 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=6,possibleID=true]
14:13:24,787 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["order",<108> previously: <41>,line=1,col=12,possibleID=true]
14:13:24,787 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["order",<108> previously: <41>,line=1,col=27,possibleID=true]
14:13:24,787 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=32,possibleID=false]
14:13:24,787 DEBUG ErrorCounter:63 - Keyword  'by' is being interpreted as an identifier due to: expecting IDENT, found 'by'
14:13:24,788 DEBUG ErrorCounter:63 - Keyword  'from' is being interpreted as an identifier due to: expecting IDENT, found 'from'
AST  :   ( query ( SELECT_FROM ( from ( RANGE Order order ) ) ) ( order ( . ( . ( . order group ) by ) from ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Order'
    |        \-[ALIAS] Node: 'order'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'order'
          |  |  \-[IDENT] Node: 'group'
          |  \-[WEIRD_IDENT] Node: 'by'
          \-[WEIRD_IDENT] Node: 'from'

input: ->from Group as group group by group.by.from<-
14:13:24,794 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Group",<108> previously: <24>,line=1,col=6,possibleID=true]
14:13:24,794 DEBUG ErrorCounter:63 - Keyword  'group' is being interpreted as an identifier due to: expecting IDENT, found 'group'
14:13:24,795 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["group",<108> previously: <24>,line=1,col=30,possibleID=true]
14:13:24,795 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=35,possibleID=false]
14:13:24,795 DEBUG ErrorCounter:63 - Keyword  'from' is being interpreted as an identifier due to: expecting IDENT, found 'from'
AST  :   ( query ( SELECT_FROM ( from ( RANGE Group group ) ) ) ( group ( . ( . group by ) from ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Group'
    |        \-[ALIAS] Node: 'group'
    \-[GROUP] Node: 'group'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'group'
          |  \-[IDENT] Node: 'by'
          \-[WEIRD_IDENT] Node: 'from'

input: ->from Foo f where f.full = 'yep'<-
14:13:24,808 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=19,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Foo f ) ) ) ( where ( = ( . f full ) 'yep' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'f'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'f'
          |  \-[IDENT] Node: 'full'
          \-[QUOTED_STRING] Node: ''yep''

input: ->from org.hibernate.test.Bar bar where (b.x, b.y, b.z) in (select foo, bar, baz from org.hibernate.test.Foo)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) ( where ( in ( {vector} ( . b x ) ( . b y ) ( . b z ) ) ( inList ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) ) ) ( select foo bar baz ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Bar'
    |        \-[ALIAS] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[VECTOR_EXPR] Node: '{vector}'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'b'
          |  |  \-[IDENT] Node: 'x'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'b'
          |  |  \-[IDENT] Node: 'y'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'b'
          |     \-[IDENT] Node: 'z'
          \-[IN_LIST] Node: 'inList'
             \-[QUERY] Node: 'query'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   +-[FROM] Node: 'from'
                   |  \-[RANGE] Node: 'RANGE'
                   |     \-[DOT] Node: '.'
                   |        +-[DOT] Node: '.'
                   |        |  +-[DOT] Node: '.'
                   |        |  |  +-[IDENT] Node: 'org'
                   |        |  |  \-[IDENT] Node: 'hibernate'
                   |        |  \-[IDENT] Node: 'test'
                   |        \-[IDENT] Node: 'Foo'
                   \-[SELECT] Node: 'select'
                      +-[IDENT] Node: 'foo'
                      +-[IDENT] Node: 'bar'
                      \-[IDENT] Node: 'baz'

input: ->from eg.Cat<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'eg'
                \-[IDENT] Node: 'Cat'

input: ->from eg.Cat as cat<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'eg'
             |  \-[IDENT] Node: 'Cat'
             \-[ALIAS] Node: 'cat'

input: ->from eg.Cat cat<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'eg'
             |  \-[IDENT] Node: 'Cat'
             \-[ALIAS] Node: 'cat'

input: ->from Formula, Parameter<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Formula ) ( RANGE Parameter ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  \-[IDENT] Node: 'Formula'
          \-[RANGE] Node: 'RANGE'
             \-[IDENT] Node: 'Parameter'

input: ->from Formula as form, Parameter as param<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Formula form ) ( RANGE Parameter param ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[IDENT] Node: 'Formula'
          |  \-[ALIAS] Node: 'form'
          \-[RANGE] Node: 'RANGE'
             +-[IDENT] Node: 'Parameter'
             \-[ALIAS] Node: 'param'

input: ->from eg.Cat as cat inner join cat.mate as mate left outer join cat.kittens as kitten<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( join inner ( . cat mate ) mate ) ( join left outer ( . cat kittens ) kitten ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'eg'
          |  |  \-[IDENT] Node: 'Cat'
          |  \-[ALIAS] Node: 'cat'
          +-[JOIN] Node: 'join'
          |  +-[INNER] Node: 'inner'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'cat'
          |  |  \-[IDENT] Node: 'mate'
          |  \-[ALIAS] Node: 'mate'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[OUTER] Node: 'outer'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'cat'
             |  \-[IDENT] Node: 'kittens'
             \-[ALIAS] Node: 'kitten'

input: ->from eg.Cat as cat left join cat.mate.kittens as kittens<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( join left ( . ( . cat mate ) kittens ) kittens ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'eg'
          |  |  \-[IDENT] Node: 'Cat'
          |  \-[ALIAS] Node: 'cat'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'cat'
             |  |  \-[IDENT] Node: 'mate'
             |  \-[IDENT] Node: 'kittens'
             \-[ALIAS] Node: 'kittens'

input: ->from Formula form full join form.parameter param<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Formula form ) ( join full ( . form parameter ) param ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[IDENT] Node: 'Formula'
          |  \-[ALIAS] Node: 'form'
          \-[JOIN] Node: 'join'
             +-[FULL] Node: 'full'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'form'
             |  \-[IDENT] Node: 'parameter'
             \-[ALIAS] Node: 'param'

input: ->from eg.Cat as cat join cat.mate as mate left join cat.kittens as kitten<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( join ( . cat mate ) mate ) ( join left ( . cat kittens ) kitten ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'eg'
          |  |  \-[IDENT] Node: 'Cat'
          |  \-[ALIAS] Node: 'cat'
          +-[JOIN] Node: 'join'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'cat'
          |  |  \-[IDENT] Node: 'mate'
          |  \-[ALIAS] Node: 'mate'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'cat'
             |  \-[IDENT] Node: 'kittens'
             \-[ALIAS] Node: 'kitten'

input: ->from eg.Cat as cat
inner join fetch cat.mate
left join fetch cat.kittens<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( join inner fetch ( . cat mate ) ) ( join left fetch ( . cat kittens ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'eg'
          |  |  \-[IDENT] Node: 'Cat'
          |  \-[ALIAS] Node: 'cat'
          +-[JOIN] Node: 'join'
          |  +-[INNER] Node: 'inner'
          |  +-[FETCH] Node: 'fetch'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'cat'
          |     \-[IDENT] Node: 'mate'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'cat'
                \-[IDENT] Node: 'kittens'

input: ->select mate from eg.Cat as cat inner join cat.mate as mate<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( join inner ( . cat mate ) mate ) ) ( select mate ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[IDENT] Node: 'eg'
       |  |  |  \-[IDENT] Node: 'Cat'
       |  |  \-[ALIAS] Node: 'cat'
       |  \-[JOIN] Node: 'join'
       |     +-[INNER] Node: 'inner'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'cat'
       |     |  \-[IDENT] Node: 'mate'
       |     \-[ALIAS] Node: 'mate'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'mate'

input: ->select cat.mate from eg.Cat cat<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select ( . cat mate ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'eg'
       |     |  \-[IDENT] Node: 'Cat'
       |     \-[ALIAS] Node: 'cat'
       \-[SELECT] Node: 'select'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'cat'
             \-[IDENT] Node: 'mate'

input: ->select elements(cat.kittens) from eg.Cat cat<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select ( elements ( . cat kittens ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'eg'
       |     |  \-[IDENT] Node: 'Cat'
       |     \-[ALIAS] Node: 'cat'
       \-[SELECT] Node: 'select'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'cat'
                \-[IDENT] Node: 'kittens'

input: ->select cat.name from eg.DomesticCat cat where cat.name like 'fri%'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ( select ( . cat name ) ) ) ( where ( like ( . cat name ) 'fri%' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'eg'
    |  |     |  \-[IDENT] Node: 'DomesticCat'
    |  |     \-[ALIAS] Node: 'cat'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'cat'
    |        \-[IDENT] Node: 'name'
    \-[WHERE] Node: 'where'
       \-[LIKE] Node: 'like'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''fri%''

input: ->select cust.name.firstName from Customer as cust<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Customer cust ) ) ( select ( . ( . cust name ) firstName ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[IDENT] Node: 'Customer'
       |     \-[ALIAS] Node: 'cust'
       \-[SELECT] Node: 'select'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'cust'
             |  \-[IDENT] Node: 'name'
             \-[IDENT] Node: 'firstName'

input: ->select mother, offspr, mate.name from eg.DomesticCat
 as mother inner join mother.mate as mate left outer join
mother.kittens as offspr<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) mother ) ( join inner ( . mother mate ) mate ) ( join left outer ( . mother kittens ) offspr ) ) ( select mother offspr ( . mate name ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[IDENT] Node: 'eg'
       |  |  |  \-[IDENT] Node: 'DomesticCat'
       |  |  \-[ALIAS] Node: 'mother'
       |  +-[JOIN] Node: 'join'
       |  |  +-[INNER] Node: 'inner'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[IDENT] Node: 'mother'
       |  |  |  \-[IDENT] Node: 'mate'
       |  |  \-[ALIAS] Node: 'mate'
       |  \-[JOIN] Node: 'join'
       |     +-[LEFT] Node: 'left'
       |     +-[OUTER] Node: 'outer'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'mother'
       |     |  \-[IDENT] Node: 'kittens'
       |     \-[ALIAS] Node: 'offspr'
       \-[SELECT] Node: 'select'
          +-[IDENT] Node: 'mother'
          +-[IDENT] Node: 'offspr'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'mate'
             \-[IDENT] Node: 'name'

input: ->select new Family(mother, mate, offspr)
from eg.DomesticCat as mother
join mother.mate as mate
left join mother.kittens as offspr
<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) mother ) ( join ( . mother mate ) mate ) ( join left ( . mother kittens ) offspr ) ) ( select ( ( Family mother mate offspr ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[IDENT] Node: 'eg'
       |  |  |  \-[IDENT] Node: 'DomesticCat'
       |  |  \-[ALIAS] Node: 'mother'
       |  +-[JOIN] Node: 'join'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[IDENT] Node: 'mother'
       |  |  |  \-[IDENT] Node: 'mate'
       |  |  \-[ALIAS] Node: 'mate'
       |  \-[JOIN] Node: 'join'
       |     +-[LEFT] Node: 'left'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'mother'
       |     |  \-[IDENT] Node: 'kittens'
       |     \-[ALIAS] Node: 'offspr'
       \-[SELECT] Node: 'select'
          \-[CONSTRUCTOR] Node: '('
             +-[IDENT] Node: 'Family'
             +-[IDENT] Node: 'mother'
             +-[IDENT] Node: 'mate'
             \-[IDENT] Node: 'offspr'

input: ->select avg(cat.weight), sum(cat.weight), max(cat.weight), count(cat)
from eg.Cat cat<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select ( avg ( . cat weight ) ) ( sum ( . cat weight ) ) ( max ( . cat weight ) ) ( count cat ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'eg'
       |     |  \-[IDENT] Node: 'Cat'
       |     \-[ALIAS] Node: 'cat'
       \-[SELECT] Node: 'select'
          +-[AGGREGATE] Node: 'avg'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'cat'
          |     \-[IDENT] Node: 'weight'
          +-[AGGREGATE] Node: 'sum'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'cat'
          |     \-[IDENT] Node: 'weight'
          +-[AGGREGATE] Node: 'max'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'cat'
          |     \-[IDENT] Node: 'weight'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'cat'

input: ->select cat, count( elements(cat.kittens) )
 from eg.Cat cat group by cat<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select cat ( count ( elements ( . cat kittens ) ) ) ) ) ( group cat ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'eg'
    |  |     |  \-[IDENT] Node: 'Cat'
    |  |     \-[ALIAS] Node: 'cat'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'cat'
    |     \-[COUNT] Node: 'count'
    |        \-[ELEMENTS] Node: 'elements'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'cat'
    |              \-[IDENT] Node: 'kittens'
    \-[GROUP] Node: 'group'
       \-[IDENT] Node: 'cat'

input: ->select distinct cat.name from eg.Cat cat<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select distinct ( . cat name ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'eg'
       |     |  \-[IDENT] Node: 'Cat'
       |     \-[ALIAS] Node: 'cat'
       \-[SELECT] Node: 'select'
          +-[DISTINCT] Node: 'distinct'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'cat'
             \-[IDENT] Node: 'name'

input: ->select count(distinct cat.name), count(cat) from eg.Cat cat<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select ( count distinct ( . cat name ) ) ( count cat ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'eg'
       |     |  \-[IDENT] Node: 'Cat'
       |     \-[ALIAS] Node: 'cat'
       \-[SELECT] Node: 'select'
          +-[COUNT] Node: 'count'
          |  +-[DISTINCT] Node: 'distinct'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'cat'
          |     \-[IDENT] Node: 'name'
          \-[COUNT] Node: 'count'
             \-[IDENT] Node: 'cat'

input: ->from eg.Cat as cat<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'eg'
             |  \-[IDENT] Node: 'Cat'
             \-[ALIAS] Node: 'cat'

input: ->from java.lang.Object o<-
14:13:24,985 DEBUG ErrorCounter:63 - Keyword  'Object' is being interpreted as an identifier due to: expecting IDENT, found 'Object'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . java lang ) Object ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'java'
             |  |  \-[IDENT] Node: 'lang'
             |  \-[WEIRD_IDENT] Node: 'Object'
             \-[ALIAS] Node: 'o'

input: ->from eg.Named n, eg.Named m where n.name = m.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Named ) n ) ( RANGE ( . eg Named ) m ) ) ) ( where ( = ( . n name ) ( . m name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'eg'
    |     |  |  \-[IDENT] Node: 'Named'
    |     |  \-[ALIAS] Node: 'n'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Named'
    |        \-[ALIAS] Node: 'm'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'm'
             \-[IDENT] Node: 'name'

input: ->from eg.Cat as cat where cat.name='Fritz'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( = ( . cat name ) 'Fritz' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''Fritz''

input: ->select foo
from eg.Foo foo, eg.Bar bar
where foo.startDate = bar.date
<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Foo ) foo ) ( RANGE ( . eg Bar ) bar ) ) ( select foo ) ) ( where ( = ( . foo startDate ) ( . bar date ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'eg'
    |  |  |  |  \-[IDENT] Node: 'Foo'
    |  |  |  \-[ALIAS] Node: 'foo'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'eg'
    |  |     |  \-[IDENT] Node: 'Bar'
    |  |     \-[ALIAS] Node: 'bar'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'startDate'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'bar'
             \-[IDENT] Node: 'date'

input: ->from eg.Cat cat where cat.mate.name is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( is not null ( . ( . cat mate ) name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'cat'
             |  \-[IDENT] Node: 'mate'
             \-[IDENT] Node: 'name'

input: ->from eg.Cat cat, eg.Cat rival where cat.mate = rival.mate<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( RANGE ( . eg Cat ) rival ) ) ) ( where ( = ( . cat mate ) ( . rival mate ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'eg'
    |     |  |  \-[IDENT] Node: 'Cat'
    |     |  \-[ALIAS] Node: 'cat'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'rival'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'mate'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'rival'
             \-[IDENT] Node: 'mate'

input: ->select cat, mate
from eg.Cat cat, eg.Cat mate
where cat.mate = mate<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( RANGE ( . eg Cat ) mate ) ) ( select cat mate ) ) ( where ( = ( . cat mate ) mate ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'eg'
    |  |  |  |  \-[IDENT] Node: 'Cat'
    |  |  |  \-[ALIAS] Node: 'cat'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'eg'
    |  |     |  \-[IDENT] Node: 'Cat'
    |  |     \-[ALIAS] Node: 'mate'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'cat'
    |     \-[IDENT] Node: 'mate'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'mate'
          \-[IDENT] Node: 'mate'

input: ->from eg.Cat as cat where cat.id = 123<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( = ( . cat id ) 123 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'id'
          \-[NUM_INT] Node: '123'

input: ->from eg.Cat as cat where cat.mate.id = 69<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( = ( . ( . cat mate ) id ) 69 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'cat'
          |  |  \-[IDENT] Node: 'mate'
          |  \-[IDENT] Node: 'id'
          \-[NUM_INT] Node: '69'

input: ->from bank.Person person
where person.id.country = 'AU'
and person.id.medicareNumber = 123456<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . bank Person ) person ) ) ) ( where ( and ( = ( . ( . person id ) country ) 'AU' ) ( = ( . ( . person id ) medicareNumber ) 123456 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'bank'
    |        |  \-[IDENT] Node: 'Person'
    |        \-[ALIAS] Node: 'person'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'person'
          |  |  |  \-[IDENT] Node: 'id'
          |  |  \-[IDENT] Node: 'country'
          |  \-[QUOTED_STRING] Node: ''AU''
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'person'
             |  |  \-[IDENT] Node: 'id'
             |  \-[IDENT] Node: 'medicareNumber'
             \-[NUM_INT] Node: '123456'

input: ->from bank.Account account
where account.owner.id.country = 'AU'
and account.owner.id.medicareNumber = 123456<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . bank Account ) account ) ) ) ( where ( and ( = ( . ( . ( . account owner ) id ) country ) 'AU' ) ( = ( . ( . ( . account owner ) id ) medicareNumber ) 123456 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'bank'
    |        |  \-[IDENT] Node: 'Account'
    |        \-[ALIAS] Node: 'account'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'account'
          |  |  |  |  \-[IDENT] Node: 'owner'
          |  |  |  \-[IDENT] Node: 'id'
          |  |  \-[IDENT] Node: 'country'
          |  \-[QUOTED_STRING] Node: ''AU''
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'account'
             |  |  |  \-[IDENT] Node: 'owner'
             |  |  \-[IDENT] Node: 'id'
             |  \-[IDENT] Node: 'medicareNumber'
             \-[NUM_INT] Node: '123456'

input: ->from eg.Cat cat where cat.class = eg.DomesticCat<-
14:13:25,061 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=26,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( = ( . cat class ) ( . eg DomesticCat ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'class'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'eg'
             \-[IDENT] Node: 'DomesticCat'

input: ->from eg.AuditLog log, eg.Payment payment
where log.item.class = 'eg.Payment' and log.item.id = payment.id<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg AuditLog ) log ) ( RANGE ( . eg Payment ) payment ) ) ) ( where ( and ( = ( . ( . log item ) class ) 'eg.Payment' ) ( = ( . ( . log item ) id ) ( . payment id ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'eg'
    |     |  |  \-[IDENT] Node: 'AuditLog'
    |     |  \-[ALIAS] Node: 'log'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Payment'
    |        \-[ALIAS] Node: 'payment'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'log'
          |  |  |  \-[IDENT] Node: 'item'
          |  |  \-[CLASS] Node: 'class'
          |  \-[QUOTED_STRING] Node: ''eg.Payment''
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'log'
             |  |  \-[IDENT] Node: 'item'
             |  \-[IDENT] Node: 'id'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'payment'
                \-[IDENT] Node: 'id'

input: ->from eg.DomesticCat cat where cat.name between 'A' and 'B'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( between ( . cat name ) 'A' 'B' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'DomesticCat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[BETWEEN] Node: 'between'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'name'
          +-[QUOTED_STRING] Node: ''A''
          \-[QUOTED_STRING] Node: ''B''

input: ->from eg.DomesticCat cat where cat.name in ( 'Foo', 'Bar', 'Baz' )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( in ( . cat name ) ( inList 'Foo' 'Bar' 'Baz' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'DomesticCat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'name'
          \-[IN_LIST] Node: 'inList'
             +-[QUOTED_STRING] Node: ''Foo''
             +-[QUOTED_STRING] Node: ''Bar''
             \-[QUOTED_STRING] Node: ''Baz''

input: ->from eg.DomesticCat cat where cat.name not between 'A' and 'B'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( not between ( . cat name ) 'A' 'B' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'DomesticCat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[NOT_BETWEEN] Node: 'not between'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'name'
          +-[QUOTED_STRING] Node: ''A''
          \-[QUOTED_STRING] Node: ''B''

input: ->from eg.DomesticCat cat where cat.name not in ( 'Foo', 'Bar', 'Baz' )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( not in ( . cat name ) ( inList 'Foo' 'Bar' 'Baz' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'DomesticCat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[NOT_IN] Node: 'not in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'name'
          \-[IN_LIST] Node: 'inList'
             +-[QUOTED_STRING] Node: ''Foo''
             +-[QUOTED_STRING] Node: ''Bar''
             \-[QUOTED_STRING] Node: ''Baz''

input: ->from eg.Cat cat where cat.kittens.size > 0<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( > ( . ( . cat kittens ) size ) 0 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'cat'
          |  |  \-[IDENT] Node: 'kittens'
          |  \-[IDENT] Node: 'size'
          \-[NUM_INT] Node: '0'

input: ->from eg.Cat cat where size(cat.kittens) > 0<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( > ( ( size ( exprList ( . cat kittens ) ) ) 0 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'size'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[DOT] Node: '.'
          |        +-[IDENT] Node: 'cat'
          |        \-[IDENT] Node: 'kittens'
          \-[NUM_INT] Node: '0'

input: ->from Order ord where maxindex(ord.items) > 100<-
14:13:25,139 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=6,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Order ord ) ) ) ( where ( > ( ( maxindex ( exprList ( . ord items ) ) ) 100 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Order'
    |        \-[ALIAS] Node: 'ord'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'maxindex'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[DOT] Node: '.'
          |        +-[IDENT] Node: 'ord'
          |        \-[IDENT] Node: 'items'
          \-[NUM_INT] Node: '100'

input: ->from Order ord where minelement(ord.items) > 10000<-
14:13:25,149 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=6,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Order ord ) ) ) ( where ( > ( ( minelement ( exprList ( . ord items ) ) ) 10000 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Order'
    |        \-[ALIAS] Node: 'ord'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'minelement'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[DOT] Node: '.'
          |        +-[IDENT] Node: 'ord'
          |        \-[IDENT] Node: 'items'
          \-[NUM_INT] Node: '10000'

input: ->select mother from eg.Cat as mother, eg.Cat as kit
where kit in elements(foo.kittens)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) mother ) ( RANGE ( . eg Cat ) kit ) ) ( select mother ) ) ( where ( in kit ( inList ( elements ( . foo kittens ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'eg'
    |  |  |  |  \-[IDENT] Node: 'Cat'
    |  |  |  \-[ALIAS] Node: 'mother'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'eg'
    |  |     |  \-[IDENT] Node: 'Cat'
    |  |     \-[ALIAS] Node: 'kit'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'mother'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[IDENT] Node: 'kit'
          \-[IN_LIST] Node: 'inList'
             \-[ELEMENTS] Node: 'elements'
                \-[DOT] Node: '.'
                   +-[IDENT] Node: 'foo'
                   \-[IDENT] Node: 'kittens'

input: ->select p from eg.NameList list, eg.Person p
where p.name = some elements(list.names)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg NameList ) list ) ( RANGE ( . eg Person ) p ) ) ( select p ) ) ( where ( = ( . p name ) ( some ( elements ( . list names ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'eg'
    |  |  |  |  \-[IDENT] Node: 'NameList'
    |  |  |  \-[ALIAS] Node: 'list'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'eg'
    |  |     |  \-[IDENT] Node: 'Person'
    |  |     \-[ALIAS] Node: 'p'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'p'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'p'
          |  \-[IDENT] Node: 'name'
          \-[SOME] Node: 'some'
             \-[ELEMENTS] Node: 'elements'
                \-[DOT] Node: '.'
                   +-[IDENT] Node: 'list'
                   \-[IDENT] Node: 'names'

input: ->from eg.Cat cat where exists elements(cat.kittens)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( exists ( elements ( . cat kittens ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[EXISTS] Node: 'exists'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'cat'
                \-[IDENT] Node: 'kittens'

input: ->from eg.Player p where 3 > all elements(p.scores)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Player ) p ) ) ) ( where ( > 3 ( all ( elements ( . p scores ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Player'
    |        \-[ALIAS] Node: 'p'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[NUM_INT] Node: '3'
          \-[ALL] Node: 'all'
             \-[ELEMENTS] Node: 'elements'
                \-[DOT] Node: '.'
                   +-[IDENT] Node: 'p'
                   \-[IDENT] Node: 'scores'

input: ->from eg.Show show where 'fizard' in indices(show.acts)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Show ) show ) ) ) ( where ( in 'fizard' ( inList ( indices ( . show acts ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Show'
    |        \-[ALIAS] Node: 'show'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[QUOTED_STRING] Node: ''fizard''
          \-[IN_LIST] Node: 'inList'
             \-[INDICES] Node: 'indices'
                \-[DOT] Node: '.'
                   +-[IDENT] Node: 'show'
                   \-[IDENT] Node: 'acts'

input: ->from Order ord where ord.items[0].id = 1234<-
14:13:25,250 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=6,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Order ord ) ) ) ( where ( = ( . ( [ ( . ord items ) 0 ) id ) 1234 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Order'
    |        \-[ALIAS] Node: 'ord'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'ord'
          |  |  |  \-[IDENT] Node: 'items'
          |  |  \-[NUM_INT] Node: '0'
          |  \-[IDENT] Node: 'id'
          \-[NUM_INT] Node: '1234'

input: ->select person from Person person, Calendar calendar
where calendar.holidays['national day'] = person.birthDay
and person.nationality.calendar = calendar<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Person person ) ( RANGE Calendar calendar ) ) ( select person ) ) ( where ( and ( = ( [ ( . calendar holidays ) 'national day' ) ( . person birthDay ) ) ( = ( . ( . person nationality ) calendar ) calendar ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Person'
    |  |  |  \-[ALIAS] Node: 'person'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[IDENT] Node: 'Calendar'
    |  |     \-[ALIAS] Node: 'calendar'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'person'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'calendar'
          |  |  |  \-[IDENT] Node: 'holidays'
          |  |  \-[QUOTED_STRING] Node: ''national day''
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'person'
          |     \-[IDENT] Node: 'birthDay'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'person'
             |  |  \-[IDENT] Node: 'nationality'
             |  \-[IDENT] Node: 'calendar'
             \-[IDENT] Node: 'calendar'

input: ->select item from Item item, Order ord
where ord.items[ ord.deliveredItemIndices[0] ] = item and ord.id = 11<-
14:13:25,285 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=29,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Item item ) ( RANGE Order ord ) ) ( select item ) ) ( where ( and ( = ( [ ( . ord items ) ( [ ( . ord deliveredItemIndices ) 0 ) ) item ) ( = ( . ord id ) 11 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Item'
    |  |  |  \-[ALIAS] Node: 'item'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[IDENT] Node: 'Order'
    |  |     \-[ALIAS] Node: 'ord'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'item'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'ord'
          |  |  |  \-[IDENT] Node: 'items'
          |  |  \-[INDEX_OP] Node: '['
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'ord'
          |  |     |  \-[IDENT] Node: 'deliveredItemIndices'
          |  |     \-[NUM_INT] Node: '0'
          |  \-[IDENT] Node: 'item'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'ord'
             |  \-[IDENT] Node: 'id'
             \-[NUM_INT] Node: '11'

input: ->select item from Item item, Order ord
where ord.items[ maxindex(ord.items) ] = item and ord.id = 11<-
14:13:25,297 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=29,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Item item ) ( RANGE Order ord ) ) ( select item ) ) ( where ( and ( = ( [ ( . ord items ) ( ( maxindex ( exprList ( . ord items ) ) ) ) item ) ( = ( . ord id ) 11 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Item'
    |  |  |  \-[ALIAS] Node: 'item'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[IDENT] Node: 'Order'
    |  |     \-[ALIAS] Node: 'ord'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'item'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'ord'
          |  |  |  \-[IDENT] Node: 'items'
          |  |  \-[METHOD_CALL] Node: '('
          |  |     +-[IDENT] Node: 'maxindex'
          |  |     \-[EXPR_LIST] Node: 'exprList'
          |  |        \-[DOT] Node: '.'
          |  |           +-[IDENT] Node: 'ord'
          |  |           \-[IDENT] Node: 'items'
          |  \-[IDENT] Node: 'item'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'ord'
             |  \-[IDENT] Node: 'id'
             \-[NUM_INT] Node: '11'

input: ->select item from Item item, Order ord
where ord.items[ size(ord.items) - 1 ] = item<-
14:13:25,308 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=29,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Item item ) ( RANGE Order ord ) ) ( select item ) ) ( where ( = ( [ ( . ord items ) ( - ( ( size ( exprList ( . ord items ) ) ) 1 ) ) item ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Item'
    |  |  |  \-[ALIAS] Node: 'item'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[IDENT] Node: 'Order'
    |  |     \-[ALIAS] Node: 'ord'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'item'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[INDEX_OP] Node: '['
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'ord'
          |  |  \-[IDENT] Node: 'items'
          |  \-[MINUS] Node: '-'
          |     +-[METHOD_CALL] Node: '('
          |     |  +-[IDENT] Node: 'size'
          |     |  \-[EXPR_LIST] Node: 'exprList'
          |     |     \-[DOT] Node: '.'
          |     |        +-[IDENT] Node: 'ord'
          |     |        \-[IDENT] Node: 'items'
          |     \-[NUM_INT] Node: '1'
          \-[IDENT] Node: 'item'

input: ->from eg.DomesticCat cat where upper(cat.name) like 'FRI%'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( like ( ( upper ( exprList ( . cat name ) ) ) 'FRI%' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'DomesticCat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[LIKE] Node: 'like'
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'upper'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[DOT] Node: '.'
          |        +-[IDENT] Node: 'cat'
          |        \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''FRI%''

input: ->select cust from Product prod, Store store
inner join store.customers cust
where prod.name = 'widget'
and store.location.name in ( 'Melbourne', 'Sydney' )
and prod = all elements(cust.currentOrder.lineItems)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Product prod ) ( RANGE Store store ) ( join inner ( . store customers ) cust ) ) ( select cust ) ) ( where ( and ( and ( = ( . prod name ) 'widget' ) ( in ( . ( . store location ) name ) ( inList 'Melbourne' 'Sydney' ) ) ) ( = prod ( all ( elements ( . ( . cust currentOrder ) lineItems ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Product'
    |  |  |  \-[ALIAS] Node: 'prod'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Store'
    |  |  |  \-[ALIAS] Node: 'store'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[INNER] Node: 'inner'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'store'
    |  |     |  \-[IDENT] Node: 'customers'
    |  |     \-[ALIAS] Node: 'cust'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'cust'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[AND] Node: 'and'
          |  +-[EQ] Node: '='
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'prod'
          |  |  |  \-[IDENT] Node: 'name'
          |  |  \-[QUOTED_STRING] Node: ''widget''
          |  \-[IN] Node: 'in'
          |     +-[DOT] Node: '.'
          |     |  +-[DOT] Node: '.'
          |     |  |  +-[IDENT] Node: 'store'
          |     |  |  \-[IDENT] Node: 'location'
          |     |  \-[IDENT] Node: 'name'
          |     \-[IN_LIST] Node: 'inList'
          |        +-[QUOTED_STRING] Node: ''Melbourne''
          |        \-[QUOTED_STRING] Node: ''Sydney''
          \-[EQ] Node: '='
             +-[IDENT] Node: 'prod'
             \-[ALL] Node: 'all'
                \-[ELEMENTS] Node: 'elements'
                   \-[DOT] Node: '.'
                      +-[DOT] Node: '.'
                      |  +-[IDENT] Node: 'cust'
                      |  \-[IDENT] Node: 'currentOrder'
                      \-[IDENT] Node: 'lineItems'

input: ->from eg.DomesticCat cat
order by cat.name asc, cat.weight desc, cat.birthdate<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( order ( . cat name ) asc ( . cat weight ) desc ( . cat birthdate ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'DomesticCat'
    |        \-[ALIAS] Node: 'cat'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'cat'
       |  \-[IDENT] Node: 'name'
       +-[ASCENDING] Node: 'asc'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'cat'
       |  \-[IDENT] Node: 'weight'
       +-[DESCENDING] Node: 'desc'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'cat'
          \-[IDENT] Node: 'birthdate'

input: ->select cat.color, sum(cat.weight), count(cat)
from eg.Cat cat group by cat.color<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select ( . cat color ) ( sum ( . cat weight ) ) ( count cat ) ) ) ( group ( . cat color ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'eg'
    |  |     |  \-[IDENT] Node: 'Cat'
    |  |     \-[ALIAS] Node: 'cat'
    |  \-[SELECT] Node: 'select'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'cat'
    |     |  \-[IDENT] Node: 'color'
    |     +-[AGGREGATE] Node: 'sum'
    |     |  \-[DOT] Node: '.'
    |     |     +-[IDENT] Node: 'cat'
    |     |     \-[IDENT] Node: 'weight'
    |     \-[COUNT] Node: 'count'
    |        \-[IDENT] Node: 'cat'
    \-[GROUP] Node: 'group'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'cat'
          \-[IDENT] Node: 'color'

input: ->select foo.id, avg( elements(foo.names) ), max( indices(foo.names) )
from eg.Foo foo group by foo.id<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Foo ) foo ) ) ( select ( . foo id ) ( avg ( elements ( . foo names ) ) ) ( max ( indices ( . foo names ) ) ) ) ) ( group ( . foo id ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'eg'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'foo'
    |     |  \-[IDENT] Node: 'id'
    |     +-[AGGREGATE] Node: 'avg'
    |     |  \-[ELEMENTS] Node: 'elements'
    |     |     \-[DOT] Node: '.'
    |     |        +-[IDENT] Node: 'foo'
    |     |        \-[IDENT] Node: 'names'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[INDICES] Node: 'indices'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'foo'
    |              \-[IDENT] Node: 'names'
    \-[GROUP] Node: 'group'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'foo'
          \-[IDENT] Node: 'id'

input: ->select cat.color, sum(cat.weight), count(cat)
from eg.Cat cat group by cat.color
having cat.color in (eg.Color.TABBY, eg.Color.BLACK)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select ( . cat color ) ( sum ( . cat weight ) ) ( count cat ) ) ) ( group ( . cat color ) ( having ( in ( . cat color ) ( inList ( . ( . eg Color ) TABBY ) ( . ( . eg Color ) BLACK ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'eg'
    |  |     |  \-[IDENT] Node: 'Cat'
    |  |     \-[ALIAS] Node: 'cat'
    |  \-[SELECT] Node: 'select'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'cat'
    |     |  \-[IDENT] Node: 'color'
    |     +-[AGGREGATE] Node: 'sum'
    |     |  \-[DOT] Node: '.'
    |     |     +-[IDENT] Node: 'cat'
    |     |     \-[IDENT] Node: 'weight'
    |     \-[COUNT] Node: 'count'
    |        \-[IDENT] Node: 'cat'
    \-[GROUP] Node: 'group'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'cat'
       |  \-[IDENT] Node: 'color'
       \-[HAVING] Node: 'having'
          \-[IN] Node: 'in'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'cat'
             |  \-[IDENT] Node: 'color'
             \-[IN_LIST] Node: 'inList'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'eg'
                |  |  \-[IDENT] Node: 'Color'
                |  \-[IDENT] Node: 'TABBY'
                \-[DOT] Node: '.'
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'eg'
                   |  \-[IDENT] Node: 'Color'
                   \-[IDENT] Node: 'BLACK'

input: ->select cat from eg.Cat cat join cat.kittens kitten
group by cat having avg(kitten.weight) > 100
order by count(kitten) asc, sum(kitten.weight) desc<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( join ( . cat kittens ) kitten ) ) ( select cat ) ) ( group cat ( having ( > ( avg ( . kitten weight ) ) 100 ) ) ) ( order ( count kitten ) asc ( sum ( . kitten weight ) ) desc ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'eg'
    |  |  |  |  \-[IDENT] Node: 'Cat'
    |  |  |  \-[ALIAS] Node: 'cat'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'cat'
    |  |     |  \-[IDENT] Node: 'kittens'
    |  |     \-[ALIAS] Node: 'kitten'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'cat'
    +-[GROUP] Node: 'group'
    |  +-[IDENT] Node: 'cat'
    |  \-[HAVING] Node: 'having'
    |     \-[GT] Node: '>'
    |        +-[AGGREGATE] Node: 'avg'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'kitten'
    |        |     \-[IDENT] Node: 'weight'
    |        \-[NUM_INT] Node: '100'
    \-[ORDER] Node: 'order'
       +-[COUNT] Node: 'count'
       |  \-[IDENT] Node: 'kitten'
       +-[ASCENDING] Node: 'asc'
       +-[AGGREGATE] Node: 'sum'
       |  \-[DOT] Node: '.'
       |     +-[IDENT] Node: 'kitten'
       |     \-[IDENT] Node: 'weight'
       \-[DESCENDING] Node: 'desc'

input: ->from eg.Cat as fatcat where fatcat.weight > (
select avg(cat.weight) from eg.DomesticCat cat)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) fatcat ) ) ) ( where ( > ( . fatcat weight ) ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ( select ( avg ( . cat weight ) ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'fatcat'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'fatcat'
          |  \-[IDENT] Node: 'weight'
          \-[QUERY] Node: 'query'
             \-[SELECT_FROM] Node: 'SELECT_FROM'
                +-[FROM] Node: 'from'
                |  \-[RANGE] Node: 'RANGE'
                |     +-[DOT] Node: '.'
                |     |  +-[IDENT] Node: 'eg'
                |     |  \-[IDENT] Node: 'DomesticCat'
                |     \-[ALIAS] Node: 'cat'
                \-[SELECT] Node: 'select'
                   \-[AGGREGATE] Node: 'avg'
                      \-[DOT] Node: '.'
                         +-[IDENT] Node: 'cat'
                         \-[IDENT] Node: 'weight'

input: ->from eg.DomesticCat as cat where cat.name = some (
select name.nickName from eg.Name as name)
<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( = ( . cat name ) ( some ( query ( SELECT_FROM ( from ( RANGE ( . eg Name ) name ) ) ( select ( . name nickName ) ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'DomesticCat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'name'
          \-[SOME] Node: 'some'
             \-[QUERY] Node: 'query'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   +-[FROM] Node: 'from'
                   |  \-[RANGE] Node: 'RANGE'
                   |     +-[DOT] Node: '.'
                   |     |  +-[IDENT] Node: 'eg'
                   |     |  \-[IDENT] Node: 'Name'
                   |     \-[ALIAS] Node: 'name'
                   \-[SELECT] Node: 'select'
                      \-[DOT] Node: '.'
                         +-[IDENT] Node: 'name'
                         \-[IDENT] Node: 'nickName'

input: ->from eg.Cat as cat where not exists (
from eg.Cat as mate where mate.mate = cat)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( not ( exists ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) mate ) ) ) ( where ( = ( . mate mate ) cat ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[NOT] Node: 'not'
          \-[EXISTS] Node: 'exists'
             \-[QUERY] Node: 'query'
                +-[SELECT_FROM] Node: 'SELECT_FROM'
                |  \-[FROM] Node: 'from'
                |     \-[RANGE] Node: 'RANGE'
                |        +-[DOT] Node: '.'
                |        |  +-[IDENT] Node: 'eg'
                |        |  \-[IDENT] Node: 'Cat'
                |        \-[ALIAS] Node: 'mate'
                \-[WHERE] Node: 'where'
                   \-[EQ] Node: '='
                      +-[DOT] Node: '.'
                      |  +-[IDENT] Node: 'mate'
                      |  \-[IDENT] Node: 'mate'
                      \-[IDENT] Node: 'cat'

input: ->from eg.DomesticCat as cat where cat.name not in (
select name.nickName from eg.Name as name)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( not in ( . cat name ) ( inList ( query ( SELECT_FROM ( from ( RANGE ( . eg Name ) name ) ) ( select ( . name nickName ) ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'DomesticCat'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[NOT_IN] Node: 'not in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'name'
          \-[IN_LIST] Node: 'inList'
             \-[QUERY] Node: 'query'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   +-[FROM] Node: 'from'
                   |  \-[RANGE] Node: 'RANGE'
                   |     +-[DOT] Node: '.'
                   |     |  +-[IDENT] Node: 'eg'
                   |     |  \-[IDENT] Node: 'Name'
                   |     \-[ALIAS] Node: 'name'
                   \-[SELECT] Node: 'select'
                      \-[DOT] Node: '.'
                         +-[IDENT] Node: 'name'
                         \-[IDENT] Node: 'nickName'

input: ->select ord.id, sum(price.amount), count(item)
from Order as ord join ord.lineItems as item
join item.product as product, Catalog as catalog
join catalog.prices as price
where ord.paid = false
and ord.customer = :customer
and price.product = product
and catalog.effectiveDate < sysdate
and catalog.effectiveDate >= all (
select cat.effectiveDate from Catalog as cat where cat.effectiveDate < sysdate)
group by ord
having sum(price.amount) > :minAmount
order by sum(price.amount) desc<-
14:13:25,464 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=2,col=6,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Order ord ) ( join ( . ord lineItems ) item ) ( join ( . item product ) product ) ( RANGE Catalog catalog ) ( join ( . catalog prices ) price ) ) ( select ( . ord id ) ( sum ( . price amount ) ) ( count item ) ) ) ( where ( and ( and ( and ( and ( = ( . ord paid ) false ) ( = ( . ord customer ) ( : customer ) ) ) ( = ( . price product ) product ) ) ( < ( . catalog effectiveDate ) sysdate ) ) ( >= ( . catalog effectiveDate ) ( all ( query ( SELECT_FROM ( from ( RANGE Catalog cat ) ) ( select ( . cat effectiveDate ) ) ) ( where ( < ( . cat effectiveDate ) sysdate ) ) ) ) ) ) ) ( group ord ( having ( > ( sum ( . price amount ) ) ( : minAmount ) ) ) ) ( order ( sum ( . price amount ) ) desc ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Order'
    |  |  |  \-[ALIAS] Node: 'ord'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'ord'
    |  |  |  |  \-[IDENT] Node: 'lineItems'
    |  |  |  \-[ALIAS] Node: 'item'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'item'
    |  |  |  |  \-[IDENT] Node: 'product'
    |  |  |  \-[ALIAS] Node: 'product'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Catalog'
    |  |  |  \-[ALIAS] Node: 'catalog'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'catalog'
    |  |     |  \-[IDENT] Node: 'prices'
    |  |     \-[ALIAS] Node: 'price'
    |  \-[SELECT] Node: 'select'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'ord'
    |     |  \-[IDENT] Node: 'id'
    |     +-[AGGREGATE] Node: 'sum'
    |     |  \-[DOT] Node: '.'
    |     |     +-[IDENT] Node: 'price'
    |     |     \-[IDENT] Node: 'amount'
    |     \-[COUNT] Node: 'count'
    |        \-[IDENT] Node: 'item'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[AND] Node: 'and'
    |     |  +-[AND] Node: 'and'
    |     |  |  +-[AND] Node: 'and'
    |     |  |  |  +-[EQ] Node: '='
    |     |  |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  |  +-[IDENT] Node: 'ord'
    |     |  |  |  |  |  \-[IDENT] Node: 'paid'
    |     |  |  |  |  \-[FALSE] Node: 'false'
    |     |  |  |  \-[EQ] Node: '='
    |     |  |  |     +-[DOT] Node: '.'
    |     |  |  |     |  +-[IDENT] Node: 'ord'
    |     |  |  |     |  \-[IDENT] Node: 'customer'
    |     |  |  |     \-[COLON] Node: ':'
    |     |  |  |        \-[IDENT] Node: 'customer'
    |     |  |  \-[EQ] Node: '='
    |     |  |     +-[DOT] Node: '.'
    |     |  |     |  +-[IDENT] Node: 'price'
    |     |  |     |  \-[IDENT] Node: 'product'
    |     |  |     \-[IDENT] Node: 'product'
    |     |  \-[LT] Node: '<'
    |     |     +-[DOT] Node: '.'
    |     |     |  +-[IDENT] Node: 'catalog'
    |     |     |  \-[IDENT] Node: 'effectiveDate'
    |     |     \-[IDENT] Node: 'sysdate'
    |     \-[GE] Node: '>='
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'catalog'
    |        |  \-[IDENT] Node: 'effectiveDate'
    |        \-[ALL] Node: 'all'
    |           \-[QUERY] Node: 'query'
    |              +-[SELECT_FROM] Node: 'SELECT_FROM'
    |              |  +-[FROM] Node: 'from'
    |              |  |  \-[RANGE] Node: 'RANGE'
    |              |  |     +-[IDENT] Node: 'Catalog'
    |              |  |     \-[ALIAS] Node: 'cat'
    |              |  \-[SELECT] Node: 'select'
    |              |     \-[DOT] Node: '.'
    |              |        +-[IDENT] Node: 'cat'
    |              |        \-[IDENT] Node: 'effectiveDate'
    |              \-[WHERE] Node: 'where'
    |                 \-[LT] Node: '<'
    |                    +-[DOT] Node: '.'
    |                    |  +-[IDENT] Node: 'cat'
    |                    |  \-[IDENT] Node: 'effectiveDate'
    |                    \-[IDENT] Node: 'sysdate'
    +-[GROUP] Node: 'group'
    |  +-[IDENT] Node: 'ord'
    |  \-[HAVING] Node: 'having'
    |     \-[GT] Node: '>'
    |        +-[AGGREGATE] Node: 'sum'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'price'
    |        |     \-[IDENT] Node: 'amount'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'minAmount'
    \-[ORDER] Node: 'order'
       +-[AGGREGATE] Node: 'sum'
       |  \-[DOT] Node: '.'
       |     +-[IDENT] Node: 'price'
       |     \-[IDENT] Node: 'amount'
       \-[DESCENDING] Node: 'desc'

input: ->select ord.id, sum(price.amount), count(item)
from Order as ord join ord.lineItems as item join item.product as product,
Catalog as catalog join catalog.prices as price
where ord.paid = false and ord.customer = :customer
and price.product = product and catalog = :currentCatalog
group by ord having sum(price.amount) > :minAmount
order by sum(price.amount) desc<-
14:13:25,497 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=2,col=6,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Order ord ) ( join ( . ord lineItems ) item ) ( join ( . item product ) product ) ( RANGE Catalog catalog ) ( join ( . catalog prices ) price ) ) ( select ( . ord id ) ( sum ( . price amount ) ) ( count item ) ) ) ( where ( and ( and ( and ( = ( . ord paid ) false ) ( = ( . ord customer ) ( : customer ) ) ) ( = ( . price product ) product ) ) ( = catalog ( : currentCatalog ) ) ) ) ( group ord ( having ( > ( sum ( . price amount ) ) ( : minAmount ) ) ) ) ( order ( sum ( . price amount ) ) desc ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Order'
    |  |  |  \-[ALIAS] Node: 'ord'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'ord'
    |  |  |  |  \-[IDENT] Node: 'lineItems'
    |  |  |  \-[ALIAS] Node: 'item'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'item'
    |  |  |  |  \-[IDENT] Node: 'product'
    |  |  |  \-[ALIAS] Node: 'product'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Catalog'
    |  |  |  \-[ALIAS] Node: 'catalog'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'catalog'
    |  |     |  \-[IDENT] Node: 'prices'
    |  |     \-[ALIAS] Node: 'price'
    |  \-[SELECT] Node: 'select'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'ord'
    |     |  \-[IDENT] Node: 'id'
    |     +-[AGGREGATE] Node: 'sum'
    |     |  \-[DOT] Node: '.'
    |     |     +-[IDENT] Node: 'price'
    |     |     \-[IDENT] Node: 'amount'
    |     \-[COUNT] Node: 'count'
    |        \-[IDENT] Node: 'item'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[AND] Node: 'and'
    |     |  +-[AND] Node: 'and'
    |     |  |  +-[EQ] Node: '='
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'ord'
    |     |  |  |  |  \-[IDENT] Node: 'paid'
    |     |  |  |  \-[FALSE] Node: 'false'
    |     |  |  \-[EQ] Node: '='
    |     |  |     +-[DOT] Node: '.'
    |     |  |     |  +-[IDENT] Node: 'ord'
    |     |  |     |  \-[IDENT] Node: 'customer'
    |     |  |     \-[COLON] Node: ':'
    |     |  |        \-[IDENT] Node: 'customer'
    |     |  \-[EQ] Node: '='
    |     |     +-[DOT] Node: '.'
    |     |     |  +-[IDENT] Node: 'price'
    |     |     |  \-[IDENT] Node: 'product'
    |     |     \-[IDENT] Node: 'product'
    |     \-[EQ] Node: '='
    |        +-[IDENT] Node: 'catalog'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'currentCatalog'
    +-[GROUP] Node: 'group'
    |  +-[IDENT] Node: 'ord'
    |  \-[HAVING] Node: 'having'
    |     \-[GT] Node: '>'
    |        +-[AGGREGATE] Node: 'sum'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'price'
    |        |     \-[IDENT] Node: 'amount'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'minAmount'
    \-[ORDER] Node: 'order'
       +-[AGGREGATE] Node: 'sum'
       |  \-[DOT] Node: '.'
       |     +-[IDENT] Node: 'price'
       |     \-[IDENT] Node: 'amount'
       \-[DESCENDING] Node: 'desc'

input: ->select count(payment), status.name 
from Payment as payment 
    join payment.currentStatus as status
    join payment.statusChanges as statusChange
where payment.status.name <> PaymentStatus.AWAITING_APPROVAL
    or (
        statusChange.timeStamp = ( 
            select max(change.timeStamp) 
            from PaymentStatusChange change 
            where change.payment = payment
        )
        and statusChange.user <> :currentUser
    )
group by status.name, status.sortOrder
order by status.sortOrder<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Payment payment ) ( join ( . payment currentStatus ) status ) ( join ( . payment statusChanges ) statusChange ) ) ( select ( count payment ) ( . status name ) ) ) ( where ( or ( <> ( . ( . payment status ) name ) ( . PaymentStatus AWAITING_APPROVAL ) ) ( and ( = ( . statusChange timeStamp ) ( query ( SELECT_FROM ( from ( RANGE PaymentStatusChange change ) ) ( select ( max ( . change timeStamp ) ) ) ) ( where ( = ( . change payment ) payment ) ) ) ) ( <> ( . statusChange user ) ( : currentUser ) ) ) ) ) ( group ( . status name ) ( . status sortOrder ) ) ( order ( . status sortOrder ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Payment'
    |  |  |  \-[ALIAS] Node: 'payment'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'payment'
    |  |  |  |  \-[IDENT] Node: 'currentStatus'
    |  |  |  \-[ALIAS] Node: 'status'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'payment'
    |  |     |  \-[IDENT] Node: 'statusChanges'
    |  |     \-[ALIAS] Node: 'statusChange'
    |  \-[SELECT] Node: 'select'
    |     +-[COUNT] Node: 'count'
    |     |  \-[IDENT] Node: 'payment'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'status'
    |        \-[IDENT] Node: 'name'
    +-[WHERE] Node: 'where'
    |  \-[OR] Node: 'or'
    |     +-[NE] Node: '<>'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[IDENT] Node: 'payment'
    |     |  |  |  \-[IDENT] Node: 'status'
    |     |  |  \-[IDENT] Node: 'name'
    |     |  \-[DOT] Node: '.'
    |     |     +-[IDENT] Node: 'PaymentStatus'
    |     |     \-[IDENT] Node: 'AWAITING_APPROVAL'
    |     \-[AND] Node: 'and'
    |        +-[EQ] Node: '='
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'statusChange'
    |        |  |  \-[IDENT] Node: 'timeStamp'
    |        |  \-[QUERY] Node: 'query'
    |        |     +-[SELECT_FROM] Node: 'SELECT_FROM'
    |        |     |  +-[FROM] Node: 'from'
    |        |     |  |  \-[RANGE] Node: 'RANGE'
    |        |     |  |     +-[IDENT] Node: 'PaymentStatusChange'
    |        |     |  |     \-[ALIAS] Node: 'change'
    |        |     |  \-[SELECT] Node: 'select'
    |        |     |     \-[AGGREGATE] Node: 'max'
    |        |     |        \-[DOT] Node: '.'
    |        |     |           +-[IDENT] Node: 'change'
    |        |     |           \-[IDENT] Node: 'timeStamp'
    |        |     \-[WHERE] Node: 'where'
    |        |        \-[EQ] Node: '='
    |        |           +-[DOT] Node: '.'
    |        |           |  +-[IDENT] Node: 'change'
    |        |           |  \-[IDENT] Node: 'payment'
    |        |           \-[IDENT] Node: 'payment'
    |        \-[NE] Node: '<>'
    |           +-[DOT] Node: '.'
    |           |  +-[IDENT] Node: 'statusChange'
    |           |  \-[IDENT] Node: 'user'
    |           \-[COLON] Node: ':'
    |              \-[IDENT] Node: 'currentUser'
    +-[GROUP] Node: 'group'
    |  +-[DOT] Node: '.'
    |  |  +-[IDENT] Node: 'status'
    |  |  \-[IDENT] Node: 'name'
    |  \-[DOT] Node: '.'
    |     +-[IDENT] Node: 'status'
    |     \-[IDENT] Node: 'sortOrder'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'status'
          \-[IDENT] Node: 'sortOrder'

input: ->select count(payment), status.name 
from Payment as payment
    join payment.currentStatus as status
where payment.status.name <> PaymentStatus.AWAITING_APPROVAL
    or payment.statusChanges[ maxIndex(payment.statusChanges) ].user <> :currentUser
group by status.name, status.sortOrder
order by status.sortOrder<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Payment payment ) ( join ( . payment currentStatus ) status ) ) ( select ( count payment ) ( . status name ) ) ) ( where ( or ( <> ( . ( . payment status ) name ) ( . PaymentStatus AWAITING_APPROVAL ) ) ( <> ( . ( [ ( . payment statusChanges ) ( ( maxIndex ( exprList ( . payment statusChanges ) ) ) ) user ) ( : currentUser ) ) ) ) ( group ( . status name ) ( . status sortOrder ) ) ( order ( . status sortOrder ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Payment'
    |  |  |  \-[ALIAS] Node: 'payment'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'payment'
    |  |     |  \-[IDENT] Node: 'currentStatus'
    |  |     \-[ALIAS] Node: 'status'
    |  \-[SELECT] Node: 'select'
    |     +-[COUNT] Node: 'count'
    |     |  \-[IDENT] Node: 'payment'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'status'
    |        \-[IDENT] Node: 'name'
    +-[WHERE] Node: 'where'
    |  \-[OR] Node: 'or'
    |     +-[NE] Node: '<>'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[IDENT] Node: 'payment'
    |     |  |  |  \-[IDENT] Node: 'status'
    |     |  |  \-[IDENT] Node: 'name'
    |     |  \-[DOT] Node: '.'
    |     |     +-[IDENT] Node: 'PaymentStatus'
    |     |     \-[IDENT] Node: 'AWAITING_APPROVAL'
    |     \-[NE] Node: '<>'
    |        +-[DOT] Node: '.'
    |        |  +-[INDEX_OP] Node: '['
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'payment'
    |        |  |  |  \-[IDENT] Node: 'statusChanges'
    |        |  |  \-[METHOD_CALL] Node: '('
    |        |  |     +-[IDENT] Node: 'maxIndex'
    |        |  |     \-[EXPR_LIST] Node: 'exprList'
    |        |  |        \-[DOT] Node: '.'
    |        |  |           +-[IDENT] Node: 'payment'
    |        |  |           \-[IDENT] Node: 'statusChanges'
    |        |  \-[IDENT] Node: 'user'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'currentUser'
    +-[GROUP] Node: 'group'
    |  +-[DOT] Node: '.'
    |  |  +-[IDENT] Node: 'status'
    |  |  \-[IDENT] Node: 'name'
    |  \-[DOT] Node: '.'
    |     +-[IDENT] Node: 'status'
    |     \-[IDENT] Node: 'sortOrder'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'status'
          \-[IDENT] Node: 'sortOrder'

input: ->select account, payment
from Account as account
    left outer join account.payments as payment
where :currentUser in elements(account.holder.users)
    and PaymentStatus.UNPAID = isNull(payment.currentStatus.name, PaymentStatus.UNPAID)
order by account.type.sortOrder, account.accountNumber, payment.dueDate<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Account account ) ( join left outer ( . account payments ) payment ) ) ( select account payment ) ) ( where ( and ( in ( : currentUser ) ( inList ( elements ( . ( . account holder ) users ) ) ) ) ( = ( . PaymentStatus UNPAID ) ( ( isNull ( exprList ( . ( . payment currentStatus ) name ) ( . PaymentStatus UNPAID ) ) ) ) ) ) ( order ( . ( . account type ) sortOrder ) ( . account accountNumber ) ( . payment dueDate ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Account'
    |  |  |  \-[ALIAS] Node: 'account'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[OUTER] Node: 'outer'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'account'
    |  |     |  \-[IDENT] Node: 'payments'
    |  |     \-[ALIAS] Node: 'payment'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'account'
    |     \-[IDENT] Node: 'payment'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[IN] Node: 'in'
    |     |  +-[COLON] Node: ':'
    |     |  |  \-[IDENT] Node: 'currentUser'
    |     |  \-[IN_LIST] Node: 'inList'
    |     |     \-[ELEMENTS] Node: 'elements'
    |     |        \-[DOT] Node: '.'
    |     |           +-[DOT] Node: '.'
    |     |           |  +-[IDENT] Node: 'account'
    |     |           |  \-[IDENT] Node: 'holder'
    |     |           \-[IDENT] Node: 'users'
    |     \-[EQ] Node: '='
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'PaymentStatus'
    |        |  \-[IDENT] Node: 'UNPAID'
    |        \-[METHOD_CALL] Node: '('
    |           +-[IDENT] Node: 'isNull'
    |           \-[EXPR_LIST] Node: 'exprList'
    |              +-[DOT] Node: '.'
    |              |  +-[DOT] Node: '.'
    |              |  |  +-[IDENT] Node: 'payment'
    |              |  |  \-[IDENT] Node: 'currentStatus'
    |              |  \-[IDENT] Node: 'name'
    |              \-[DOT] Node: '.'
    |                 +-[IDENT] Node: 'PaymentStatus'
    |                 \-[IDENT] Node: 'UNPAID'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[DOT] Node: '.'
       |  |  +-[IDENT] Node: 'account'
       |  |  \-[IDENT] Node: 'type'
       |  \-[IDENT] Node: 'sortOrder'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'account'
       |  \-[IDENT] Node: 'accountNumber'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'payment'
          \-[IDENT] Node: 'dueDate'

input: ->select account, payment
from Account as account
    join account.holder.users as user
    left outer join account.payments as payment
where :currentUser = user
    and PaymentStatus.UNPAID = isNull(payment.currentStatus.name, PaymentStatus.UNPAID)
order by account.type.sortOrder, account.accountNumber, payment.dueDate<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Account account ) ( join ( . ( . account holder ) users ) user ) ( join left outer ( . account payments ) payment ) ) ( select account payment ) ) ( where ( and ( = ( : currentUser ) user ) ( = ( . PaymentStatus UNPAID ) ( ( isNull ( exprList ( . ( . payment currentStatus ) name ) ( . PaymentStatus UNPAID ) ) ) ) ) ) ( order ( . ( . account type ) sortOrder ) ( . account accountNumber ) ( . payment dueDate ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[IDENT] Node: 'Account'
    |  |  |  \-[ALIAS] Node: 'account'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[IDENT] Node: 'account'
    |  |  |  |  |  \-[IDENT] Node: 'holder'
    |  |  |  |  \-[IDENT] Node: 'users'
    |  |  |  \-[ALIAS] Node: 'user'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[OUTER] Node: 'outer'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'account'
    |  |     |  \-[IDENT] Node: 'payments'
    |  |     \-[ALIAS] Node: 'payment'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'account'
    |     \-[IDENT] Node: 'payment'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[COLON] Node: ':'
    |     |  |  \-[IDENT] Node: 'currentUser'
    |     |  \-[IDENT] Node: 'user'
    |     \-[EQ] Node: '='
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'PaymentStatus'
    |        |  \-[IDENT] Node: 'UNPAID'
    |        \-[METHOD_CALL] Node: '('
    |           +-[IDENT] Node: 'isNull'
    |           \-[EXPR_LIST] Node: 'exprList'
    |              +-[DOT] Node: '.'
    |              |  +-[DOT] Node: '.'
    |              |  |  +-[IDENT] Node: 'payment'
    |              |  |  \-[IDENT] Node: 'currentStatus'
    |              |  \-[IDENT] Node: 'name'
    |              \-[DOT] Node: '.'
    |                 +-[IDENT] Node: 'PaymentStatus'
    |                 \-[IDENT] Node: 'UNPAID'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[DOT] Node: '.'
       |  |  +-[IDENT] Node: 'account'
       |  |  \-[IDENT] Node: 'type'
       |  \-[IDENT] Node: 'sortOrder'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'account'
       |  \-[IDENT] Node: 'accountNumber'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'payment'
          \-[IDENT] Node: 'dueDate'

input: ->select new org.hibernate.test.S(s.count, s.address)
from s in class Simple<-
14:13:25,706 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=34,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Simple s ) ) ( select ( ( ( . ( . ( . org hibernate ) test ) S ) ( . s count ) ( . s address ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[IDENT] Node: 'Simple'
       |     \-[ALIAS] Node: 's'
       \-[SELECT] Node: 'select'
          \-[CONSTRUCTOR] Node: '('
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'S'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 's'
             |  \-[IDENT] Node: 'count'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 's'
                \-[IDENT] Node: 'address'

input: ->select s.name, sysdate, trunc(s.pay), round(s.pay) from s in class Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Simple s ) ) ( select ( . s name ) sysdate ( ( trunc ( exprList ( . s pay ) ) ) ( ( round ( exprList ( . s pay ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[IDENT] Node: 'Simple'
       |     \-[ALIAS] Node: 's'
       \-[SELECT] Node: 'select'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 's'
          |  \-[IDENT] Node: 'name'
          +-[IDENT] Node: 'sysdate'
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'trunc'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[DOT] Node: '.'
          |        +-[IDENT] Node: 's'
          |        \-[IDENT] Node: 'pay'
          \-[METHOD_CALL] Node: '('
             +-[IDENT] Node: 'round'
             \-[EXPR_LIST] Node: 'exprList'
                \-[DOT] Node: '.'
                   +-[IDENT] Node: 's'
                   \-[IDENT] Node: 'pay'

input: ->select round(s.pay, 2) from s<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE s ) ) ( select ( ( round ( exprList ( . s pay ) 2 ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     \-[IDENT] Node: 's'
       \-[SELECT] Node: 'select'
          \-[METHOD_CALL] Node: '('
             +-[IDENT] Node: 'round'
             \-[EXPR_LIST] Node: 'exprList'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 's'
                |  \-[IDENT] Node: 'pay'
                \-[NUM_INT] Node: '2'

input: ->select abs(round(s.pay)) from s in class Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Simple s ) ) ( select ( ( abs ( exprList ( ( round ( exprList ( . s pay ) ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[IDENT] Node: 'Simple'
       |     \-[ALIAS] Node: 's'
       \-[SELECT] Node: 'select'
          \-[METHOD_CALL] Node: '('
             +-[IDENT] Node: 'abs'
             \-[EXPR_LIST] Node: 'exprList'
                \-[METHOD_CALL] Node: '('
                   +-[IDENT] Node: 'round'
                   \-[EXPR_LIST] Node: 'exprList'
                      \-[DOT] Node: '.'
                         +-[IDENT] Node: 's'
                         \-[IDENT] Node: 'pay'

input: ->select trunc(round(sysdate)) from s in class Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE Simple s ) ) ( select ( ( trunc ( exprList ( ( round ( exprList sysdate ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[IDENT] Node: 'Simple'
       |     \-[ALIAS] Node: 's'
       \-[SELECT] Node: 'select'
          \-[METHOD_CALL] Node: '('
             +-[IDENT] Node: 'trunc'
             \-[EXPR_LIST] Node: 'exprList'
                \-[METHOD_CALL] Node: '('
                   +-[IDENT] Node: 'round'
                   \-[EXPR_LIST] Node: 'exprList'
                      \-[IDENT] Node: 'sysdate'

input: ->from Order ord where ord.items[0].id = 1234<-
14:13:25,708 DEBUG HqlParser:347 - weakKeywords() : new LT(1) token - ["Order",<108> previously: <41>,line=1,col=6,possibleID=true]
AST  :   ( query ( SELECT_FROM ( from ( RANGE Order ord ) ) ) ( where ( = ( . ( [ ( . ord items ) 0 ) id ) 1234 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'Order'
    |        \-[ALIAS] Node: 'ord'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'ord'
          |  |  |  \-[IDENT] Node: 'items'
          |  |  \-[NUM_INT] Node: '0'
          |  \-[IDENT] Node: 'id'
          \-[NUM_INT] Node: '1234'

input: ->select round(s.pay, 2) from s<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE s ) ) ( select ( ( round ( exprList ( . s pay ) 2 ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     \-[IDENT] Node: 's'
       \-[SELECT] Node: 'select'
          \-[METHOD_CALL] Node: '('
             +-[IDENT] Node: 'round'
             \-[EXPR_LIST] Node: 'exprList'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 's'
                |  \-[IDENT] Node: 'pay'
                \-[NUM_INT] Node: '2'

input: ->FROM eg.mypackage.Cat qat, com.toadstool.Foo f<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ( RANGE ( . ( . com toadstool ) Foo ) f ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'FROM'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'eg'
          |  |  |  \-[IDENT] Node: 'mypackage'
          |  |  \-[IDENT] Node: 'Cat'
          |  \-[ALIAS] Node: 'qat'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'com'
             |  |  \-[IDENT] Node: 'toadstool'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'f'

input: ->FROM eg.mypackage.Cat qat, org.jabberwocky.Dipstick<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ( RANGE ( . ( . org jabberwocky ) Dipstick ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'FROM'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'eg'
          |  |  |  \-[IDENT] Node: 'mypackage'
          |  |  \-[IDENT] Node: 'Cat'
          |  \-[ALIAS] Node: 'qat'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'org'
                |  \-[IDENT] Node: 'jabberwocky'
                \-[IDENT] Node: 'Dipstick'

input: ->FROM eg.mypackage.Cat qat, com.toadstool.Foo f join net.sf.blurb.Blurb<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ( RANGE ( . ( . com toadstool ) Foo ) f ) ( join ( . ( . ( . net sf ) blurb ) Blurb ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'FROM'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'eg'
          |  |  |  \-[IDENT] Node: 'mypackage'
          |  |  \-[IDENT] Node: 'Cat'
          |  \-[ALIAS] Node: 'qat'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'com'
          |  |  |  \-[IDENT] Node: 'toadstool'
          |  |  \-[IDENT] Node: 'Foo'
          |  \-[ALIAS] Node: 'f'
          \-[JOIN] Node: 'join'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'net'
                |  |  \-[IDENT] Node: 'sf'
                |  \-[IDENT] Node: 'blurb'
                \-[IDENT] Node: 'Blurb'

input: ->FROM eg.mypackage.Cat qat  left join com.multijoin.JoinORama , com.toadstool.Foo f join net.sf.blurb.Blurb<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ( join left ( . ( . com multijoin ) JoinORama ) ) ( RANGE ( . ( . com toadstool ) Foo ) f ) ( join ( . ( . ( . net sf ) blurb ) Blurb ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'FROM'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'eg'
          |  |  |  \-[IDENT] Node: 'mypackage'
          |  |  \-[IDENT] Node: 'Cat'
          |  \-[ALIAS] Node: 'qat'
          +-[JOIN] Node: 'join'
          |  +-[LEFT] Node: 'left'
          |  \-[DOT] Node: '.'
          |     +-[DOT] Node: '.'
          |     |  +-[IDENT] Node: 'com'
          |     |  \-[IDENT] Node: 'multijoin'
          |     \-[IDENT] Node: 'JoinORama'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'com'
          |  |  |  \-[IDENT] Node: 'toadstool'
          |  |  \-[IDENT] Node: 'Foo'
          |  \-[ALIAS] Node: 'f'
          \-[JOIN] Node: 'join'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'net'
                |  |  \-[IDENT] Node: 'sf'
                |  \-[IDENT] Node: 'blurb'
                \-[IDENT] Node: 'Blurb'

input: ->SELECT f FROM eg.mypackage.Cat qat, com.toadstool.Foo f join net.sf.blurb.Blurb<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ( RANGE ( . ( . com toadstool ) Foo ) f ) ( join ( . ( . ( . net sf ) blurb ) Blurb ) ) ) ( SELECT f ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'FROM'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[IDENT] Node: 'eg'
       |  |  |  |  \-[IDENT] Node: 'mypackage'
       |  |  |  \-[IDENT] Node: 'Cat'
       |  |  \-[ALIAS] Node: 'qat'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[IDENT] Node: 'com'
       |  |  |  |  \-[IDENT] Node: 'toadstool'
       |  |  |  \-[IDENT] Node: 'Foo'
       |  |  \-[ALIAS] Node: 'f'
       |  \-[JOIN] Node: 'join'
       |     \-[DOT] Node: '.'
       |        +-[DOT] Node: '.'
       |        |  +-[DOT] Node: '.'
       |        |  |  +-[IDENT] Node: 'net'
       |        |  |  \-[IDENT] Node: 'sf'
       |        |  \-[IDENT] Node: 'blurb'
       |        \-[IDENT] Node: 'Blurb'
       \-[SELECT] Node: 'SELECT'
          \-[IDENT] Node: 'f'

input: ->SELECT DISTINCT bar FROM eg.mypackage.Cat qat  left join com.multijoin.JoinORama as bar, com.toadstool.Foo f join net.sf.blurb.Blurb<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ( join left ( . ( . com multijoin ) JoinORama ) bar ) ( RANGE ( . ( . com toadstool ) Foo ) f ) ( join ( . ( . ( . net sf ) blurb ) Blurb ) ) ) ( SELECT DISTINCT bar ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'FROM'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[IDENT] Node: 'eg'
       |  |  |  |  \-[IDENT] Node: 'mypackage'
       |  |  |  \-[IDENT] Node: 'Cat'
       |  |  \-[ALIAS] Node: 'qat'
       |  +-[JOIN] Node: 'join'
       |  |  +-[LEFT] Node: 'left'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[IDENT] Node: 'com'
       |  |  |  |  \-[IDENT] Node: 'multijoin'
       |  |  |  \-[IDENT] Node: 'JoinORama'
       |  |  \-[ALIAS] Node: 'bar'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[IDENT] Node: 'com'
       |  |  |  |  \-[IDENT] Node: 'toadstool'
       |  |  |  \-[IDENT] Node: 'Foo'
       |  |  \-[ALIAS] Node: 'f'
       |  \-[JOIN] Node: 'join'
       |     \-[DOT] Node: '.'
       |        +-[DOT] Node: '.'
       |        |  +-[DOT] Node: '.'
       |        |  |  +-[IDENT] Node: 'net'
       |        |  |  \-[IDENT] Node: 'sf'
       |        |  \-[IDENT] Node: 'blurb'
       |        \-[IDENT] Node: 'Blurb'
       \-[SELECT] Node: 'SELECT'
          +-[DISTINCT] Node: 'DISTINCT'
          \-[IDENT] Node: 'bar'

input: ->SELECT count(*) FROM eg.mypackage.Cat qat<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ( SELECT ( count * ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'FROM'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[IDENT] Node: 'eg'
       |     |  |  \-[IDENT] Node: 'mypackage'
       |     |  \-[IDENT] Node: 'Cat'
       |     \-[ALIAS] Node: 'qat'
       \-[SELECT] Node: 'SELECT'
          \-[COUNT] Node: 'count'
             \-[ROW_STAR] Node: '*'

input: ->SELECT avg(qat.weight) FROM eg.mypackage.Cat qat<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ( SELECT ( avg ( . qat weight ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'FROM'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[IDENT] Node: 'eg'
       |     |  |  \-[IDENT] Node: 'mypackage'
       |     |  \-[IDENT] Node: 'Cat'
       |     \-[ALIAS] Node: 'qat'
       \-[SELECT] Node: 'SELECT'
          \-[AGGREGATE] Node: 'avg'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'qat'
                \-[IDENT] Node: 'weight'

input: ->FROM eg.mypackage.Cat qat group by qat.breed<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( group ( . qat breed ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'FROM'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'eg'
    |        |  |  \-[IDENT] Node: 'mypackage'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'qat'
    \-[GROUP] Node: 'group'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'qat'
          \-[IDENT] Node: 'breed'

input: ->FROM eg.mypackage.Cat qat group by qat.breed, qat.eyecolor<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( group ( . qat breed ) ( . qat eyecolor ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'FROM'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'eg'
    |        |  |  \-[IDENT] Node: 'mypackage'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'qat'
    \-[GROUP] Node: 'group'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'qat'
       |  \-[IDENT] Node: 'breed'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'qat'
          \-[IDENT] Node: 'eyecolor'

input: ->from eg.Cat as tinycat where fatcat.weight < 3.1415<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) tinycat ) ) ) ( where ( < ( . fatcat weight ) 3.1415 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'tinycat'
    \-[WHERE] Node: 'where'
       \-[LT] Node: '<'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'fatcat'
          |  \-[IDENT] Node: 'weight'
          \-[NUM_DOUBLE] Node: '3.1415'

input: ->from eg.Cat as enormouscat where fatcat.weight > 3.1415e3<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) enormouscat ) ) ) ( where ( > ( . fatcat weight ) 3.1415e3 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'eg'
    |        |  \-[IDENT] Node: 'Cat'
    |        \-[ALIAS] Node: 'enormouscat'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'fatcat'
          |  \-[IDENT] Node: 'weight'
          \-[NUM_DOUBLE] Node: '3.1415e3'

input: ->select new Foo(count(bar)) from bar<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE bar ) ) ( select ( ( Foo ( count bar ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     \-[IDENT] Node: 'bar'
       \-[SELECT] Node: 'select'
          \-[CONSTRUCTOR] Node: '('
             +-[IDENT] Node: 'Foo'
             \-[COUNT] Node: 'count'
                \-[IDENT] Node: 'bar'

input: ->select new Foo(count(bar),(select count(*) from doofus d where d.gob = 'fat' )) from bar<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE bar ) ) ( select ( ( Foo ( count bar ) ( query ( SELECT_FROM ( from ( RANGE doofus d ) ) ( select ( count * ) ) ) ( where ( = ( . d gob ) 'fat' ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     \-[IDENT] Node: 'bar'
       \-[SELECT] Node: 'select'
          \-[CONSTRUCTOR] Node: '('
             +-[IDENT] Node: 'Foo'
             +-[COUNT] Node: 'count'
             |  \-[IDENT] Node: 'bar'
             \-[QUERY] Node: 'query'
                +-[SELECT_FROM] Node: 'SELECT_FROM'
                |  +-[FROM] Node: 'from'
                |  |  \-[RANGE] Node: 'RANGE'
                |  |     +-[IDENT] Node: 'doofus'
                |  |     \-[ALIAS] Node: 'd'
                |  \-[SELECT] Node: 'select'
                |     \-[COUNT] Node: 'count'
                |        \-[ROW_STAR] Node: '*'
                \-[WHERE] Node: 'where'
                   \-[EQ] Node: '='
                      +-[DOT] Node: '.'
                      |  +-[IDENT] Node: 'd'
                      |  \-[IDENT] Node: 'gob'
                      \-[QUOTED_STRING] Node: ''fat''

input: ->from foo where foo.bar in ('a' , 'b', 'c')<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE foo ) ) ) ( where ( in ( . foo bar ) ( inList 'a' 'b' 'c' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'bar'
          \-[IN_LIST] Node: 'inList'
             +-[QUOTED_STRING] Node: ''a''
             +-[QUOTED_STRING] Node: ''b''
             \-[QUOTED_STRING] Node: ''c''

input: ->from foo where foo.bar not in ('a' , 'b', 'c')<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE foo ) ) ) ( where ( not in ( . foo bar ) ( inList 'a' 'b' 'c' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[NOT_IN] Node: 'not in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'bar'
          \-[IN_LIST] Node: 'inList'
             +-[QUOTED_STRING] Node: ''a''
             +-[QUOTED_STRING] Node: ''b''
             \-[QUOTED_STRING] Node: ''c''

input: ->from foo where foo.bar = 123 + foo.baz * foo.not<-
14:13:26,061 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=45,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE foo ) ) ) ( where ( = ( . foo bar ) ( + 123 ( * ( . foo baz ) ( . foo not ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'bar'
          \-[PLUS] Node: '+'
             +-[NUM_INT] Node: '123'
             \-[STAR] Node: '*'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'foo'
                |  \-[IDENT] Node: 'baz'
                \-[DOT] Node: '.'
                   +-[IDENT] Node: 'foo'
                   \-[IDENT] Node: 'not'

input: ->from foo where foo.bar like 'testzzz' || foo.baz or foo.bar in ('duh', 'gob')<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE foo ) ) ) ( where ( or ( like ( . foo bar ) ( || concat ( concatList 'testzzz' ( . foo baz ) ) ) ) ( in ( . foo bar ) ( inList 'duh' 'gob' ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[LIKE] Node: 'like'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'bar'
          |  \-[METHOD_CALL] Node: '||'
          |     +-[IDENT] Node: 'concat'
          |     \-[EXPR_LIST] Node: 'concatList'
          |        +-[QUOTED_STRING] Node: ''testzzz''
          |        \-[DOT] Node: '.'
          |           +-[IDENT] Node: 'foo'
          |           \-[IDENT] Node: 'baz'
          \-[IN] Node: 'in'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'foo'
             |  \-[IDENT] Node: 'bar'
             \-[IN_LIST] Node: 'inList'
                +-[QUOTED_STRING] Node: ''duh''
                \-[QUOTED_STRING] Node: ''gob''

input: ->select foo from foo in class org.hibernate.test.Foo, fee in class org.hibernate.test.Fee where foo.dependent = fee order by foo.string desc, foo.component.count asc, fee.id<-
14:13:26,086 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) fee ) ) ( select foo ) ) ( where ( = ( . foo dependent ) fee ) ) ( order ( . foo string ) desc ( . ( . foo component ) count ) asc ( . fee id ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Foo'
    |  |  |  \-[ALIAS] Node: 'foo'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Fee'
    |  |     \-[ALIAS] Node: 'fee'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'foo'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'foo'
    |     |  \-[IDENT] Node: 'dependent'
    |     \-[IDENT] Node: 'fee'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'foo'
       |  \-[IDENT] Node: 'string'
       +-[DESCENDING] Node: 'desc'
       +-[DOT] Node: '.'
       |  +-[DOT] Node: '.'
       |  |  +-[IDENT] Node: 'foo'
       |  |  \-[IDENT] Node: 'component'
       |  \-[WEIRD_IDENT] Node: 'count'
       +-[ASCENDING] Node: 'asc'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'fee'
          \-[IDENT] Node: 'id'

input: ->select foo.foo, foo.dependent from foo in class org.hibernate.test.Foo order by foo.foo.string desc, foo.component.count asc, foo.dependent.id<-
14:13:26,112 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo foo ) ( . foo dependent ) ) ) ( order ( . ( . foo foo ) string ) desc ( . ( . foo component ) count ) asc ( . ( . foo dependent ) id ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'foo'
    |     |  \-[IDENT] Node: 'foo'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'dependent'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[DOT] Node: '.'
       |  |  +-[IDENT] Node: 'foo'
       |  |  \-[IDENT] Node: 'foo'
       |  \-[IDENT] Node: 'string'
       +-[DESCENDING] Node: 'desc'
       +-[DOT] Node: '.'
       |  +-[DOT] Node: '.'
       |  |  +-[IDENT] Node: 'foo'
       |  |  \-[IDENT] Node: 'component'
       |  \-[WEIRD_IDENT] Node: 'count'
       +-[ASCENDING] Node: 'asc'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'dependent'
          \-[IDENT] Node: 'id'

input: ->select foo from foo in class org.hibernate.test.Foo order by foo.dependent.id, foo.dependent.fi<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select foo ) ) ( order ( . ( . foo dependent ) id ) ( . ( . foo dependent ) fi ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'foo'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[DOT] Node: '.'
       |  |  +-[IDENT] Node: 'foo'
       |  |  \-[IDENT] Node: 'dependent'
       |  \-[IDENT] Node: 'id'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'dependent'
          \-[IDENT] Node: 'fi'

input: ->SELECT one FROM one IN CLASS org.hibernate.test.One ORDER BY one.value ASC<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ) ( SELECT one ) ) ( ORDER ( . one value ) ASC ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'One'
    |  |     \-[ALIAS] Node: 'one'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'one'
    \-[ORDER] Node: 'ORDER'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'one'
       |  \-[IDENT] Node: 'value'
       \-[ASCENDING] Node: 'ASC'

input: ->SELECT many.one FROM many IN CLASS org.hibernate.test.Many ORDER BY many.one.value ASC, many.one.id<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Many ) many ) ) ( SELECT ( . many one ) ) ) ( ORDER ( . ( . many one ) value ) ASC ( . ( . many one ) id ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Many'
    |  |     \-[ALIAS] Node: 'many'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'many'
    |        \-[IDENT] Node: 'one'
    \-[ORDER] Node: 'ORDER'
       +-[DOT] Node: '.'
       |  +-[DOT] Node: '.'
       |  |  +-[IDENT] Node: 'many'
       |  |  \-[IDENT] Node: 'one'
       |  \-[IDENT] Node: 'value'
       +-[ASCENDING] Node: 'ASC'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'many'
          |  \-[IDENT] Node: 'one'
          \-[IDENT] Node: 'id'

input: ->select foo.id from org.hibernate.test.Foo foo where foo.joinedProp = 'foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo id ) ) ) ( where ( = ( . foo joinedProp ) 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'id'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'joinedProp'
          \-[QUOTED_STRING] Node: ''foo''

input: ->from org.hibernate.test.Foo foo inner join fetch foo.foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( join inner fetch ( . foo foo ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Foo'
          |  \-[ALIAS] Node: 'foo'
          \-[JOIN] Node: 'join'
             +-[INNER] Node: 'inner'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'foo'
                \-[IDENT] Node: 'foo'

input: ->from org.hibernate.test.Baz baz left outer join fetch baz.fooToGlarch<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left outer fetch ( . baz fooToGlarch ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[OUTER] Node: 'outer'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'fooToGlarch'

input: ->select foo.foo.foo.string from foo in class org.hibernate.test.Foo where foo.foo = 'bar'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . ( . foo foo ) foo ) string ) ) ) ( where ( = ( . foo foo ) 'bar' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'foo'
    |        |  |  \-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'string'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'foo'
          \-[QUOTED_STRING] Node: ''bar''

input: ->select foo.foo.foo.foo.string from foo in class org.hibernate.test.Foo where foo.foo.foo = 'bar'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . ( . ( . foo foo ) foo ) foo ) string ) ) ) ( where ( = ( . ( . foo foo ) foo ) 'bar' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'foo'
    |        |  |  |  \-[IDENT] Node: 'foo'
    |        |  |  \-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'string'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'foo'
          \-[QUOTED_STRING] Node: ''bar''

input: ->select foo.foo.foo.string from foo in class org.hibernate.test.Foo where foo.foo.foo.foo.string = 'bar'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . ( . foo foo ) foo ) string ) ) ) ( where ( = ( . ( . ( . ( . foo foo ) foo ) foo ) string ) 'bar' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'foo'
    |        |  |  \-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'string'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'foo'
          |  |  |  |  \-[IDENT] Node: 'foo'
          |  |  |  \-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'string'
          \-[QUOTED_STRING] Node: ''bar''

input: ->select foo.string from foo in class org.hibernate.test.Foo where foo.foo.foo = 'bar' and foo.foo.foo.foo = 'baz'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo string ) ) ) ( where ( and ( = ( . ( . foo foo ) foo ) 'bar' ) ( = ( . ( . ( . foo foo ) foo ) foo ) 'baz' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'string'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'foo'
          |  |  |  \-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'foo'
          |  \-[QUOTED_STRING] Node: ''bar''
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'foo'
             |  |  |  \-[IDENT] Node: 'foo'
             |  |  \-[IDENT] Node: 'foo'
             |  \-[IDENT] Node: 'foo'
             \-[QUOTED_STRING] Node: ''baz''

input: ->select foo.string from foo in class org.hibernate.test.Foo where foo.foo.foo.foo.string = 'a' and foo.foo.string = 'b'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo string ) ) ) ( where ( and ( = ( . ( . ( . ( . foo foo ) foo ) foo ) string ) 'a' ) ( = ( . ( . foo foo ) string ) 'b' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'string'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[DOT] Node: '.'
          |  |  |  |  |  +-[IDENT] Node: 'foo'
          |  |  |  |  |  \-[IDENT] Node: 'foo'
          |  |  |  |  \-[IDENT] Node: 'foo'
          |  |  |  \-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'string'
          |  \-[QUOTED_STRING] Node: ''a''
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'foo'
             |  |  \-[IDENT] Node: 'foo'
             |  \-[IDENT] Node: 'string'
             \-[QUOTED_STRING] Node: ''b''

input: ->from org.hibernate.test.Foo as foo where foo.component.glarch.name is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( is not null ( . ( . ( . foo component ) glarch ) name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'foo'
             |  |  \-[IDENT] Node: 'component'
             |  \-[IDENT] Node: 'glarch'
             \-[IDENT] Node: 'name'

input: ->from org.hibernate.test.Foo as foo left outer join foo.component.glarch as glarch where glarch.name = 'foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( join left outer ( . ( . foo component ) glarch ) glarch ) ) ) ( where ( = ( . glarch name ) 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Foo'
    |     |  \-[ALIAS] Node: 'foo'
    |     \-[JOIN] Node: 'join'
    |        +-[LEFT] Node: 'left'
    |        +-[OUTER] Node: 'outer'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'foo'
    |        |  |  \-[IDENT] Node: 'component'
    |        |  \-[IDENT] Node: 'glarch'
    |        \-[ALIAS] Node: 'glarch'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'glarch'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''foo''

input: ->from org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Foo'

input: ->from org.hibernate.test.Foo foo left outer join foo.foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( join left outer ( . foo foo ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Foo'
          |  \-[ALIAS] Node: 'foo'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[OUTER] Node: 'outer'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'foo'
                \-[IDENT] Node: 'foo'

input: ->from org.hibernate.test.Foo, org.hibernate.test.Bar<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  \-[DOT] Node: '.'
          |     +-[DOT] Node: '.'
          |     |  +-[DOT] Node: '.'
          |     |  |  +-[IDENT] Node: 'org'
          |     |  |  \-[IDENT] Node: 'hibernate'
          |     |  \-[IDENT] Node: 'test'
          |     \-[IDENT] Node: 'Foo'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Bar'

input: ->from org.hibernate.test.Baz baz left join baz.fooToGlarch, org.hibernate.test.Bar bar join bar.foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left ( . baz fooToGlarch ) ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join ( . bar foo ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          +-[JOIN] Node: 'join'
          |  +-[LEFT] Node: 'left'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'baz'
          |     \-[IDENT] Node: 'fooToGlarch'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Bar'
          |  \-[ALIAS] Node: 'bar'
          \-[JOIN] Node: 'join'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'bar'
                \-[IDENT] Node: 'foo'

input: ->from org.hibernate.test.Baz baz left join baz.fooToGlarch join baz.fooSet<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left ( . baz fooToGlarch ) ) ( join ( . baz fooSet ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          +-[JOIN] Node: 'join'
          |  +-[LEFT] Node: 'left'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'baz'
          |     \-[IDENT] Node: 'fooToGlarch'
          \-[JOIN] Node: 'join'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'fooSet'

input: ->from org.hibernate.test.Baz baz left join baz.fooToGlarch join fetch baz.fooSet foo left join fetch foo.foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left ( . baz fooToGlarch ) ) ( join fetch ( . baz fooSet ) foo ) ( join left fetch ( . foo foo ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          +-[JOIN] Node: 'join'
          |  +-[LEFT] Node: 'left'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'baz'
          |     \-[IDENT] Node: 'fooToGlarch'
          +-[JOIN] Node: 'join'
          |  +-[FETCH] Node: 'fetch'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'baz'
          |  |  \-[IDENT] Node: 'fooSet'
          |  \-[ALIAS] Node: 'foo'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'foo'
                \-[IDENT] Node: 'foo'

input: ->from foo in class org.hibernate.test.Foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc<-
14:13:26,394 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( and ( = ( . foo string ) 'osama bin laden' ) ( = ( . foo boolean ) true ) ) ) ( order ( . foo string ) asc ( . ( . foo component ) count ) desc ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'foo'
    |     |  |  \-[IDENT] Node: 'string'
    |     |  \-[QUOTED_STRING] Node: ''osama bin laden''
    |     \-[EQ] Node: '='
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'boolean'
    |        \-[TRUE] Node: 'true'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'foo'
       |  \-[IDENT] Node: 'string'
       +-[ASCENDING] Node: 'asc'
       +-[DOT] Node: '.'
       |  +-[DOT] Node: '.'
       |  |  +-[IDENT] Node: 'foo'
       |  |  \-[IDENT] Node: 'component'
       |  \-[WEIRD_IDENT] Node: 'count'
       \-[DESCENDING] Node: 'desc'

input: ->from foo in class org.hibernate.test.Foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc<-
14:13:26,411 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo string ) 'osama bin laden' ) ) ( order ( . foo string ) asc ( . ( . foo component ) count ) desc ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'foo'
    |     |  \-[IDENT] Node: 'string'
    |     \-[QUOTED_STRING] Node: ''osama bin laden''
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'foo'
       |  \-[IDENT] Node: 'string'
       +-[ASCENDING] Node: 'asc'
       +-[DOT] Node: '.'
       |  +-[DOT] Node: '.'
       |  |  +-[IDENT] Node: 'foo'
       |  |  \-[IDENT] Node: 'component'
       |  \-[WEIRD_IDENT] Node: 'count'
       \-[DESCENDING] Node: 'desc'

input: ->select foo.foo from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Foo'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'foo'
             \-[IDENT] Node: 'foo'

input: ->from foo in class org.hibernate.test.Foo where foo.component.count is null order by foo.component.count<-
14:13:26,444 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
14:13:26,444 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( is null ( . ( . foo component ) count ) ) ) ( order ( . ( . foo component ) count ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    +-[WHERE] Node: 'where'
    |  \-[IS_NULL] Node: 'is null'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'component'
    |        \-[WEIRD_IDENT] Node: 'count'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'component'
          \-[WEIRD_IDENT] Node: 'count'

input: ->from foo in class org.hibernate.test.Foo where foo.component.name='foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . ( . foo component ) name ) 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'component'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''foo''

input: ->select distinct foo.component.name, foo.component.name from foo in class org.hibernate.test.Foo where foo.component.name='foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select distinct ( . ( . foo component ) name ) ( . ( . foo component ) name ) ) ) ( where ( = ( . ( . foo component ) name ) 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     +-[DISTINCT] Node: 'distinct'
    |     +-[DOT] Node: '.'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'foo'
    |     |  |  \-[IDENT] Node: 'component'
    |     |  \-[IDENT] Node: 'name'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'component'
    |        \-[IDENT] Node: 'name'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'component'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''foo''

input: ->select distinct foo.component.name, foo.id from foo in class org.hibernate.test.Foo where foo.component.name='foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select distinct ( . ( . foo component ) name ) ( . foo id ) ) ) ( where ( = ( . ( . foo component ) name ) 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     +-[DISTINCT] Node: 'distinct'
    |     +-[DOT] Node: '.'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'foo'
    |     |  |  \-[IDENT] Node: 'component'
    |     |  \-[IDENT] Node: 'name'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'id'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'component'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''foo''

input: ->from foo in class org.hibernate.test.Foo where foo.id=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo id ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

input: ->from foo in class org.hibernate.test.Foo where foo.key=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo key ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'key'
          \-[PARAM] Node: '?'

input: ->select foo.foo from foo in class org.hibernate.test.Foo where foo.string='fizard'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo foo ) ) ) ( where ( = ( . foo string ) 'fizard' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'string'
          \-[QUOTED_STRING] Node: ''fizard''

input: ->from foo in class org.hibernate.test.Foo where foo.component.subcomponent.name='bar'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . ( . ( . foo component ) subcomponent ) name ) 'bar' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'foo'
          |  |  |  \-[IDENT] Node: 'component'
          |  |  \-[IDENT] Node: 'subcomponent'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''bar''

input: ->select foo.foo from foo in class org.hibernate.test.Foo where foo.foo.id=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo foo ) ) ) ( where ( = ( . ( . foo foo ) id ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

input: ->from foo in class org.hibernate.test.Foo where foo.foo = ?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo foo ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'foo'
          \-[PARAM] Node: '?'

input: ->from bar in class org.hibernate.test.Bar where bar.string='a string' or bar.string='a string'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) ( where ( or ( = ( . bar string ) 'a string' ) ( = ( . bar string ) 'a string' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Bar'
    |        \-[ALIAS] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'bar'
          |  |  \-[IDENT] Node: 'string'
          |  \-[QUOTED_STRING] Node: ''a string''
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'bar'
             |  \-[IDENT] Node: 'string'
             \-[QUOTED_STRING] Node: ''a string''

input: ->select foo.component.name, elements(foo.component.importantDates) from foo in class org.hibernate.test.Foo where foo.foo.id=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . foo component ) name ) ( elements ( . ( . foo component ) importantDates ) ) ) ) ( where ( = ( . ( . foo foo ) id ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     +-[DOT] Node: '.'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'foo'
    |     |  |  \-[IDENT] Node: 'component'
    |     |  \-[IDENT] Node: 'name'
    |     \-[ELEMENTS] Node: 'elements'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[IDENT] Node: 'foo'
    |           |  \-[IDENT] Node: 'component'
    |           \-[IDENT] Node: 'importantDates'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

input: ->select max(elements(foo.component.importantDates)) from foo in class org.hibernate.test.Foo group by foo.id<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( max ( elements ( . ( . foo component ) importantDates ) ) ) ) ) ( group ( . foo id ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[ELEMENTS] Node: 'elements'
    |           \-[DOT] Node: '.'
    |              +-[DOT] Node: '.'
    |              |  +-[IDENT] Node: 'foo'
    |              |  \-[IDENT] Node: 'component'
    |              \-[IDENT] Node: 'importantDates'
    \-[GROUP] Node: 'group'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'foo'
          \-[IDENT] Node: 'id'

input: ->select foo.foo.foo.foo from foo in class org.hibernate.test.Foo, foo2 in class org.hibernate.test.Foo where foo = foo2.foo and not not ( not foo.string='fizard' ) and foo2.string between 'a' and (foo.foo.string) and ( foo2.string in ( 'fiz', 'blah') or 1=1 )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo2 ) ) ( select ( . ( . ( . foo foo ) foo ) foo ) ) ) ( where ( and ( and ( and ( = foo ( . foo2 foo ) ) ( {not}{not}{not}= ( . foo string ) 'fizard' ) ) ( between ( . foo2 string ) 'a' ( . ( . foo foo ) string ) ) ) ( or ( in ( . foo2 string ) ( inList 'fiz' 'blah' ) ) ( = 1 1 ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Foo'
    |  |  |  \-[ALIAS] Node: 'foo'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo2'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'foo'
    |        |  |  \-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[AND] Node: 'and'
          |  +-[AND] Node: 'and'
          |  |  +-[EQ] Node: '='
          |  |  |  +-[IDENT] Node: 'foo'
          |  |  |  \-[DOT] Node: '.'
          |  |  |     +-[IDENT] Node: 'foo2'
          |  |  |     \-[IDENT] Node: 'foo'
          |  |  \-[NE] Node: '{not}{not}{not}='
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'foo'
          |  |     |  \-[IDENT] Node: 'string'
          |  |     \-[QUOTED_STRING] Node: ''fizard''
          |  \-[BETWEEN] Node: 'between'
          |     +-[DOT] Node: '.'
          |     |  +-[IDENT] Node: 'foo2'
          |     |  \-[IDENT] Node: 'string'
          |     +-[QUOTED_STRING] Node: ''a''
          |     \-[DOT] Node: '.'
          |        +-[DOT] Node: '.'
          |        |  +-[IDENT] Node: 'foo'
          |        |  \-[IDENT] Node: 'foo'
          |        \-[IDENT] Node: 'string'
          \-[OR] Node: 'or'
             +-[IN] Node: 'in'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'foo2'
             |  |  \-[IDENT] Node: 'string'
             |  \-[IN_LIST] Node: 'inList'
             |     +-[QUOTED_STRING] Node: ''fiz''
             |     \-[QUOTED_STRING] Node: ''blah''
             \-[EQ] Node: '='
                +-[NUM_INT] Node: '1'
                \-[NUM_INT] Node: '1'

input: ->from foo in class org.hibernate.test.Foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo string ) 'from BoogieDown  -tinsel town  =!@#$^&*())' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'string'
          \-[QUOTED_STRING] Node: ''from BoogieDown  -tinsel town  =!@#$^&*())''

input: ->from foo in class org.hibernate.test.Foo where not foo.string='foo''bar'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( {not}= ( . foo string ) 'foo''bar' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[NE] Node: '{not}='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'string'
          \-[QUOTED_STRING] Node: ''foo''bar''

input: ->from foo in class org.hibernate.test.Foo where foo.component.glarch.next is null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( is null ( . ( . ( . foo component ) glarch ) next ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[IS_NULL] Node: 'is null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'foo'
             |  |  \-[IDENT] Node: 'component'
             |  \-[IDENT] Node: 'glarch'
             \-[IDENT] Node: 'next'

input: -> from bar in class org.hibernate.test.Bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'<-
14:13:26,686 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
14:13:26,687 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) ( where ( and ( and ( = ( . ( . bar baz ) count ) 667 ) ( != ( . ( . bar baz ) count ) 123 ) ) ( {not}= ( . ( . bar baz ) name ) '1-E-1' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Bar'
    |        \-[ALIAS] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[AND] Node: 'and'
          |  +-[EQ] Node: '='
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'bar'
          |  |  |  |  \-[IDENT] Node: 'baz'
          |  |  |  \-[WEIRD_IDENT] Node: 'count'
          |  |  \-[NUM_INT] Node: '667'
          |  \-[NE] Node: '!='
          |     +-[DOT] Node: '.'
          |     |  +-[DOT] Node: '.'
          |     |  |  +-[IDENT] Node: 'bar'
          |     |  |  \-[IDENT] Node: 'baz'
          |     |  \-[WEIRD_IDENT] Node: 'count'
          |     \-[NUM_INT] Node: '123'
          \-[NE] Node: '{not}='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'bar'
             |  |  \-[IDENT] Node: 'baz'
             |  \-[IDENT] Node: 'name'
             \-[QUOTED_STRING] Node: ''1-E-1''

input: -> from i in class org.hibernate.test.Bar where i.baz.name='Bazza'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) i ) ) ) ( where ( = ( . ( . i baz ) name ) 'Bazza' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Bar'
    |        \-[ALIAS] Node: 'i'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'i'
          |  |  \-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''Bazza''

input: ->select count(distinct foo.foo) from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( count distinct ( . foo foo ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Foo'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             +-[DISTINCT] Node: 'distinct'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'foo'
                \-[IDENT] Node: 'foo'

input: ->select count(foo.foo.boolean) from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( count ( . ( . foo foo ) boolean ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Foo'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'foo'
                |  \-[IDENT] Node: 'foo'
                \-[IDENT] Node: 'boolean'

input: ->select count(*), foo.int from foo in class org.hibernate.test.Foo group by foo.int<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( count * ) ( . foo int ) ) ) ( group ( . foo int ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     +-[COUNT] Node: 'count'
    |     |  \-[ROW_STAR] Node: '*'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'int'
    \-[GROUP] Node: 'group'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'foo'
          \-[IDENT] Node: 'int'

input: ->select sum(foo.foo.int) from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( sum ( . ( . foo foo ) int ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Foo'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          \-[AGGREGATE] Node: 'sum'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'foo'
                |  \-[IDENT] Node: 'foo'
                \-[IDENT] Node: 'int'

input: ->select count(foo) from foo in class org.hibernate.test.Foo where foo.id=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( count foo ) ) ) ( where ( = ( . foo id ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

input: ->from foo in class org.hibernate.test.Foo where foo.boolean = ?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo boolean ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'boolean'
          \-[PARAM] Node: '?'

input: ->select new Foo(fo.x) from org.hibernate.test.Fo fo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) fo ) ) ( select ( ( Foo ( . fo x ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Fo'
       |     \-[ALIAS] Node: 'fo'
       \-[SELECT] Node: 'select'
          \-[CONSTRUCTOR] Node: '('
             +-[IDENT] Node: 'Foo'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'fo'
                \-[IDENT] Node: 'x'

input: ->select new Foo(fo.integer) from org.hibernate.test.Foo fo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) fo ) ) ( select ( ( Foo ( . fo integer ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Foo'
       |     \-[ALIAS] Node: 'fo'
       \-[SELECT] Node: 'select'
          \-[CONSTRUCTOR] Node: '('
             +-[IDENT] Node: 'Foo'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'fo'
                \-[IDENT] Node: 'integer'

input: ->select new Foo(fo.x) from org.hibernate.test.Foo fo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) fo ) ) ( select ( ( Foo ( . fo x ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Foo'
       |     \-[ALIAS] Node: 'fo'
       \-[SELECT] Node: 'select'
          \-[CONSTRUCTOR] Node: '('
             +-[IDENT] Node: 'Foo'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'fo'
                \-[IDENT] Node: 'x'

input: ->select foo.long, foo.component.name, foo, foo.foo from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo long ) ( . ( . foo component ) name ) foo ( . foo foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Foo'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'long'
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'component'
          |  \-[IDENT] Node: 'name'
          +-[IDENT] Node: 'foo'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'foo'
             \-[IDENT] Node: 'foo'

input: ->select avg(foo.float), max(foo.component.name), count(distinct foo.id) from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( avg ( . foo float ) ) ( max ( . ( . foo component ) name ) ) ( count distinct ( . foo id ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Foo'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          +-[AGGREGATE] Node: 'avg'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'foo'
          |     \-[IDENT] Node: 'float'
          +-[AGGREGATE] Node: 'max'
          |  \-[DOT] Node: '.'
          |     +-[DOT] Node: '.'
          |     |  +-[IDENT] Node: 'foo'
          |     |  \-[IDENT] Node: 'component'
          |     \-[IDENT] Node: 'name'
          \-[COUNT] Node: 'count'
             +-[DISTINCT] Node: 'distinct'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'foo'
                \-[IDENT] Node: 'id'

input: ->select foo.long, foo.component, foo, foo.foo from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo long ) ( . foo component ) foo ( . foo foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Foo'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'long'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'component'
          +-[IDENT] Node: 'foo'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'foo'
             \-[IDENT] Node: 'foo'

input: ->from o in class org.hibernate.test.MoreStuff<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) MoreStuff ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'MoreStuff'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Many<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Many ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Many'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fee<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fee'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Qux<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Qux'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Y<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Y ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Y'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fumm<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fumm ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fumm'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.X<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'X'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Simple'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Location<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Location ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Location'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Holder<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Holder'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Part<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Part ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Part'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Baz'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Vetoer<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Vetoer ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Vetoer'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Sortable<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Sortable ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Sortable'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Contained<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Contained ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Contained'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Stuff<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Stuff'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Immutable<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Immutable ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Immutable'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Container<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Container'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.X$XX<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X$XX ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'X$XX'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.One<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'One'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fo'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Glarch<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Glarch'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fum<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fum'
             \-[ALIAS] Node: 'o'

input: ->from n in class org.hibernate.test.Holder<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Holder'
             \-[ALIAS] Node: 'n'

input: ->from n in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Baz'
             \-[ALIAS] Node: 'n'

input: ->from n in class org.hibernate.test.Bar<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Bar'
             \-[ALIAS] Node: 'n'

input: ->from n in class org.hibernate.test.Glarch<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Glarch'
             \-[ALIAS] Node: 'n'

input: ->from n in class org.hibernate.test.Holder where n.name is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n ) ) ) ( where ( is not null ( . n name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Holder'
    |        \-[ALIAS] Node: 'n'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n'
             \-[IDENT] Node: 'name'

input: ->from n in class org.hibernate.test.Baz where n.name is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n ) ) ) ( where ( is not null ( . n name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Baz'
    |        \-[ALIAS] Node: 'n'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n'
             \-[IDENT] Node: 'name'

input: ->from n in class org.hibernate.test.Bar where n.name is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n ) ) ) ( where ( is not null ( . n name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Bar'
    |        \-[ALIAS] Node: 'n'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n'
             \-[IDENT] Node: 'name'

input: ->from n in class org.hibernate.test.Glarch where n.name is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n ) ) ) ( where ( is not null ( . n name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Glarch'
    |        \-[ALIAS] Node: 'n'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n'
             \-[IDENT] Node: 'name'

input: ->from n in class org.hibernate.test.Holder<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Holder'
             \-[ALIAS] Node: 'n'

input: ->from n in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Baz'
             \-[ALIAS] Node: 'n'

input: ->from n in class org.hibernate.test.Bar<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Bar'
             \-[ALIAS] Node: 'n'

input: ->from n in class org.hibernate.test.Glarch<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Glarch'
             \-[ALIAS] Node: 'n'

input: ->from n0 in class org.hibernate.test.Holder, n1 in class org.hibernate.test.Holder where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Holder'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Holder'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Baz, n1 in class org.hibernate.test.Holder where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Holder'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Bar, n1 in class org.hibernate.test.Holder where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Bar'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Holder'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Glarch, n1 in class org.hibernate.test.Holder where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Glarch'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Holder'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Holder, n1 in class org.hibernate.test.Baz where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Holder'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Baz'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Baz, n1 in class org.hibernate.test.Baz where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Baz'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Bar, n1 in class org.hibernate.test.Baz where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Bar'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Baz'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Glarch, n1 in class org.hibernate.test.Baz where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Glarch'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Baz'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Holder, n1 in class org.hibernate.test.Bar where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Holder'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Bar'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Baz, n1 in class org.hibernate.test.Bar where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Bar'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Bar, n1 in class org.hibernate.test.Bar where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Bar'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Bar'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Glarch, n1 in class org.hibernate.test.Bar where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Glarch'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Bar'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Holder, n1 in class org.hibernate.test.Glarch where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Holder'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Glarch'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Baz, n1 in class org.hibernate.test.Glarch where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Glarch'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Bar, n1 in class org.hibernate.test.Glarch where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Bar'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Glarch'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n0 in class org.hibernate.test.Glarch, n1 in class org.hibernate.test.Glarch where n0.name = n1.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Glarch'
    |     |  \-[ALIAS] Node: 'n0'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Glarch'
    |        \-[ALIAS] Node: 'n1'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n0'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'n1'
             \-[IDENT] Node: 'name'

input: ->from n in class org.hibernate.test.Holder where n.name = :name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n ) ) ) ( where ( = ( . n name ) ( : name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Holder'
    |        \-[ALIAS] Node: 'n'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'n'
          |  \-[IDENT] Node: 'name'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'name'

input: ->from o in class org.hibernate.test.MoreStuff<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) MoreStuff ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'MoreStuff'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Many<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Many ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Many'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fee<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fee'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Qux<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Qux'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Y<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Y ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Y'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fumm<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fumm ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fumm'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.X<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'X'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Simple'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Location<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Location ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Location'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Holder<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Holder'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Part<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Part ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Part'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Baz'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Vetoer<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Vetoer ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Vetoer'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Sortable<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Sortable ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Sortable'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Contained<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Contained ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Contained'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Stuff<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Stuff'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Immutable<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Immutable ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Immutable'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Container<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Container'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.X$XX<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X$XX ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'X$XX'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.One<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'One'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fo'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Glarch<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Glarch'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fum<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fum'
             \-[ALIAS] Node: 'o'

input: ->select baz.code, min(baz.count) from baz in class org.hibernate.test.Baz group by baz.code<-
14:13:27,412 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=25,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( . baz code ) ( min ( . baz count ) ) ) ) ( group ( . baz code ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'select'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'baz'
    |     |  \-[IDENT] Node: 'code'
    |     \-[AGGREGATE] Node: 'min'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'baz'
    |           \-[IDENT] Node: 'count'
    \-[GROUP] Node: 'group'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'baz'
          \-[IDENT] Node: 'code'

input: ->selecT baz from baz in class org.hibernate.test.Baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( selecT baz ) ) ( where ( or ( is not null ( [ ( . baz stringDateMap ) 'foo' ) ) ( = ( [ ( . baz stringDateMap ) 'bar' ) ? ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'selecT'
    |     \-[IDENT] Node: 'baz'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[IS_NOT_NULL] Node: 'is not null'
          |  \-[INDEX_OP] Node: '['
          |     +-[DOT] Node: '.'
          |     |  +-[IDENT] Node: 'baz'
          |     |  \-[IDENT] Node: 'stringDateMap'
          |     \-[QUOTED_STRING] Node: ''foo''
          \-[EQ] Node: '='
             +-[INDEX_OP] Node: '['
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'baz'
             |  |  \-[IDENT] Node: 'stringDateMap'
             |  \-[QUOTED_STRING] Node: ''bar''
             \-[PARAM] Node: '?'

input: ->select baz from baz in class org.hibernate.test.Baz where baz.stringDateMap['now'] is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select baz ) ) ( where ( is not null ( [ ( . baz stringDateMap ) 'now' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'baz'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[INDEX_OP] Node: '['
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'baz'
             |  \-[IDENT] Node: 'stringDateMap'
             \-[QUOTED_STRING] Node: ''now''

input: ->select baz from baz in class org.hibernate.test.Baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select baz ) ) ( where ( and ( is not null ( [ ( . baz stringDateMap ) 'now' ) ) ( < ( [ ( . baz stringDateMap ) 'big bang' ) ( [ ( . baz stringDateMap ) 'now' ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'baz'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[IS_NOT_NULL] Node: 'is not null'
          |  \-[INDEX_OP] Node: '['
          |     +-[DOT] Node: '.'
          |     |  +-[IDENT] Node: 'baz'
          |     |  \-[IDENT] Node: 'stringDateMap'
          |     \-[QUOTED_STRING] Node: ''now''
          \-[LT] Node: '<'
             +-[INDEX_OP] Node: '['
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'baz'
             |  |  \-[IDENT] Node: 'stringDateMap'
             |  \-[QUOTED_STRING] Node: ''big bang''
             \-[INDEX_OP] Node: '['
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'baz'
                |  \-[IDENT] Node: 'stringDateMap'
                \-[QUOTED_STRING] Node: ''now''

input: ->select index(date) from org.hibernate.test.Baz baz join baz.stringDateMap date<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz stringDateMap ) date ) ) ( select ( ( index ( exprList date ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Baz'
       |  |  \-[ALIAS] Node: 'baz'
       |  \-[JOIN] Node: 'join'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'baz'
       |     |  \-[IDENT] Node: 'stringDateMap'
       |     \-[ALIAS] Node: 'date'
       \-[SELECT] Node: 'select'
          \-[METHOD_CALL] Node: '('
             +-[IDENT] Node: 'index'
             \-[EXPR_LIST] Node: 'exprList'
                \-[IDENT] Node: 'date'

input: ->from foo in class org.hibernate.test.Foo where foo.integer not between 1 and 5 and foo.string not in ('cde', 'abc') and foo.string is not null and foo.integer<=3<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( and ( and ( and ( not between ( . foo integer ) 1 5 ) ( not in ( . foo string ) ( inList 'cde' 'abc' ) ) ) ( is not null ( . foo string ) ) ) ( <= ( . foo integer ) 3 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[AND] Node: 'and'
          |  +-[AND] Node: 'and'
          |  |  +-[NOT_BETWEEN] Node: 'not between'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'foo'
          |  |  |  |  \-[IDENT] Node: 'integer'
          |  |  |  +-[NUM_INT] Node: '1'
          |  |  |  \-[NUM_INT] Node: '5'
          |  |  \-[NOT_IN] Node: 'not in'
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'foo'
          |  |     |  \-[IDENT] Node: 'string'
          |  |     \-[IN_LIST] Node: 'inList'
          |  |        +-[QUOTED_STRING] Node: ''cde''
          |  |        \-[QUOTED_STRING] Node: ''abc''
          |  \-[IS_NOT_NULL] Node: 'is not null'
          |     \-[DOT] Node: '.'
          |        +-[IDENT] Node: 'foo'
          |        \-[IDENT] Node: 'string'
          \-[LE] Node: '<='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'foo'
             |  \-[IDENT] Node: 'integer'
             \-[NUM_INT] Node: '3'

input: ->from org.hibernate.test.Baz baz inner join baz.collectionComponent.nested.foos foo where foo.string is null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join inner ( . ( . ( . baz collectionComponent ) nested ) foos ) foo ) ) ) ( where ( is null ( . foo string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'baz'
    |     \-[JOIN] Node: 'join'
    |        +-[INNER] Node: 'inner'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'baz'
    |        |  |  |  \-[IDENT] Node: 'collectionComponent'
    |        |  |  \-[IDENT] Node: 'nested'
    |        |  \-[IDENT] Node: 'foos'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[IS_NULL] Node: 'is null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'foo'
             \-[IDENT] Node: 'string'

input: ->from org.hibernate.test.Baz baz inner join baz.fooSet where '1' in (from baz.fooSet foo where foo.string is not null)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join inner ( . baz fooSet ) ) ) ) ( where ( in '1' ( inList ( query ( SELECT_FROM ( from ( RANGE ( . baz fooSet ) foo ) ) ) ( where ( is not null ( . foo string ) ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'baz'
    |     \-[JOIN] Node: 'join'
    |        +-[INNER] Node: 'inner'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'baz'
    |           \-[IDENT] Node: 'fooSet'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[QUOTED_STRING] Node: ''1''
          \-[IN_LIST] Node: 'inList'
             \-[QUERY] Node: 'query'
                +-[SELECT_FROM] Node: 'SELECT_FROM'
                |  \-[FROM] Node: 'from'
                |     \-[RANGE] Node: 'RANGE'
                |        +-[DOT] Node: '.'
                |        |  +-[IDENT] Node: 'baz'
                |        |  \-[IDENT] Node: 'fooSet'
                |        \-[ALIAS] Node: 'foo'
                \-[WHERE] Node: 'where'
                   \-[IS_NOT_NULL] Node: 'is not null'
                      \-[DOT] Node: '.'
                         +-[IDENT] Node: 'foo'
                         \-[IDENT] Node: 'string'

input: ->from org.hibernate.test.Baz baz where 'a' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ) ( where ( and ( in 'a' ( inList ( elements ( . ( . ( . baz collectionComponent ) nested ) foos ) ) ) ) ( in 1.0 ( inList ( elements ( . ( . ( . baz collectionComponent ) nested ) floats ) ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Baz'
    |        \-[ALIAS] Node: 'baz'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[IN] Node: 'in'
          |  +-[QUOTED_STRING] Node: ''a''
          |  \-[IN_LIST] Node: 'inList'
          |     \-[ELEMENTS] Node: 'elements'
          |        \-[DOT] Node: '.'
          |           +-[DOT] Node: '.'
          |           |  +-[DOT] Node: '.'
          |           |  |  +-[IDENT] Node: 'baz'
          |           |  |  \-[IDENT] Node: 'collectionComponent'
          |           |  \-[IDENT] Node: 'nested'
          |           \-[IDENT] Node: 'foos'
          \-[IN] Node: 'in'
             +-[NUM_DOUBLE] Node: '1.0'
             \-[IN_LIST] Node: 'inList'
                \-[ELEMENTS] Node: 'elements'
                   \-[DOT] Node: '.'
                      +-[DOT] Node: '.'
                      |  +-[DOT] Node: '.'
                      |  |  +-[IDENT] Node: 'baz'
                      |  |  \-[IDENT] Node: 'collectionComponent'
                      |  \-[IDENT] Node: 'nested'
                      \-[IDENT] Node: 'floats'

input: ->from org.hibernate.test.Foo foo join foo.foo where foo.foo in ('1','2','3')<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( join ( . foo foo ) ) ) ) ( where ( in ( . foo foo ) ( inList '1' '2' '3' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Foo'
    |     |  \-[ALIAS] Node: 'foo'
    |     \-[JOIN] Node: 'join'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'foo'
    |           \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'foo'
          \-[IN_LIST] Node: 'inList'
             +-[QUOTED_STRING] Node: ''1''
             +-[QUOTED_STRING] Node: ''2''
             \-[QUOTED_STRING] Node: ''3''

input: ->select foo.foo from org.hibernate.test.Foo foo where foo.foo in ('1','2','3')<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo foo ) ) ) ( where ( in ( . foo foo ) ( inList '1' '2' '3' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'foo'
          \-[IN_LIST] Node: 'inList'
             +-[QUOTED_STRING] Node: ''1''
             +-[QUOTED_STRING] Node: ''2''
             \-[QUOTED_STRING] Node: ''3''

input: ->select foo.foo.string from org.hibernate.test.Foo foo where foo.foo in ('1','2','3')<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . foo foo ) string ) ) ) ( where ( in ( . foo foo ) ( inList '1' '2' '3' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'string'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'foo'
          \-[IN_LIST] Node: 'inList'
             +-[QUOTED_STRING] Node: ''1''
             +-[QUOTED_STRING] Node: ''2''
             \-[QUOTED_STRING] Node: ''3''

input: ->select foo.foo.string from org.hibernate.test.Foo foo where foo.foo.string in ('1','2','3')<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . foo foo ) string ) ) ) ( where ( in ( . ( . foo foo ) string ) ( inList '1' '2' '3' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'string'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'string'
          \-[IN_LIST] Node: 'inList'
             +-[QUOTED_STRING] Node: ''1''
             +-[QUOTED_STRING] Node: ''2''
             \-[QUOTED_STRING] Node: ''3''

input: ->select foo.foo.long from org.hibernate.test.Foo foo where foo.foo.string in ('1','2','3')<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . foo foo ) long ) ) ) ( where ( in ( . ( . foo foo ) string ) ( inList '1' '2' '3' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'long'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'string'
          \-[IN_LIST] Node: 'inList'
             +-[QUOTED_STRING] Node: ''1''
             +-[QUOTED_STRING] Node: ''2''
             \-[QUOTED_STRING] Node: ''3''

input: ->select count(*) from org.hibernate.test.Foo foo where foo.foo.string in ('1','2','3') or foo.foo.long in (1,2,3)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( count * ) ) ) ( where ( or ( in ( . ( . foo foo ) string ) ( inList '1' '2' '3' ) ) ( in ( . ( . foo foo ) long ) ( inList 1 2 3 ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[IN] Node: 'in'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'foo'
          |  |  |  \-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'string'
          |  \-[IN_LIST] Node: 'inList'
          |     +-[QUOTED_STRING] Node: ''1''
          |     +-[QUOTED_STRING] Node: ''2''
          |     \-[QUOTED_STRING] Node: ''3''
          \-[IN] Node: 'in'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'foo'
             |  |  \-[IDENT] Node: 'foo'
             |  \-[IDENT] Node: 'long'
             \-[IN_LIST] Node: 'inList'
                +-[NUM_INT] Node: '1'
                +-[NUM_INT] Node: '2'
                \-[NUM_INT] Node: '3'

input: ->select count(*) from org.hibernate.test.Foo foo where foo.foo.string in ('1','2','3') group by foo.foo.long<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( count * ) ) ) ( where ( in ( . ( . foo foo ) string ) ( inList '1' '2' '3' ) ) ) ( group ( . ( . foo foo ) long ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    +-[WHERE] Node: 'where'
    |  \-[IN] Node: 'in'
    |     +-[DOT] Node: '.'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'foo'
    |     |  |  \-[IDENT] Node: 'foo'
    |     |  \-[IDENT] Node: 'string'
    |     \-[IN_LIST] Node: 'inList'
    |        +-[QUOTED_STRING] Node: ''1''
    |        +-[QUOTED_STRING] Node: ''2''
    |        \-[QUOTED_STRING] Node: ''3''
    \-[GROUP] Node: 'group'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'foo'
          \-[IDENT] Node: 'long'

input: ->from org.hibernate.test.Foo foo1 left join foo1.foo foo2 left join foo2.foo where foo1.string is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo1 ) ( join left ( . foo1 foo ) foo2 ) ( join left ( . foo2 foo ) ) ) ) ( where ( is not null ( . foo1 string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Foo'
    |     |  \-[ALIAS] Node: 'foo1'
    |     +-[JOIN] Node: 'join'
    |     |  +-[LEFT] Node: 'left'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'foo1'
    |     |  |  \-[IDENT] Node: 'foo'
    |     |  \-[ALIAS] Node: 'foo2'
    |     \-[JOIN] Node: 'join'
    |        +-[LEFT] Node: 'left'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'foo2'
    |           \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'foo1'
             \-[IDENT] Node: 'string'

input: ->from org.hibernate.test.Foo foo1 left join foo1.foo.foo where foo1.string is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo1 ) ( join left ( . ( . foo1 foo ) foo ) ) ) ) ( where ( is not null ( . foo1 string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Foo'
    |     |  \-[ALIAS] Node: 'foo1'
    |     \-[JOIN] Node: 'join'
    |        +-[LEFT] Node: 'left'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[IDENT] Node: 'foo1'
    |           |  \-[IDENT] Node: 'foo'
    |           \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'foo1'
             \-[IDENT] Node: 'string'

input: ->from org.hibernate.test.Foo foo1 left join foo1.foo foo2 left join foo1.foo.foo foo3 where foo1.string is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo1 ) ( join left ( . foo1 foo ) foo2 ) ( join left ( . ( . foo1 foo ) foo ) foo3 ) ) ) ( where ( is not null ( . foo1 string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Foo'
    |     |  \-[ALIAS] Node: 'foo1'
    |     +-[JOIN] Node: 'join'
    |     |  +-[LEFT] Node: 'left'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'foo1'
    |     |  |  \-[IDENT] Node: 'foo'
    |     |  \-[ALIAS] Node: 'foo2'
    |     \-[JOIN] Node: 'join'
    |        +-[LEFT] Node: 'left'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'foo1'
    |        |  |  \-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'foo'
    |        \-[ALIAS] Node: 'foo3'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'foo1'
             \-[IDENT] Node: 'string'

input: ->select foo.formula from org.hibernate.test.Foo foo where foo.formula > 0<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo formula ) ) ) ( where ( > ( . foo formula ) 0 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'formula'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'formula'
          \-[NUM_INT] Node: '0'

input: ->from org.hibernate.test.Foo as foo join foo.foo as foo2 where foo2.id >'a' or foo2.id <'a'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( join ( . foo foo ) foo2 ) ) ) ( where ( or ( > ( . foo2 id ) 'a' ) ( < ( . foo2 id ) 'a' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Foo'
    |     |  \-[ALIAS] Node: 'foo'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'foo'
    |        \-[ALIAS] Node: 'foo2'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[GT] Node: '>'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'foo2'
          |  |  \-[IDENT] Node: 'id'
          |  \-[QUOTED_STRING] Node: ''a''
          \-[LT] Node: '<'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'foo2'
             |  \-[IDENT] Node: 'id'
             \-[QUOTED_STRING] Node: ''a''

input: ->from org.hibernate.test.Holder<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Holder'

input: ->from org.hibernate.test.Baz baz left outer join fetch baz.manyToAny<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left outer fetch ( . baz manyToAny ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[OUTER] Node: 'outer'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'manyToAny'

input: ->from org.hibernate.test.Baz baz join baz.manyToAny<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz manyToAny ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          \-[JOIN] Node: 'join'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'manyToAny'

input: ->select baz from org.hibernate.test.Baz baz join baz.manyToAny a where index(a) = 0<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz manyToAny ) a ) ) ( select baz ) ) ( where ( = ( ( index ( exprList a ) ) 0 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'manyToAny'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'baz'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'index'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[IDENT] Node: 'a'
          \-[NUM_INT] Node: '0'

input: ->select bar from org.hibernate.test.Bar bar where bar.baz.stringDateMap['now'] is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select bar ) ) ( where ( is not null ( [ ( . ( . bar baz ) stringDateMap ) 'now' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Bar'
    |  |     \-[ALIAS] Node: 'bar'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[INDEX_OP] Node: '['
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'bar'
             |  |  \-[IDENT] Node: 'baz'
             |  \-[IDENT] Node: 'stringDateMap'
             \-[QUOTED_STRING] Node: ''now''

input: ->select bar from org.hibernate.test.Bar bar join bar.baz b where b.stringDateMap['big bang'] < b.stringDateMap['now'] and b.stringDateMap['now'] is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join ( . bar baz ) b ) ) ( select bar ) ) ( where ( and ( < ( [ ( . b stringDateMap ) 'big bang' ) ( [ ( . b stringDateMap ) 'now' ) ) ( is not null ( [ ( . b stringDateMap ) 'now' ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'bar'
    |  |     |  \-[IDENT] Node: 'baz'
    |  |     \-[ALIAS] Node: 'b'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[LT] Node: '<'
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'b'
          |  |  |  \-[IDENT] Node: 'stringDateMap'
          |  |  \-[QUOTED_STRING] Node: ''big bang''
          |  \-[INDEX_OP] Node: '['
          |     +-[DOT] Node: '.'
          |     |  +-[IDENT] Node: 'b'
          |     |  \-[IDENT] Node: 'stringDateMap'
          |     \-[QUOTED_STRING] Node: ''now''
          \-[IS_NOT_NULL] Node: 'is not null'
             \-[INDEX_OP] Node: '['
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'b'
                |  \-[IDENT] Node: 'stringDateMap'
                \-[QUOTED_STRING] Node: ''now''

input: ->select bar from org.hibernate.test.Bar bar where bar.baz.stringDateMap['big bang'] < bar.baz.stringDateMap['now'] and bar.baz.stringDateMap['now'] is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select bar ) ) ( where ( and ( < ( [ ( . ( . bar baz ) stringDateMap ) 'big bang' ) ( [ ( . ( . bar baz ) stringDateMap ) 'now' ) ) ( is not null ( [ ( . ( . bar baz ) stringDateMap ) 'now' ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Bar'
    |  |     \-[ALIAS] Node: 'bar'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[LT] Node: '<'
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'bar'
          |  |  |  |  \-[IDENT] Node: 'baz'
          |  |  |  \-[IDENT] Node: 'stringDateMap'
          |  |  \-[QUOTED_STRING] Node: ''big bang''
          |  \-[INDEX_OP] Node: '['
          |     +-[DOT] Node: '.'
          |     |  +-[DOT] Node: '.'
          |     |  |  +-[IDENT] Node: 'bar'
          |     |  |  \-[IDENT] Node: 'baz'
          |     |  \-[IDENT] Node: 'stringDateMap'
          |     \-[QUOTED_STRING] Node: ''now''
          \-[IS_NOT_NULL] Node: 'is not null'
             \-[INDEX_OP] Node: '['
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'bar'
                |  |  \-[IDENT] Node: 'baz'
                |  \-[IDENT] Node: 'stringDateMap'
                \-[QUOTED_STRING] Node: ''now''

input: ->select foo.string, foo.component, foo.id from org.hibernate.test.Bar foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) foo ) ) ( select ( . foo string ) ( . foo component ) ( . foo id ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Bar'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'string'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'component'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'foo'
             \-[IDENT] Node: 'id'

input: ->select elements(baz.components) from org.hibernate.test.Baz baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz components ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Baz'
       |     \-[ALIAS] Node: 'baz'
       \-[SELECT] Node: 'select'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'components'

input: ->select bc.name from org.hibernate.test.Baz baz join baz.components bc<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz components ) bc ) ) ( select ( . bc name ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Baz'
       |  |  \-[ALIAS] Node: 'baz'
       |  \-[JOIN] Node: 'join'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'baz'
       |     |  \-[IDENT] Node: 'components'
       |     \-[ALIAS] Node: 'bc'
       \-[SELECT] Node: 'select'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'bc'
             \-[IDENT] Node: 'name'

input: ->from org.hibernate.test.Foo foo where foo.integer < 10 order by foo.string<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( < ( . foo integer ) 10 ) ) ( order ( . foo string ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    +-[WHERE] Node: 'where'
    |  \-[LT] Node: '<'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'foo'
    |     |  \-[IDENT] Node: 'integer'
    |     \-[NUM_INT] Node: '10'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'foo'
          \-[IDENT] Node: 'string'

input: ->from org.hibernate.test.Fee<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Fee'

input: ->from org.hibernate.test.Holder h join h.otherHolder oh where h.otherHolder.name = 'bar'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) h ) ( join ( . h otherHolder ) oh ) ) ) ( where ( = ( . ( . h otherHolder ) name ) 'bar' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Holder'
    |     |  \-[ALIAS] Node: 'h'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'h'
    |        |  \-[IDENT] Node: 'otherHolder'
    |        \-[ALIAS] Node: 'oh'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'h'
          |  |  \-[IDENT] Node: 'otherHolder'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''bar''

input: ->from org.hibernate.test.Baz baz join baz.fooSet foo join foo.foo.foo foo2 where foo2.string = 'foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz fooSet ) foo ) ( join ( . ( . foo foo ) foo ) foo2 ) ) ) ( where ( = ( . foo2 string ) 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'baz'
    |     +-[JOIN] Node: 'join'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'baz'
    |     |  |  \-[IDENT] Node: 'fooSet'
    |     |  \-[ALIAS] Node: 'foo'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'foo'
    |        |  |  \-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'foo'
    |        \-[ALIAS] Node: 'foo2'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo2'
          |  \-[IDENT] Node: 'string'
          \-[QUOTED_STRING] Node: ''foo''

input: ->from org.hibernate.test.Baz baz join baz.fooArray foo join foo.foo.foo foo2 where foo2.string = 'foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz fooArray ) foo ) ( join ( . ( . foo foo ) foo ) foo2 ) ) ) ( where ( = ( . foo2 string ) 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'baz'
    |     +-[JOIN] Node: 'join'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'baz'
    |     |  |  \-[IDENT] Node: 'fooArray'
    |     |  \-[ALIAS] Node: 'foo'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[IDENT] Node: 'foo'
    |        |  |  \-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'foo'
    |        \-[ALIAS] Node: 'foo2'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo2'
          |  \-[IDENT] Node: 'string'
          \-[QUOTED_STRING] Node: ''foo''

input: ->from org.hibernate.test.Baz baz join baz.stringDateMap date where index(date) = 'foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz stringDateMap ) date ) ) ) ( where ( = ( ( index ( exprList date ) ) 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'baz'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'baz'
    |        |  \-[IDENT] Node: 'stringDateMap'
    |        \-[ALIAS] Node: 'date'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'index'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[IDENT] Node: 'date'
          \-[QUOTED_STRING] Node: ''foo''

input: ->from org.hibernate.test.Baz baz join baz.topGlarchez g where index(g) = 'A'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz topGlarchez ) g ) ) ) ( where ( = ( ( index ( exprList g ) ) 'A' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'baz'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'baz'
    |        |  \-[IDENT] Node: 'topGlarchez'
    |        \-[ALIAS] Node: 'g'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'index'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[IDENT] Node: 'g'
          \-[QUOTED_STRING] Node: ''A''

input: ->select index(g) from org.hibernate.test.Baz baz join baz.topGlarchez g<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz topGlarchez ) g ) ) ( select ( ( index ( exprList g ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Baz'
       |  |  \-[ALIAS] Node: 'baz'
       |  \-[JOIN] Node: 'join'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'baz'
       |     |  \-[IDENT] Node: 'topGlarchez'
       |     \-[ALIAS] Node: 'g'
       \-[SELECT] Node: 'select'
          \-[METHOD_CALL] Node: '('
             +-[IDENT] Node: 'index'
             \-[EXPR_LIST] Node: 'exprList'
                \-[IDENT] Node: 'g'

input: ->from org.hibernate.test.Baz baz left join baz.stringSet<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left ( . baz stringSet ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'stringSet'

input: ->from org.hibernate.test.Baz baz join baz.stringSet str where str='foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz stringSet ) str ) ) ) ( where ( = str 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'baz'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'baz'
    |        |  \-[IDENT] Node: 'stringSet'
    |        \-[ALIAS] Node: 'str'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'str'
          \-[QUOTED_STRING] Node: ''foo''

input: ->from org.hibernate.test.Baz baz left join fetch baz.stringSet<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left fetch ( . baz stringSet ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'stringSet'

input: ->from org.hibernate.test.Baz baz join baz.stringSet string where string='foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz stringSet ) string ) ) ) ( where ( = string 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'baz'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'baz'
    |        |  \-[IDENT] Node: 'stringSet'
    |        \-[ALIAS] Node: 'string'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'string'
          \-[QUOTED_STRING] Node: ''foo''

input: ->from org.hibernate.test.Baz baz inner join baz.components comp where comp.name='foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join inner ( . baz components ) comp ) ) ) ( where ( = ( . comp name ) 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'baz'
    |     \-[JOIN] Node: 'join'
    |        +-[INNER] Node: 'inner'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'baz'
    |        |  \-[IDENT] Node: 'components'
    |        \-[ALIAS] Node: 'comp'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'comp'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''foo''

input: ->from org.hibernate.test.Glarch g inner join g.fooComponents comp where comp.fee is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ( join inner ( . g fooComponents ) comp ) ) ) ( where ( is not null ( . comp fee ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Glarch'
    |     |  \-[ALIAS] Node: 'g'
    |     \-[JOIN] Node: 'join'
    |        +-[INNER] Node: 'inner'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'g'
    |        |  \-[IDENT] Node: 'fooComponents'
    |        \-[ALIAS] Node: 'comp'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'comp'
             \-[IDENT] Node: 'fee'

input: ->from org.hibernate.test.Glarch g inner join g.fooComponents comp join comp.fee fee where fee.count > 0<-
14:13:27,856 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=93,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ( join inner ( . g fooComponents ) comp ) ( join ( . comp fee ) fee ) ) ) ( where ( > ( . fee count ) 0 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Glarch'
    |     |  \-[ALIAS] Node: 'g'
    |     +-[JOIN] Node: 'join'
    |     |  +-[INNER] Node: 'inner'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'g'
    |     |  |  \-[IDENT] Node: 'fooComponents'
    |     |  \-[ALIAS] Node: 'comp'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'comp'
    |        |  \-[IDENT] Node: 'fee'
    |        \-[ALIAS] Node: 'fee'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'fee'
          |  \-[IDENT] Node: 'count'
          \-[NUM_INT] Node: '0'

input: ->from org.hibernate.test.Glarch g inner join g.fooComponents comp where comp.fee.count is not null<-
14:13:27,877 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ( join inner ( . g fooComponents ) comp ) ) ) ( where ( is not null ( . ( . comp fee ) count ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Glarch'
    |     |  \-[ALIAS] Node: 'g'
    |     \-[JOIN] Node: 'join'
    |        +-[INNER] Node: 'inner'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'g'
    |        |  \-[IDENT] Node: 'fooComponents'
    |        \-[ALIAS] Node: 'comp'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'comp'
             |  \-[IDENT] Node: 'fee'
             \-[WEIRD_IDENT] Node: 'count'

input: ->from org.hibernate.test.Baz baz left join fetch baz.fooBag<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left fetch ( . baz fooBag ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'fooBag'

input: ->from org.hibernate.test.Glarch<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Glarch'

input: ->from org.hibernate.test.Fee<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Fee'

input: ->from org.hibernate.test.Baz baz left join fetch baz.sortablez order by baz.name asc<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left fetch ( . baz sortablez ) ) ) ) ( order ( . baz name ) asc ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Baz'
    |     |  \-[ALIAS] Node: 'baz'
    |     \-[JOIN] Node: 'join'
    |        +-[LEFT] Node: 'left'
    |        +-[FETCH] Node: 'fetch'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'baz'
    |           \-[IDENT] Node: 'sortablez'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'baz'
       |  \-[IDENT] Node: 'name'
       \-[ASCENDING] Node: 'asc'

input: ->from org.hibernate.test.Baz baz order by baz.name asc<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ) ( order ( . baz name ) asc ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Baz'
    |        \-[ALIAS] Node: 'baz'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'baz'
       |  \-[IDENT] Node: 'name'
       \-[ASCENDING] Node: 'asc'

input: ->from org.hibernate.test.Foo foo, org.hibernate.test.Baz baz left join fetch baz.fees<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left fetch ( . baz fees ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Foo'
          |  \-[ALIAS] Node: 'foo'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'fees'

input: ->from org.hibernate.test.Foo foo, org.hibernate.test.Bar bar<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Foo'
          |  \-[ALIAS] Node: 'foo'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Bar'
             \-[ALIAS] Node: 'bar'

input: ->from org.hibernate.test.Foo foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'foo'

input: ->from org.hibernate.test.Foo foo, org.hibernate.test.Bar bar, org.hibernate.test.Bar bar2<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar2 ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Foo'
          |  \-[ALIAS] Node: 'foo'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Bar'
          |  \-[ALIAS] Node: 'bar'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Bar'
             \-[ALIAS] Node: 'bar2'

input: ->from org.hibernate.test.X x<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X ) x ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'X'
             \-[ALIAS] Node: 'x'

input: ->from org.hibernate.test.Foo foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'foo'

input: ->select distinct foo from org.hibernate.test.Foo foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select distinct foo ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Foo'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          +-[DISTINCT] Node: 'distinct'
          \-[IDENT] Node: 'foo'

input: ->from org.hibernate.test.Glarch g where g.multiple.glarch=g and g.multiple.count=12<-
14:13:27,985 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) ( where ( and ( = ( . ( . g multiple ) glarch ) g ) ( = ( . ( . g multiple ) count ) 12 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Glarch'
    |        \-[ALIAS] Node: 'g'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'g'
          |  |  |  \-[IDENT] Node: 'multiple'
          |  |  \-[IDENT] Node: 'glarch'
          |  \-[IDENT] Node: 'g'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'g'
             |  |  \-[IDENT] Node: 'multiple'
             |  \-[WEIRD_IDENT] Node: 'count'
             \-[NUM_INT] Node: '12'

input: ->from org.hibernate.test.Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . bar baz ) baz ) ( join left ( . baz cascadingBars ) b ) ) ) ( where ( like ( . bar name ) 'Bar %' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Bar'
    |     |  \-[ALIAS] Node: 'bar'
    |     +-[JOIN] Node: 'join'
    |     |  +-[LEFT] Node: 'left'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'bar'
    |     |  |  \-[IDENT] Node: 'baz'
    |     |  \-[ALIAS] Node: 'baz'
    |     \-[JOIN] Node: 'join'
    |        +-[LEFT] Node: 'left'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'baz'
    |        |  \-[IDENT] Node: 'cascadingBars'
    |        \-[ALIAS] Node: 'b'
    \-[WHERE] Node: 'where'
       \-[LIKE] Node: 'like'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'bar'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''Bar %''

input: ->select bar, b from org.hibernate.test.Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . bar baz ) baz ) ( join left ( . baz cascadingBars ) b ) ) ( select bar b ) ) ( where ( like ( . bar name ) 'Bar%' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[LEFT] Node: 'left'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'bar'
    |  |  |  |  \-[IDENT] Node: 'baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'cascadingBars'
    |  |     \-[ALIAS] Node: 'b'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'bar'
    |     \-[IDENT] Node: 'b'
    \-[WHERE] Node: 'where'
       \-[LIKE] Node: 'like'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'bar'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''Bar%''

input: ->select bar, b from org.hibernate.test.Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList0_, :nameList1_, :nameList2_) or bar.name in (:nameList0_, :nameList1_, :nameList2_) ) and bar.string = :stringVal<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . bar baz ) baz ) ( join left ( . baz cascadingBars ) b ) ) ( select bar b ) ) ( where ( and ( or ( in ( . bar name ) ( inList ( : nameList0_ ) ( : nameList1_ ) ( : nameList2_ ) ) ) ( in ( . bar name ) ( inList ( : nameList0_ ) ( : nameList1_ ) ( : nameList2_ ) ) ) ) ( = ( . bar string ) ( : stringVal ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[LEFT] Node: 'left'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'bar'
    |  |  |  |  \-[IDENT] Node: 'baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'cascadingBars'
    |  |     \-[ALIAS] Node: 'b'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'bar'
    |     \-[IDENT] Node: 'b'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[OR] Node: 'or'
          |  +-[IN] Node: 'in'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'bar'
          |  |  |  \-[IDENT] Node: 'name'
          |  |  \-[IN_LIST] Node: 'inList'
          |  |     +-[COLON] Node: ':'
          |  |     |  \-[IDENT] Node: 'nameList0_'
          |  |     +-[COLON] Node: ':'
          |  |     |  \-[IDENT] Node: 'nameList1_'
          |  |     \-[COLON] Node: ':'
          |  |        \-[IDENT] Node: 'nameList2_'
          |  \-[IN] Node: 'in'
          |     +-[DOT] Node: '.'
          |     |  +-[IDENT] Node: 'bar'
          |     |  \-[IDENT] Node: 'name'
          |     \-[IN_LIST] Node: 'inList'
          |        +-[COLON] Node: ':'
          |        |  \-[IDENT] Node: 'nameList0_'
          |        +-[COLON] Node: ':'
          |        |  \-[IDENT] Node: 'nameList1_'
          |        \-[COLON] Node: ':'
          |           \-[IDENT] Node: 'nameList2_'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'bar'
             |  \-[IDENT] Node: 'string'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'stringVal'

input: ->select bar, b from org.hibernate.test.Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . bar baz ) baz ) ( join inner ( . baz cascadingBars ) b ) ) ( select bar b ) ) ( where ( like ( . bar name ) 'Bar%' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[INNER] Node: 'inner'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'bar'
    |  |  |  |  \-[IDENT] Node: 'baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[INNER] Node: 'inner'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'cascadingBars'
    |  |     \-[ALIAS] Node: 'b'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'bar'
    |     \-[IDENT] Node: 'b'
    \-[WHERE] Node: 'where'
       \-[LIKE] Node: 'like'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'bar'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''Bar%''

input: ->select bar, b from org.hibernate.test.Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . bar baz ) baz ) ( join left ( . baz cascadingBars ) b ) ) ( select bar b ) ) ( where ( and ( like ( . bar name ) ( : name ) ) ( like ( . b name ) ( : name ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[LEFT] Node: 'left'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'bar'
    |  |  |  |  \-[IDENT] Node: 'baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'cascadingBars'
    |  |     \-[ALIAS] Node: 'b'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'bar'
    |     \-[IDENT] Node: 'b'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[LIKE] Node: 'like'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'bar'
          |  |  \-[IDENT] Node: 'name'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'name'
          \-[LIKE] Node: 'like'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'b'
             |  \-[IDENT] Node: 'name'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'name'

input: ->select bar from org.hibernate.test.Bar as bar where bar.x > ? or bar.short = 1 or bar.string = 'ff ? bb'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select bar ) ) ( where ( or ( or ( > ( . bar x ) ? ) ( = ( . bar short ) 1 ) ) ( = ( . bar string ) 'ff ? bb' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Bar'
    |  |     \-[ALIAS] Node: 'bar'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[OR] Node: 'or'
          |  +-[GT] Node: '>'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'bar'
          |  |  |  \-[IDENT] Node: 'x'
          |  |  \-[PARAM] Node: '?'
          |  \-[EQ] Node: '='
          |     +-[DOT] Node: '.'
          |     |  +-[IDENT] Node: 'bar'
          |     |  \-[IDENT] Node: 'short'
          |     \-[NUM_INT] Node: '1'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'bar'
             |  \-[IDENT] Node: 'string'
             \-[QUOTED_STRING] Node: ''ff ? bb''

input: ->select bar from org.hibernate.test.Bar as bar where bar.string = ' ? ' or bar.string = '?'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select bar ) ) ( where ( or ( = ( . bar string ) ' ? ' ) ( = ( . bar string ) '?' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Bar'
    |  |     \-[ALIAS] Node: 'bar'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'bar'
          |  |  \-[IDENT] Node: 'string'
          |  \-[QUOTED_STRING] Node: '' ? ''
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'bar'
             |  \-[IDENT] Node: 'string'
             \-[QUOTED_STRING] Node: ''?''

input: ->from org.hibernate.test.Baz baz, baz.fooArray foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( RANGE ( . baz fooArray ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'baz'
             |  \-[IDENT] Node: 'fooArray'
             \-[ALIAS] Node: 'foo'

input: ->from s in class org.hibernate.test.Stuff where s.foo.id = ? and s.id.id = ? and s.moreStuff.id.intId = ? and s.moreStuff.id.stringId = ?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) s ) ) ) ( where ( and ( and ( and ( = ( . ( . s foo ) id ) ? ) ( = ( . ( . s id ) id ) ? ) ) ( = ( . ( . ( . s moreStuff ) id ) intId ) ? ) ) ( = ( . ( . ( . s moreStuff ) id ) stringId ) ? ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Stuff'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[AND] Node: 'and'
          |  +-[AND] Node: 'and'
          |  |  +-[EQ] Node: '='
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[DOT] Node: '.'
          |  |  |  |  |  +-[IDENT] Node: 's'
          |  |  |  |  |  \-[IDENT] Node: 'foo'
          |  |  |  |  \-[IDENT] Node: 'id'
          |  |  |  \-[PARAM] Node: '?'
          |  |  \-[EQ] Node: '='
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[DOT] Node: '.'
          |  |     |  |  +-[IDENT] Node: 's'
          |  |     |  |  \-[IDENT] Node: 'id'
          |  |     |  \-[IDENT] Node: 'id'
          |  |     \-[PARAM] Node: '?'
          |  \-[EQ] Node: '='
          |     +-[DOT] Node: '.'
          |     |  +-[DOT] Node: '.'
          |     |  |  +-[DOT] Node: '.'
          |     |  |  |  +-[IDENT] Node: 's'
          |     |  |  |  \-[IDENT] Node: 'moreStuff'
          |     |  |  \-[IDENT] Node: 'id'
          |     |  \-[IDENT] Node: 'intId'
          |     \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 's'
             |  |  |  \-[IDENT] Node: 'moreStuff'
             |  |  \-[IDENT] Node: 'id'
             |  \-[IDENT] Node: 'stringId'
             \-[PARAM] Node: '?'

input: ->from s in class org.hibernate.test.Stuff where s.foo.id = ? and s.id.id = ? and s.moreStuff.name = ?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) s ) ) ) ( where ( and ( and ( = ( . ( . s foo ) id ) ? ) ( = ( . ( . s id ) id ) ? ) ) ( = ( . ( . s moreStuff ) name ) ? ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Stuff'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[AND] Node: 'and'
          |  +-[EQ] Node: '='
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 's'
          |  |  |  |  \-[IDENT] Node: 'foo'
          |  |  |  \-[IDENT] Node: 'id'
          |  |  \-[PARAM] Node: '?'
          |  \-[EQ] Node: '='
          |     +-[DOT] Node: '.'
          |     |  +-[DOT] Node: '.'
          |     |  |  +-[IDENT] Node: 's'
          |     |  |  \-[IDENT] Node: 'id'
          |     |  \-[IDENT] Node: 'id'
          |     \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 's'
             |  |  \-[IDENT] Node: 'moreStuff'
             |  \-[IDENT] Node: 'name'
             \-[PARAM] Node: '?'

input: ->from s in class org.hibernate.test.Stuff where s.foo.string is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) s ) ) ) ( where ( is not null ( . ( . s foo ) string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Stuff'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 's'
             |  \-[IDENT] Node: 'foo'
             \-[IDENT] Node: 'string'

input: ->from s in class org.hibernate.test.Stuff where s.foo > '0' order by s.foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) s ) ) ) ( where ( > ( . s foo ) '0' ) ) ( order ( . s foo ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Stuff'
    |        \-[ALIAS] Node: 's'
    +-[WHERE] Node: 'where'
    |  \-[GT] Node: '>'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 's'
    |     |  \-[IDENT] Node: 'foo'
    |     \-[QUOTED_STRING] Node: ''0''
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 's'
          \-[IDENT] Node: 'foo'

input: ->from ms in class org.hibernate.test.MoreStuff<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) MoreStuff ) ms ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'MoreStuff'
             \-[ALIAS] Node: 'ms'

input: ->from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'foo'

input: ->from fee in class org.hibernate.test.Fee<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) fee ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fee'
             \-[ALIAS] Node: 'fee'

input: ->select new Result(foo.string, foo.long, foo.integer) from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( ( Result ( . foo string ) ( . foo long ) ( . foo integer ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Foo'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          \-[CONSTRUCTOR] Node: '('
             +-[IDENT] Node: 'Result'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'foo'
             |  \-[IDENT] Node: 'string'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'foo'
             |  \-[IDENT] Node: 'long'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'foo'
                \-[IDENT] Node: 'integer'

input: ->select new Result( baz.name, foo.long, count(elements(baz.fooArray)) ) from org.hibernate.test.Baz baz join baz.fooArray foo group by baz.name, foo.long<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz fooArray ) foo ) ) ( select ( ( Result ( . baz name ) ( . foo long ) ( count ( elements ( . baz fooArray ) ) ) ) ) ) ( group ( . baz name ) ( . foo long ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'fooArray'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[IDENT] Node: 'Result'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'baz'
    |        |  \-[IDENT] Node: 'name'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'foo'
    |        |  \-[IDENT] Node: 'long'
    |        \-[COUNT] Node: 'count'
    |           \-[ELEMENTS] Node: 'elements'
    |              \-[DOT] Node: '.'
    |                 +-[IDENT] Node: 'baz'
    |                 \-[IDENT] Node: 'fooArray'
    \-[GROUP] Node: 'group'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'baz'
       |  \-[IDENT] Node: 'name'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'foo'
          \-[IDENT] Node: 'long'

input: ->select new Result( baz.name, max(foo.long), count(foo) ) from org.hibernate.test.Baz baz join baz.fooArray foo group by baz.name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz fooArray ) foo ) ) ( select ( ( Result ( . baz name ) ( max ( . foo long ) ) ( count foo ) ) ) ) ( group ( . baz name ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'fooArray'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[IDENT] Node: 'Result'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'baz'
    |        |  \-[IDENT] Node: 'name'
    |        +-[AGGREGATE] Node: 'max'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'foo'
    |        |     \-[IDENT] Node: 'long'
    |        \-[COUNT] Node: 'count'
    |           \-[IDENT] Node: 'foo'
    \-[GROUP] Node: 'group'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'baz'
          \-[IDENT] Node: 'name'

input: ->select max( elements(bar.baz.fooArray) ) from org.hibernate.test.Bar as bar<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select ( max ( elements ( . ( . bar baz ) fooArray ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Bar'
       |     \-[ALIAS] Node: 'bar'
       \-[SELECT] Node: 'select'
          \-[AGGREGATE] Node: 'max'
             \-[ELEMENTS] Node: 'elements'
                \-[DOT] Node: '.'
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'bar'
                   |  \-[IDENT] Node: 'baz'
                   \-[IDENT] Node: 'fooArray'

input: ->from org.hibernate.test.Baz baz left join baz.fooToGlarch join fetch baz.fooArray foo left join fetch foo.foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left ( . baz fooToGlarch ) ) ( join fetch ( . baz fooArray ) foo ) ( join left fetch ( . foo foo ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          +-[JOIN] Node: 'join'
          |  +-[LEFT] Node: 'left'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'baz'
          |     \-[IDENT] Node: 'fooToGlarch'
          +-[JOIN] Node: 'join'
          |  +-[FETCH] Node: 'fetch'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'baz'
          |  |  \-[IDENT] Node: 'fooArray'
          |  \-[ALIAS] Node: 'foo'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'foo'
                \-[IDENT] Node: 'foo'

input: ->select baz.name from org.hibernate.test.Bar bar inner join bar.baz baz inner join baz.fooSet foo where baz.name = bar.string<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . bar baz ) baz ) ( join inner ( . baz fooSet ) foo ) ) ( select ( . baz name ) ) ) ( where ( = ( . baz name ) ( . bar string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[INNER] Node: 'inner'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'bar'
    |  |  |  |  \-[IDENT] Node: 'baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[INNER] Node: 'inner'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'fooSet'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'baz'
    |        \-[IDENT] Node: 'name'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'bar'
             \-[IDENT] Node: 'string'

input: ->SELECT baz.name FROM org.hibernate.test.Bar AS bar INNER JOIN bar.baz AS baz INNER JOIN baz.fooSet AS foo WHERE baz.name = bar.string<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( JOIN INNER ( . bar baz ) baz ) ( JOIN INNER ( . baz fooSet ) foo ) ) ( SELECT ( . baz name ) ) ) ( WHERE ( = ( . baz name ) ( . bar string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  +-[JOIN] Node: 'JOIN'
    |  |  |  +-[INNER] Node: 'INNER'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'bar'
    |  |  |  |  \-[IDENT] Node: 'baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[JOIN] Node: 'JOIN'
    |  |     +-[INNER] Node: 'INNER'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'fooSet'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'baz'
    |        \-[IDENT] Node: 'name'
    \-[WHERE] Node: 'WHERE'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'bar'
             \-[IDENT] Node: 'string'

input: ->select baz.name from org.hibernate.test.Bar bar join bar.baz baz left outer join baz.fooSet foo where baz.name = bar.string<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join ( . bar baz ) baz ) ( join left outer ( . baz fooSet ) foo ) ) ( select ( . baz name ) ) ) ( where ( = ( . baz name ) ( . bar string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'bar'
    |  |  |  |  \-[IDENT] Node: 'baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[OUTER] Node: 'outer'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'fooSet'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'baz'
    |        \-[IDENT] Node: 'name'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'bar'
             \-[IDENT] Node: 'string'

input: ->select baz.name from org.hibernate.test.Bar bar, bar.baz baz, baz.fooSet foo where baz.name = bar.string<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( RANGE ( . bar baz ) baz ) ( RANGE ( . baz fooSet ) foo ) ) ( select ( . baz name ) ) ) ( where ( = ( . baz name ) ( . bar string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'bar'
    |  |  |  |  \-[IDENT] Node: 'baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'fooSet'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'baz'
    |        \-[IDENT] Node: 'name'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'bar'
             \-[IDENT] Node: 'string'

input: ->SELECT baz.name FROM org.hibernate.test.Bar AS bar, bar.baz AS baz, baz.fooSet AS foo WHERE baz.name = bar.string<-
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( RANGE ( . bar baz ) baz ) ( RANGE ( . baz fooSet ) foo ) ) ( SELECT ( . baz name ) ) ) ( WHERE ( = ( . baz name ) ( . bar string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'bar'
    |  |  |  |  \-[IDENT] Node: 'baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'fooSet'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'baz'
    |        \-[IDENT] Node: 'name'
    \-[WHERE] Node: 'WHERE'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'bar'
             \-[IDENT] Node: 'string'

input: ->select baz.name from org.hibernate.test.Bar bar left join bar.baz baz left join baz.fooSet foo where baz.name = bar.string<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . bar baz ) baz ) ( join left ( . baz fooSet ) foo ) ) ( select ( . baz name ) ) ) ( where ( = ( . baz name ) ( . bar string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[LEFT] Node: 'left'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'bar'
    |  |  |  |  \-[IDENT] Node: 'baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'fooSet'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'baz'
    |        \-[IDENT] Node: 'name'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'bar'
             \-[IDENT] Node: 'string'

input: ->select foo.string from org.hibernate.test.Bar bar left join bar.baz.fooSet foo where bar.string = foo.string<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . ( . bar baz ) fooSet ) foo ) ) ( select ( . foo string ) ) ) ( where ( = ( . bar string ) ( . foo string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[IDENT] Node: 'bar'
    |  |     |  |  \-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'fooSet'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'string'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'bar'
          |  \-[IDENT] Node: 'string'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'foo'
             \-[IDENT] Node: 'string'

input: ->select baz.name from org.hibernate.test.Bar bar left join bar.baz baz left join baz.fooArray foo where baz.name = bar.string<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . bar baz ) baz ) ( join left ( . baz fooArray ) foo ) ) ( select ( . baz name ) ) ) ( where ( = ( . baz name ) ( . bar string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[LEFT] Node: 'left'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'bar'
    |  |  |  |  \-[IDENT] Node: 'baz'
    |  |  |  \-[ALIAS] Node: 'baz'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'fooArray'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'baz'
    |        \-[IDENT] Node: 'name'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'bar'
             \-[IDENT] Node: 'string'

input: ->select foo.string from org.hibernate.test.Bar bar left join bar.baz.fooArray foo where bar.string = foo.string<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . ( . bar baz ) fooArray ) foo ) ) ( select ( . foo string ) ) ) ( where ( = ( . bar string ) ( . foo string ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[IDENT] Node: 'bar'
    |  |     |  |  \-[IDENT] Node: 'baz'
    |  |     |  \-[IDENT] Node: 'fooArray'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'foo'
    |        \-[IDENT] Node: 'string'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'bar'
          |  \-[IDENT] Node: 'string'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'foo'
             \-[IDENT] Node: 'string'

input: ->select foo from bar in class org.hibernate.test.Bar inner join bar.baz as baz inner join baz.fooSet as foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . bar baz ) baz ) ( join inner ( . baz fooSet ) foo ) ) ( select foo ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Bar'
       |  |  \-[ALIAS] Node: 'bar'
       |  +-[JOIN] Node: 'join'
       |  |  +-[INNER] Node: 'inner'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[IDENT] Node: 'bar'
       |  |  |  \-[IDENT] Node: 'baz'
       |  |  \-[ALIAS] Node: 'baz'
       |  \-[JOIN] Node: 'join'
       |     +-[INNER] Node: 'inner'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'baz'
       |     |  \-[IDENT] Node: 'fooSet'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'foo'

input: ->select foo from bar in class org.hibernate.test.Bar inner join bar.baz.fooSet as foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . ( . bar baz ) fooSet ) foo ) ) ( select foo ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Bar'
       |  |  \-[ALIAS] Node: 'bar'
       |  \-[JOIN] Node: 'join'
       |     +-[INNER] Node: 'inner'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[IDENT] Node: 'bar'
       |     |  |  \-[IDENT] Node: 'baz'
       |     |  \-[IDENT] Node: 'fooSet'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'foo'

input: ->select foo from bar in class org.hibernate.test.Bar, bar.baz as baz, baz.fooSet as foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( RANGE ( . bar baz ) baz ) ( RANGE ( . baz fooSet ) foo ) ) ( select foo ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Bar'
       |  |  \-[ALIAS] Node: 'bar'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[IDENT] Node: 'bar'
       |  |  |  \-[IDENT] Node: 'baz'
       |  |  \-[ALIAS] Node: 'baz'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'baz'
       |     |  \-[IDENT] Node: 'fooSet'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'foo'

input: ->select foo from bar in class org.hibernate.test.Bar, bar.baz.fooSet as foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( RANGE ( . ( . bar baz ) fooSet ) foo ) ) ( select foo ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Bar'
       |  |  \-[ALIAS] Node: 'bar'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[IDENT] Node: 'bar'
       |     |  |  \-[IDENT] Node: 'baz'
       |     |  \-[IDENT] Node: 'fooSet'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'foo'

input: ->from org.hibernate.test.Bar bar join bar.baz.fooArray foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join ( . ( . bar baz ) fooArray ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Bar'
          |  \-[ALIAS] Node: 'bar'
          \-[JOIN] Node: 'join'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'bar'
             |  |  \-[IDENT] Node: 'baz'
             |  \-[IDENT] Node: 'fooArray'
             \-[ALIAS] Node: 'foo'

input: ->from bar in class org.hibernate.test.Bar, foo in elements( bar.baz.fooArray )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . ( . bar baz ) fooArray ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Bar'
          |  \-[ALIAS] Node: 'bar'
          \-[JOIN] Node: 'join'
             +-[INNER] Node: 'inner'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'bar'
             |  |  \-[IDENT] Node: 'baz'
             |  \-[IDENT] Node: 'fooArray'
             \-[ALIAS] Node: 'foo'

input: ->select one.id, elements(one.manies) from one in class org.hibernate.test.One<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ) ( select ( . one id ) ( elements ( . one manies ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'One'
       |     \-[ALIAS] Node: 'one'
       \-[SELECT] Node: 'select'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'one'
          |  \-[IDENT] Node: 'id'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'one'
                \-[IDENT] Node: 'manies'

input: ->select max( elements(one.manies) ) from one in class org.hibernate.test.One<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ) ( select ( max ( elements ( . one manies ) ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'One'
       |     \-[ALIAS] Node: 'one'
       \-[SELECT] Node: 'select'
          \-[AGGREGATE] Node: 'max'
             \-[ELEMENTS] Node: 'elements'
                \-[DOT] Node: '.'
                   +-[IDENT] Node: 'one'
                   \-[IDENT] Node: 'manies'

input: ->select one, elements(one.manies) from one in class org.hibernate.test.One<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ) ( select one ( elements ( . one manies ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'One'
       |     \-[ALIAS] Node: 'one'
       \-[SELECT] Node: 'select'
          +-[IDENT] Node: 'one'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'one'
                \-[IDENT] Node: 'manies'

input: ->select one, max(elements(one.manies)) from one in class org.hibernate.test.One group by one<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ) ( select one ( max ( elements ( . one manies ) ) ) ) ) ( group one ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'One'
    |  |     \-[ALIAS] Node: 'one'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'one'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[ELEMENTS] Node: 'elements'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'one'
    |              \-[IDENT] Node: 'manies'
    \-[GROUP] Node: 'group'
       \-[IDENT] Node: 'one'

input: ->select elements(baz.fooArray) from baz in class org.hibernate.test.Baz where baz.id=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz fooArray ) ) ) ) ( where ( = ( . baz id ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'select'
    |     \-[ELEMENTS] Node: 'elements'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'baz'
    |           \-[IDENT] Node: 'fooArray'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

input: ->select elements(baz.fooArray) from baz in class org.hibernate.test.Baz where baz.id=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz fooArray ) ) ) ) ( where ( = ( . baz id ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'select'
    |     \-[ELEMENTS] Node: 'elements'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'baz'
    |           \-[IDENT] Node: 'fooArray'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

input: ->select indices(baz.fooArray) from baz in class org.hibernate.test.Baz where baz.id=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( indices ( . baz fooArray ) ) ) ) ( where ( = ( . baz id ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'select'
    |     \-[INDICES] Node: 'indices'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'baz'
    |           \-[IDENT] Node: 'fooArray'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

input: ->select baz, max(elements(baz.timeArray)) from baz in class org.hibernate.test.Baz group by baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select baz ( max ( elements ( . baz timeArray ) ) ) ) ) ( group baz ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'baz'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[ELEMENTS] Node: 'elements'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'baz'
    |              \-[IDENT] Node: 'timeArray'
    \-[GROUP] Node: 'group'
       \-[IDENT] Node: 'baz'

input: ->select baz, baz.stringSet.size, count(distinct elements(baz.stringSet)), max(elements(baz.stringSet)) from baz in class org.hibernate.test.Baz group by baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select baz ( . ( . baz stringSet ) size ) ( count distinct ( elements ( . baz stringSet ) ) ) ( max ( elements ( . baz stringSet ) ) ) ) ) ( group baz ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'baz'
    |     +-[DOT] Node: '.'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'baz'
    |     |  |  \-[IDENT] Node: 'stringSet'
    |     |  \-[IDENT] Node: 'size'
    |     +-[COUNT] Node: 'count'
    |     |  +-[DISTINCT] Node: 'distinct'
    |     |  \-[ELEMENTS] Node: 'elements'
    |     |     \-[DOT] Node: '.'
    |     |        +-[IDENT] Node: 'baz'
    |     |        \-[IDENT] Node: 'stringSet'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[ELEMENTS] Node: 'elements'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'baz'
    |              \-[IDENT] Node: 'stringSet'
    \-[GROUP] Node: 'group'
       \-[IDENT] Node: 'baz'

input: ->select max( elements(baz.timeArray) ) from baz in class org.hibernate.test.Baz where baz.id=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( max ( elements ( . baz timeArray ) ) ) ) ) ( where ( = ( . baz id ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[ELEMENTS] Node: 'elements'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'baz'
    |              \-[IDENT] Node: 'timeArray'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

input: ->select max(elements(baz.stringSet)) from baz in class org.hibernate.test.Baz where baz.id=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( max ( elements ( . baz stringSet ) ) ) ) ) ( where ( = ( . baz id ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[ELEMENTS] Node: 'elements'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'baz'
    |              \-[IDENT] Node: 'stringSet'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

input: ->select size(baz.stringSet) from baz in class org.hibernate.test.Baz where baz.id=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( ( size ( exprList ( . baz stringSet ) ) ) ) ) ( where ( = ( . baz id ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'select'
    |     \-[METHOD_CALL] Node: '('
    |        +-[IDENT] Node: 'size'
    |        \-[EXPR_LIST] Node: 'exprList'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'baz'
    |              \-[IDENT] Node: 'stringSet'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'baz'
          |  \-[IDENT] Node: 'id'
          \-[PARAM] Node: '?'

input: ->from org.hibernate.test.Foo foo where foo.component.glarch.id is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( is not null ( . ( . ( . foo component ) glarch ) id ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'foo'
             |  |  \-[IDENT] Node: 'component'
             |  \-[IDENT] Node: 'glarch'
             \-[IDENT] Node: 'id'

input: ->from baz in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Baz'
             \-[ALIAS] Node: 'baz'

input: ->select elements(baz.stringArray) from baz in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz stringArray ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Baz'
       |     \-[ALIAS] Node: 'baz'
       \-[SELECT] Node: 'select'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'stringArray'

input: ->from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'foo'

input: ->select elements(baz.stringList) from baz in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz stringList ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Baz'
       |     \-[ALIAS] Node: 'baz'
       \-[SELECT] Node: 'select'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'stringList'

input: ->select count(*) from org.hibernate.test.Bar<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) ) ) ( select ( count * ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     \-[DOT] Node: '.'
       |        +-[DOT] Node: '.'
       |        |  +-[DOT] Node: '.'
       |        |  |  +-[IDENT] Node: 'org'
       |        |  |  \-[IDENT] Node: 'hibernate'
       |        |  \-[IDENT] Node: 'test'
       |        \-[IDENT] Node: 'Bar'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[ROW_STAR] Node: '*'

input: ->select count(*) from b in class org.hibernate.test.Bar<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) b ) ) ( select ( count * ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Bar'
       |     \-[ALIAS] Node: 'b'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[ROW_STAR] Node: '*'

input: ->from g in class org.hibernate.test.Glarch<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Glarch'
             \-[ALIAS] Node: 'g'

input: ->select baz, baz from baz in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select baz baz ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Baz'
       |     \-[ALIAS] Node: 'baz'
       \-[SELECT] Node: 'select'
          +-[IDENT] Node: 'baz'
          \-[IDENT] Node: 'baz'

input: ->select baz from baz in class org.hibernate.test.Baz order by baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select baz ) ) ( order baz ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Baz'
    |  |     \-[ALIAS] Node: 'baz'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'baz'
    \-[ORDER] Node: 'order'
       \-[IDENT] Node: 'baz'

input: ->from bar in class org.hibernate.test.Bar<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Bar'
             \-[ALIAS] Node: 'bar'

input: ->from g in class org.hibernate.test.Glarch<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Glarch'
             \-[ALIAS] Node: 'g'

input: ->from f in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) f ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'f'

input: ->from o in class org.hibernate.test.One<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'One'
             \-[ALIAS] Node: 'o'

input: ->from q in class org.hibernate.test.Qux<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) q ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Qux'
             \-[ALIAS] Node: 'q'

input: ->select foo from foo in class org.hibernate.test.Foo where foo.string='foo bar'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select foo ) ) ( where ( = ( . foo string ) 'foo bar' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'string'
          \-[QUOTED_STRING] Node: ''foo bar''

input: ->from foo in class org.hibernate.test.Foo order by foo.string, foo.date<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( order ( . foo string ) ( . foo date ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'foo'
       |  \-[IDENT] Node: 'string'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'foo'
          \-[IDENT] Node: 'date'

input: ->from foo in class org.hibernate.test.Foo where foo.class='B'<-
14:13:28,614 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=51,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo class ) 'B' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'class'
          \-[QUOTED_STRING] Node: ''B''

input: ->from foo in class org.hibernate.test.Foo where foo.class=Bar<-
14:13:28,615 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=51,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo class ) Bar ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'class'
          \-[IDENT] Node: 'Bar'

input: ->select bar from bar in class org.hibernate.test.Bar, foo in class org.hibernate.test.Foo where bar.string = foo.string and not bar=foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select bar ) ) ( where ( and ( = ( . bar string ) ( . foo string ) ) ( {not}= bar foo ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Bar'
    |  |  |  \-[ALIAS] Node: 'bar'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'foo'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'bar'
          |  |  \-[IDENT] Node: 'string'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'foo'
          |     \-[IDENT] Node: 'string'
          \-[NE] Node: '{not}='
             +-[IDENT] Node: 'bar'
             \-[IDENT] Node: 'foo'

input: ->from foo in class org.hibernate.test.Foo where foo.string='foo bar'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo string ) 'foo bar' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'string'
          \-[QUOTED_STRING] Node: ''foo bar''

input: ->select foo from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select foo ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Foo'
       |     \-[ALIAS] Node: 'foo'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'foo'

input: ->from bar in class org.hibernate.test.Bar where bar.barString='bar bar'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) ( where ( = ( . bar barString ) 'bar bar' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Bar'
    |        \-[ALIAS] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'bar'
          |  \-[IDENT] Node: 'barString'
          \-[QUOTED_STRING] Node: ''bar bar''

input: ->from t in class org.hibernate.test.Trivial<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Trivial ) t ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Trivial'
             \-[ALIAS] Node: 't'

input: ->from foo in class org.hibernate.test.Foo where foo.date = ?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo date ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'date'
          \-[PARAM] Node: '?'

input: ->from o in class org.hibernate.test.MoreStuff<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) MoreStuff ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'MoreStuff'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Many<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Many ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Many'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fee<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fee'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Qux<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Qux'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Y<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Y ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Y'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fumm<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fumm ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fumm'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.X<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'X'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Simple'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Location<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Location ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Location'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Holder<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Holder'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Part<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Part ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Part'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Baz'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Vetoer<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Vetoer ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Vetoer'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Sortable<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Sortable ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Sortable'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Contained<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Contained ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Contained'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Stuff<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Stuff'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Immutable<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Immutable ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Immutable'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Container<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Container'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.X$XX<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X$XX ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'X$XX'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.One<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'One'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fo'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Glarch<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Glarch'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fum<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fum'
             \-[ALIAS] Node: 'o'

input: ->from q in class org.hibernate.test.Qux where q.stuff is null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) q ) ) ) ( where ( is null ( . q stuff ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Qux'
    |        \-[ALIAS] Node: 'q'
    \-[WHERE] Node: 'where'
       \-[IS_NULL] Node: 'is null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'q'
             \-[IDENT] Node: 'stuff'

input: ->from q in class org.hibernate.test.Qux where q.stuff=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) q ) ) ) ( where ( = ( . q stuff ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Qux'
    |        \-[ALIAS] Node: 'q'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'q'
          |  \-[IDENT] Node: 'stuff'
          \-[PARAM] Node: '?'

input: ->from q in class org.hibernate.test.Qux<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) q ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Qux'
             \-[ALIAS] Node: 'q'

input: ->from g in class org.hibernate.test.Glarch where g.version=2<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) ( where ( = ( . g version ) 2 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Glarch'
    |        \-[ALIAS] Node: 'g'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'g'
          |  \-[IDENT] Node: 'version'
          \-[NUM_INT] Node: '2'

input: ->from g in class org.hibernate.test.Glarch where g.next is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) ( where ( is not null ( . g next ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Glarch'
    |        \-[ALIAS] Node: 'g'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'g'
             \-[IDENT] Node: 'next'

input: ->from g in class org.hibernate.test.Glarch order by g.order asc<-
14:13:28,948 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=53,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) ( order ( . g order ) asc ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Glarch'
    |        \-[ALIAS] Node: 'g'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'g'
       |  \-[IDENT] Node: 'order'
       \-[ASCENDING] Node: 'asc'

input: ->from foo in class org.hibernate.test.Foo order by foo.string asc<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( order ( . foo string ) asc ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'foo'
       |  \-[IDENT] Node: 'string'
       \-[ASCENDING] Node: 'asc'

input: ->select parent, child from parent in class org.hibernate.test.Foo, child in class org.hibernate.test.Foo where parent.foo = child<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) parent ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) child ) ) ( select parent child ) ) ( where ( = ( . parent foo ) child ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Foo'
    |  |  |  \-[ALIAS] Node: 'parent'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'child'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'parent'
    |     \-[IDENT] Node: 'child'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'parent'
          |  \-[IDENT] Node: 'foo'
          \-[IDENT] Node: 'child'

input: ->select count(distinct child.id), count(distinct parent.id) from parent in class org.hibernate.test.Foo, child in class org.hibernate.test.Foo where parent.foo = child<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) parent ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) child ) ) ( select ( count distinct ( . child id ) ) ( count distinct ( . parent id ) ) ) ) ( where ( = ( . parent foo ) child ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Foo'
    |  |  |  \-[ALIAS] Node: 'parent'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'child'
    |  \-[SELECT] Node: 'select'
    |     +-[COUNT] Node: 'count'
    |     |  +-[DISTINCT] Node: 'distinct'
    |     |  \-[DOT] Node: '.'
    |     |     +-[IDENT] Node: 'child'
    |     |     \-[IDENT] Node: 'id'
    |     \-[COUNT] Node: 'count'
    |        +-[DISTINCT] Node: 'distinct'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'parent'
    |           \-[IDENT] Node: 'id'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'parent'
          |  \-[IDENT] Node: 'foo'
          \-[IDENT] Node: 'child'

input: ->select child.id, parent.id, child.long from parent in class org.hibernate.test.Foo, child in class org.hibernate.test.Foo where parent.foo = child<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) parent ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) child ) ) ( select ( . child id ) ( . parent id ) ( . child long ) ) ) ( where ( = ( . parent foo ) child ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Foo'
    |  |  |  \-[ALIAS] Node: 'parent'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'child'
    |  \-[SELECT] Node: 'select'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'child'
    |     |  \-[IDENT] Node: 'id'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'parent'
    |     |  \-[IDENT] Node: 'id'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'child'
    |        \-[IDENT] Node: 'long'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'parent'
          |  \-[IDENT] Node: 'foo'
          \-[IDENT] Node: 'child'

input: ->select child.id, parent.id, child.long, child, parent.foo from parent in class org.hibernate.test.Foo, child in class org.hibernate.test.Foo where parent.foo = child<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) parent ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) child ) ) ( select ( . child id ) ( . parent id ) ( . child long ) child ( . parent foo ) ) ) ( where ( = ( . parent foo ) child ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Foo'
    |  |  |  \-[ALIAS] Node: 'parent'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'child'
    |  \-[SELECT] Node: 'select'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'child'
    |     |  \-[IDENT] Node: 'id'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'parent'
    |     |  \-[IDENT] Node: 'id'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'child'
    |     |  \-[IDENT] Node: 'long'
    |     +-[IDENT] Node: 'child'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'parent'
    |        \-[IDENT] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'parent'
          |  \-[IDENT] Node: 'foo'
          \-[IDENT] Node: 'child'

input: ->select parent, child from parent in class org.hibernate.test.Foo, child in class org.hibernate.test.Foo where parent.foo = child and parent.string='a string'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) parent ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) child ) ) ( select parent child ) ) ( where ( and ( = ( . parent foo ) child ) ( = ( . parent string ) 'a string' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Foo'
    |  |  |  \-[ALIAS] Node: 'parent'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Foo'
    |  |     \-[ALIAS] Node: 'child'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'parent'
    |     \-[IDENT] Node: 'child'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'parent'
          |  |  \-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'child'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'parent'
             |  \-[IDENT] Node: 'string'
             \-[QUOTED_STRING] Node: ''a string''

input: ->from fee in class org.hibernate.test.Fee<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) fee ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fee'
             \-[ALIAS] Node: 'fee'

input: ->from org.hibernate.test.Foo foo where foo.custom.s1 = 'one'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . ( . foo custom ) s1 ) 'one' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'foo'
          |  |  \-[IDENT] Node: 'custom'
          |  \-[IDENT] Node: 's1'
          \-[QUOTED_STRING] Node: ''one''

input: ->from im in class org.hibernate.test.Immutable where im = ?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Immutable ) im ) ) ) ( where ( = im ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Immutable'
    |        \-[ALIAS] Node: 'im'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'im'
          \-[PARAM] Node: '?'

input: ->from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'foo'

input: ->from foo in class org.hibernate.test.Foo where foo.char='X'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo char ) 'X' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'char'
          \-[QUOTED_STRING] Node: ''X''

input: ->select elements(baz.stringArray) from baz in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz stringArray ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Baz'
       |     \-[ALIAS] Node: 'baz'
       \-[SELECT] Node: 'select'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'stringArray'

input: ->select distinct elements(baz.stringArray) from baz in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select distinct ( elements ( . baz stringArray ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Baz'
       |     \-[ALIAS] Node: 'baz'
       \-[SELECT] Node: 'select'
          +-[DISTINCT] Node: 'distinct'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'stringArray'

input: ->select elements(baz.fooArray) from baz in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz fooArray ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Baz'
       |     \-[ALIAS] Node: 'baz'
       \-[SELECT] Node: 'select'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'fooArray'

input: ->from foo in class org.hibernate.test.Fo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fo'
             \-[ALIAS] Node: 'foo'

input: ->from foo in class org.hibernate.test.Foo where foo.dependent.qux.foo.string = 'foo2'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . ( . ( . ( . foo dependent ) qux ) foo ) string ) 'foo2' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'foo'
          |  |  |  |  \-[IDENT] Node: 'dependent'
          |  |  |  \-[IDENT] Node: 'qux'
          |  |  \-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'string'
          \-[QUOTED_STRING] Node: ''foo2''

input: ->from org.hibernate.test.Bar bar where bar.object.id = ? and bar.object.class = ?<-
14:13:29,135 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=42,possibleID=false]
14:13:29,135 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=64,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) ( where ( and ( = ( . ( . bar object ) id ) ? ) ( = ( . ( . bar object ) class ) ? ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Bar'
    |        \-[ALIAS] Node: 'bar'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'bar'
          |  |  |  \-[IDENT] Node: 'object'
          |  |  \-[IDENT] Node: 'id'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'bar'
             |  |  \-[IDENT] Node: 'object'
             |  \-[CLASS] Node: 'class'
             \-[PARAM] Node: '?'

input: ->select one from org.hibernate.test.One one, org.hibernate.test.Bar bar where bar.object.id = one.id and bar.object.class = 'O'<-
14:13:29,136 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=81,possibleID=false]
14:13:29,136 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=108,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select one ) ) ( where ( and ( = ( . ( . bar object ) id ) ( . one id ) ) ( = ( . ( . bar object ) class ) 'O' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'One'
    |  |  |  \-[ALIAS] Node: 'one'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Bar'
    |  |     \-[ALIAS] Node: 'bar'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'one'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'bar'
          |  |  |  \-[IDENT] Node: 'object'
          |  |  \-[IDENT] Node: 'id'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'one'
          |     \-[IDENT] Node: 'id'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'bar'
             |  |  \-[IDENT] Node: 'object'
             |  \-[CLASS] Node: 'class'
             \-[QUOTED_STRING] Node: ''O''

input: ->from l in class org.hibernate.test.Location where l.countryCode = 'AU' and l.description='foo bar'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Location ) l ) ) ) ( where ( and ( = ( . l countryCode ) 'AU' ) ( = ( . l description ) 'foo bar' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Location'
    |        \-[ALIAS] Node: 'l'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'l'
          |  |  \-[IDENT] Node: 'countryCode'
          |  \-[QUOTED_STRING] Node: ''AU''
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'l'
             |  \-[IDENT] Node: 'description'
             \-[QUOTED_STRING] Node: ''foo bar''

input: ->from org.hibernate.test.Bar bar<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Bar'
             \-[ALIAS] Node: 'bar'

input: ->From org.hibernate.test.Bar bar<-
AST  :   ( query ( SELECT_FROM ( From ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'From'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Bar'
             \-[ALIAS] Node: 'bar'

input: ->From org.hibernate.test.Foo foo<-
AST  :   ( query ( SELECT_FROM ( From ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'From'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'foo'

input: ->from o in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Baz'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'o'

input: ->from f in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) f ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'f'

input: ->select fum.id from fum in class org.hibernate.test.Fum where not fum.fum='FRIEND'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum ) ) ( select ( . fum id ) ) ) ( where ( {not}= ( . fum fum ) 'FRIEND' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Fum'
    |  |     \-[ALIAS] Node: 'fum'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'fum'
    |        \-[IDENT] Node: 'id'
    \-[WHERE] Node: 'where'
       \-[NE] Node: '{not}='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'fum'
          |  \-[IDENT] Node: 'fum'
          \-[QUOTED_STRING] Node: ''FRIEND''

input: ->select fum.id from fum in class org.hibernate.test.Fum where not fum.fum='FRIEND'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum ) ) ( select ( . fum id ) ) ) ( where ( {not}= ( . fum fum ) 'FRIEND' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Fum'
    |  |     \-[ALIAS] Node: 'fum'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'fum'
    |        \-[IDENT] Node: 'id'
    \-[WHERE] Node: 'where'
       \-[NE] Node: '{not}='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'fum'
          |  \-[IDENT] Node: 'fum'
          \-[QUOTED_STRING] Node: ''FRIEND''

input: ->from fum in class org.hibernate.test.Fum where not fum.fum='FRIEND'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum ) ) ) ( where ( {not}= ( . fum fum ) 'FRIEND' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Fum'
    |        \-[ALIAS] Node: 'fum'
    \-[WHERE] Node: 'where'
       \-[NE] Node: '{not}='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'fum'
          |  \-[IDENT] Node: 'fum'
          \-[QUOTED_STRING] Node: ''FRIEND''

input: ->from fo in class org.hibernate.test.Fo where fo.id.string like 'an instance of fo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) fo ) ) ) ( where ( like ( . ( . fo id ) string ) 'an instance of fo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Fo'
    |        \-[ALIAS] Node: 'fo'
    \-[WHERE] Node: 'where'
       \-[LIKE] Node: 'like'
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'fo'
          |  |  \-[IDENT] Node: 'id'
          |  \-[IDENT] Node: 'string'
          \-[QUOTED_STRING] Node: ''an instance of fo''

input: ->from org.hibernate.test.Inner<-
14:13:29,233 DEBUG ErrorCounter:63 - Keyword  'Inner' is being interpreted as an identifier due to: expecting IDENT, found 'Inner'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Inner ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[WEIRD_IDENT] Node: 'Inner'

input: ->from org.hibernate.test.Outer o where o.id.detailId = ?<-
14:13:29,233 DEBUG ErrorCounter:63 - Keyword  'Outer' is being interpreted as an identifier due to: expecting IDENT, found 'Outer'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ) ( where ( = ( . ( . o id ) detailId ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[WEIRD_IDENT] Node: 'Outer'
    |        \-[ALIAS] Node: 'o'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'o'
          |  |  \-[IDENT] Node: 'id'
          |  \-[IDENT] Node: 'detailId'
          \-[PARAM] Node: '?'

input: ->from org.hibernate.test.Outer o where o.id.master.id.sup.dudu is not null<-
14:13:29,243 DEBUG ErrorCounter:63 - Keyword  'Outer' is being interpreted as an identifier due to: expecting IDENT, found 'Outer'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ) ( where ( is not null ( . ( . ( . ( . ( . o id ) master ) id ) sup ) dudu ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[WEIRD_IDENT] Node: 'Outer'
    |        \-[ALIAS] Node: 'o'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[DOT] Node: '.'
             |  |  |  |  +-[IDENT] Node: 'o'
             |  |  |  |  \-[IDENT] Node: 'id'
             |  |  |  \-[IDENT] Node: 'master'
             |  |  \-[IDENT] Node: 'id'
             |  \-[IDENT] Node: 'sup'
             \-[IDENT] Node: 'dudu'

input: ->from org.hibernate.test.Outer o where o.id.master.id.sup.id.akey is not null<-
14:13:29,252 DEBUG ErrorCounter:63 - Keyword  'Outer' is being interpreted as an identifier due to: expecting IDENT, found 'Outer'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ) ( where ( is not null ( . ( . ( . ( . ( . ( . o id ) master ) id ) sup ) id ) akey ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[WEIRD_IDENT] Node: 'Outer'
    |        \-[ALIAS] Node: 'o'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[DOT] Node: '.'
             |  |  |  |  +-[DOT] Node: '.'
             |  |  |  |  |  +-[IDENT] Node: 'o'
             |  |  |  |  |  \-[IDENT] Node: 'id'
             |  |  |  |  \-[IDENT] Node: 'master'
             |  |  |  \-[IDENT] Node: 'id'
             |  |  \-[IDENT] Node: 'sup'
             |  \-[IDENT] Node: 'id'
             \-[IDENT] Node: 'akey'

input: ->select o.id.master.id.sup.dudu from org.hibernate.test.Outer o where o.id.master.id.sup.dudu is not null<-
14:13:29,263 DEBUG ErrorCounter:63 - Keyword  'Outer' is being interpreted as an identifier due to: expecting IDENT, found 'Outer'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ( select ( . ( . ( . ( . ( . o id ) master ) id ) sup ) dudu ) ) ) ( where ( is not null ( . ( . ( . ( . ( . o id ) master ) id ) sup ) dudu ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[WEIRD_IDENT] Node: 'Outer'
    |  |     \-[ALIAS] Node: 'o'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'o'
    |        |  |  |  |  \-[IDENT] Node: 'id'
    |        |  |  |  \-[IDENT] Node: 'master'
    |        |  |  \-[IDENT] Node: 'id'
    |        |  \-[IDENT] Node: 'sup'
    |        \-[IDENT] Node: 'dudu'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[DOT] Node: '.'
             |  |  |  |  +-[IDENT] Node: 'o'
             |  |  |  |  \-[IDENT] Node: 'id'
             |  |  |  \-[IDENT] Node: 'master'
             |  |  \-[IDENT] Node: 'id'
             |  \-[IDENT] Node: 'sup'
             \-[IDENT] Node: 'dudu'

input: ->select o.id.master.id.sup.id.akey from org.hibernate.test.Outer o where o.id.master.id.sup.id.akey is not null<-
14:13:29,263 DEBUG ErrorCounter:63 - Keyword  'Outer' is being interpreted as an identifier due to: expecting IDENT, found 'Outer'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ( select ( . ( . ( . ( . ( . ( . o id ) master ) id ) sup ) id ) akey ) ) ) ( where ( is not null ( . ( . ( . ( . ( . ( . o id ) master ) id ) sup ) id ) akey ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[WEIRD_IDENT] Node: 'Outer'
    |  |     \-[ALIAS] Node: 'o'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  |  +-[IDENT] Node: 'o'
    |        |  |  |  |  |  \-[IDENT] Node: 'id'
    |        |  |  |  |  \-[IDENT] Node: 'master'
    |        |  |  |  \-[IDENT] Node: 'id'
    |        |  |  \-[IDENT] Node: 'sup'
    |        |  \-[IDENT] Node: 'id'
    |        \-[IDENT] Node: 'akey'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[DOT] Node: '.'
             |  |  |  |  +-[DOT] Node: '.'
             |  |  |  |  |  +-[IDENT] Node: 'o'
             |  |  |  |  |  \-[IDENT] Node: 'id'
             |  |  |  |  \-[IDENT] Node: 'master'
             |  |  |  \-[IDENT] Node: 'id'
             |  |  \-[IDENT] Node: 'sup'
             |  \-[IDENT] Node: 'id'
             \-[IDENT] Node: 'akey'

input: ->from org.hibernate.test.Outer o where o.id.master.bla = ''<-
14:13:29,285 DEBUG ErrorCounter:63 - Keyword  'Outer' is being interpreted as an identifier due to: expecting IDENT, found 'Outer'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ) ( where ( = ( . ( . ( . o id ) master ) bla ) '' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[WEIRD_IDENT] Node: 'Outer'
    |        \-[ALIAS] Node: 'o'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'o'
          |  |  |  \-[IDENT] Node: 'id'
          |  |  \-[IDENT] Node: 'master'
          |  \-[IDENT] Node: 'bla'
          \-[QUOTED_STRING] Node: ''''

input: ->from org.hibernate.test.Outer o where o.id.master.id.one = ''<-
14:13:29,285 DEBUG ErrorCounter:63 - Keyword  'Outer' is being interpreted as an identifier due to: expecting IDENT, found 'Outer'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ) ( where ( = ( . ( . ( . ( . o id ) master ) id ) one ) '' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[WEIRD_IDENT] Node: 'Outer'
    |        \-[ALIAS] Node: 'o'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'o'
          |  |  |  |  \-[IDENT] Node: 'id'
          |  |  |  \-[IDENT] Node: 'master'
          |  |  \-[IDENT] Node: 'id'
          |  \-[IDENT] Node: 'one'
          \-[QUOTED_STRING] Node: ''''

input: ->from org.hibernate.test.Inner inn where inn.id.bkey is not null and inn.backOut.id.master.id.sup.id.akey > 'a'<-
14:13:29,307 DEBUG ErrorCounter:63 - Keyword  'Inner' is being interpreted as an identifier due to: expecting IDENT, found 'Inner'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Inner ) inn ) ) ) ( where ( and ( is not null ( . ( . inn id ) bkey ) ) ( > ( . ( . ( . ( . ( . ( . ( . inn backOut ) id ) master ) id ) sup ) id ) akey ) 'a' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[WEIRD_IDENT] Node: 'Inner'
    |        \-[ALIAS] Node: 'inn'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[IS_NOT_NULL] Node: 'is not null'
          |  \-[DOT] Node: '.'
          |     +-[DOT] Node: '.'
          |     |  +-[IDENT] Node: 'inn'
          |     |  \-[IDENT] Node: 'id'
          |     \-[IDENT] Node: 'bkey'
          \-[GT] Node: '>'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[DOT] Node: '.'
             |  |  |  |  +-[DOT] Node: '.'
             |  |  |  |  |  +-[DOT] Node: '.'
             |  |  |  |  |  |  +-[DOT] Node: '.'
             |  |  |  |  |  |  |  +-[IDENT] Node: 'inn'
             |  |  |  |  |  |  |  \-[IDENT] Node: 'backOut'
             |  |  |  |  |  |  \-[IDENT] Node: 'id'
             |  |  |  |  |  \-[IDENT] Node: 'master'
             |  |  |  |  \-[IDENT] Node: 'id'
             |  |  |  \-[IDENT] Node: 'sup'
             |  |  \-[IDENT] Node: 'id'
             |  \-[IDENT] Node: 'akey'
             \-[QUOTED_STRING] Node: ''a''

input: ->from org.hibernate.test.Outer as o left join o.id.master m left join m.id.sup where o.bubu is not null<-
14:13:29,317 DEBUG ErrorCounter:63 - Keyword  'Outer' is being interpreted as an identifier due to: expecting IDENT, found 'Outer'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ( join left ( . ( . o id ) master ) m ) ( join left ( . ( . m id ) sup ) ) ) ) ( where ( is not null ( . o bubu ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[WEIRD_IDENT] Node: 'Outer'
    |     |  \-[ALIAS] Node: 'o'
    |     +-[JOIN] Node: 'join'
    |     |  +-[LEFT] Node: 'left'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[IDENT] Node: 'o'
    |     |  |  |  \-[IDENT] Node: 'id'
    |     |  |  \-[IDENT] Node: 'master'
    |     |  \-[ALIAS] Node: 'm'
    |     \-[JOIN] Node: 'join'
    |        +-[LEFT] Node: 'left'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[IDENT] Node: 'm'
    |           |  \-[IDENT] Node: 'id'
    |           \-[IDENT] Node: 'sup'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'o'
             \-[IDENT] Node: 'bubu'

input: ->from org.hibernate.test.Outer as o left join o.id.master.id.sup s where o.bubu is not null<-
14:13:29,337 DEBUG ErrorCounter:63 - Keyword  'Outer' is being interpreted as an identifier due to: expecting IDENT, found 'Outer'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ( join left ( . ( . ( . ( . o id ) master ) id ) sup ) s ) ) ) ( where ( is not null ( . o bubu ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[WEIRD_IDENT] Node: 'Outer'
    |     |  \-[ALIAS] Node: 'o'
    |     \-[JOIN] Node: 'join'
    |        +-[LEFT] Node: 'left'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'o'
    |        |  |  |  |  \-[IDENT] Node: 'id'
    |        |  |  |  \-[IDENT] Node: 'master'
    |        |  |  \-[IDENT] Node: 'id'
    |        |  \-[IDENT] Node: 'sup'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'o'
             \-[IDENT] Node: 'bubu'

input: ->from org.hibernate.test.Outer as o left join o.id.master m left join o.id.master.id.sup s where o.bubu is not null<-
14:13:29,347 DEBUG ErrorCounter:63 - Keyword  'Outer' is being interpreted as an identifier due to: expecting IDENT, found 'Outer'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ( join left ( . ( . o id ) master ) m ) ( join left ( . ( . ( . ( . o id ) master ) id ) sup ) s ) ) ) ( where ( is not null ( . o bubu ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[WEIRD_IDENT] Node: 'Outer'
    |     |  \-[ALIAS] Node: 'o'
    |     +-[JOIN] Node: 'join'
    |     |  +-[LEFT] Node: 'left'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[IDENT] Node: 'o'
    |     |  |  |  \-[IDENT] Node: 'id'
    |     |  |  \-[IDENT] Node: 'master'
    |     |  \-[ALIAS] Node: 'm'
    |     \-[JOIN] Node: 'join'
    |        +-[LEFT] Node: 'left'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'o'
    |        |  |  |  |  \-[IDENT] Node: 'id'
    |        |  |  |  \-[IDENT] Node: 'master'
    |        |  |  \-[IDENT] Node: 'id'
    |        |  \-[IDENT] Node: 'sup'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'o'
             \-[IDENT] Node: 'bubu'

input: ->select fum1.fo from fum1 in class org.hibernate.test.Fum where fum1.fo.fum is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum1 ) ) ( select ( . fum1 fo ) ) ) ( where ( is not null ( . ( . fum1 fo ) fum ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Fum'
    |  |     \-[ALIAS] Node: 'fum1'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'fum1'
    |        \-[IDENT] Node: 'fo'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'fum1'
             |  \-[IDENT] Node: 'fo'
             \-[IDENT] Node: 'fum'

input: ->from fum1 in class org.hibernate.test.Fum where fum1.fo.fum is not null order by fum1.fo.fum<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum1 ) ) ) ( where ( is not null ( . ( . fum1 fo ) fum ) ) ) ( order ( . ( . fum1 fo ) fum ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Fum'
    |        \-[ALIAS] Node: 'fum1'
    +-[WHERE] Node: 'where'
    |  \-[IS_NOT_NULL] Node: 'is not null'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'fum1'
    |        |  \-[IDENT] Node: 'fo'
    |        \-[IDENT] Node: 'fum'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'fum1'
          |  \-[IDENT] Node: 'fo'
          \-[IDENT] Node: 'fum'

input: ->select elements(fum1.friends) from fum1 in class org.hibernate.test.Fum<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum1 ) ) ( select ( elements ( . fum1 friends ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Fum'
       |     \-[ALIAS] Node: 'fum1'
       \-[SELECT] Node: 'select'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'fum1'
                \-[IDENT] Node: 'friends'

input: ->from fum1 in class org.hibernate.test.Fum, fr in elements( fum1.friends )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum1 ) ( join inner ( . fum1 friends ) fr ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Fum'
          |  \-[ALIAS] Node: 'fum1'
          \-[JOIN] Node: 'join'
             +-[INNER] Node: 'inner'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'fum1'
             |  \-[IDENT] Node: 'friends'
             \-[ALIAS] Node: 'fr'

input: ->select new Jay(eye) from org.hibernate.test.Eye eye<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Eye ) eye ) ) ( select ( ( Jay eye ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Eye'
       |     \-[ALIAS] Node: 'eye'
       \-[SELECT] Node: 'select'
          \-[CONSTRUCTOR] Node: '('
             +-[IDENT] Node: 'Jay'
             \-[IDENT] Node: 'eye'

input: ->from org.hibernate.test.Category cat where cat.name='new foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Category ) cat ) ) ) ( where ( = ( . cat name ) 'new foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Category'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''new foo''

input: ->from org.hibernate.test.Category cat where cat.name='new sub'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Category ) cat ) ) ) ( where ( = ( . cat name ) 'new sub' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Category'
    |        \-[ALIAS] Node: 'cat'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'cat'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''new sub''

input: ->from org.hibernate.test.Up up order by up.id2 asc<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Up ) up ) ) ) ( order ( . up id2 ) asc ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Up'
    |        \-[ALIAS] Node: 'up'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'up'
       |  \-[IDENT] Node: 'id2'
       \-[ASCENDING] Node: 'asc'

input: ->from org.hibernate.test.Down down<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Down ) down ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Down'
             \-[ALIAS] Node: 'down'

input: ->from org.hibernate.test.Up up<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Up ) up ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Up'
             \-[ALIAS] Node: 'up'

input: ->from m in class org.hibernate.test.Master<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Master ) m ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Master'
             \-[ALIAS] Node: 'm'

input: ->from s in class org.hibernate.test.Several<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Several ) s ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Several'
             \-[ALIAS] Node: 's'

input: ->from s in class org.hibernate.test.Single<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Single ) s ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Single'
             \-[ALIAS] Node: 's'

input: ->
		from d in class 
			org.hibernate.test.Detail
	<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Detail ) d ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Detail'
             \-[ALIAS] Node: 'd'

input: ->from c in class org.hibernate.test.Category where c.name = org.hibernate.test.Category.ROOT_CATEGORY<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Category ) c ) ) ) ( where ( = ( . c name ) ( . ( . ( . ( . org hibernate ) test ) Category ) ROOT_CATEGORY ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Category'
    |        \-[ALIAS] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'c'
          |  \-[IDENT] Node: 'name'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Category'
             \-[IDENT] Node: 'ROOT_CATEGORY'

input: ->select c from c in class org.hibernate.test.Container, s in class org.hibernate.test.Simple where c.oneToMany[2] = s<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select c ) ) ( where ( = ( [ ( . c oneToMany ) 2 ) s ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Container'
    |  |  |  \-[ALIAS] Node: 'c'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Simple'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[INDEX_OP] Node: '['
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'c'
          |  |  \-[IDENT] Node: 'oneToMany'
          |  \-[NUM_INT] Node: '2'
          \-[IDENT] Node: 's'

input: ->select c from c in class org.hibernate.test.Container, s in class org.hibernate.test.Simple where c.manyToMany[2] = s<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select c ) ) ( where ( = ( [ ( . c manyToMany ) 2 ) s ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Container'
    |  |  |  \-[ALIAS] Node: 'c'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Simple'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[INDEX_OP] Node: '['
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'c'
          |  |  \-[IDENT] Node: 'manyToMany'
          |  \-[NUM_INT] Node: '2'
          \-[IDENT] Node: 's'

input: ->select c from c in class org.hibernate.test.Container, s in class org.hibernate.test.Simple where s = c.oneToMany[2]<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select c ) ) ( where ( = s ( [ ( . c oneToMany ) 2 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Container'
    |  |  |  \-[ALIAS] Node: 'c'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Simple'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 's'
          \-[INDEX_OP] Node: '['
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'c'
             |  \-[IDENT] Node: 'oneToMany'
             \-[NUM_INT] Node: '2'

input: ->select c from c in class org.hibernate.test.Container, s in class org.hibernate.test.Simple where s = c.manyToMany[2]<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select c ) ) ( where ( = s ( [ ( . c manyToMany ) 2 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Container'
    |  |  |  \-[ALIAS] Node: 'c'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Simple'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 's'
          \-[INDEX_OP] Node: '['
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'c'
             |  \-[IDENT] Node: 'manyToMany'
             \-[NUM_INT] Node: '2'

input: ->select c from c in class org.hibernate.test.Container where c.oneToMany[0].name = 's'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = ( . ( [ ( . c oneToMany ) 0 ) name ) 's' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Container'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'c'
          |  |  |  \-[IDENT] Node: 'oneToMany'
          |  |  \-[NUM_INT] Node: '0'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''s''

input: ->select c from c in class org.hibernate.test.Container where c.manyToMany[0].name = 's'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = ( . ( [ ( . c manyToMany ) 0 ) name ) 's' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Container'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'c'
          |  |  |  \-[IDENT] Node: 'manyToMany'
          |  |  \-[NUM_INT] Node: '0'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''s''

input: ->select c from c in class org.hibernate.test.Container where 's' = c.oneToMany[2 - 2].name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = 's' ( . ( [ ( . c oneToMany ) ( - 2 2 ) ) name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Container'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[QUOTED_STRING] Node: ''s''
          \-[DOT] Node: '.'
             +-[INDEX_OP] Node: '['
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'c'
             |  |  \-[IDENT] Node: 'oneToMany'
             |  \-[MINUS] Node: '-'
             |     +-[NUM_INT] Node: '2'
             |     \-[NUM_INT] Node: '2'
             \-[IDENT] Node: 'name'

input: ->select c from c in class org.hibernate.test.Container where 's' = c.manyToMany[(3+1)/4-1].name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = 's' ( . ( [ ( . c manyToMany ) ( - ( / ( + 3 1 ) 4 ) 1 ) ) name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Container'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[QUOTED_STRING] Node: ''s''
          \-[DOT] Node: '.'
             +-[INDEX_OP] Node: '['
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'c'
             |  |  \-[IDENT] Node: 'manyToMany'
             |  \-[MINUS] Node: '-'
             |     +-[DIV] Node: '/'
             |     |  +-[PLUS] Node: '+'
             |     |  |  +-[NUM_INT] Node: '3'
             |     |  |  \-[NUM_INT] Node: '1'
             |     |  \-[NUM_INT] Node: '4'
             |     \-[NUM_INT] Node: '1'
             \-[IDENT] Node: 'name'

input: ->select c from c in class org.hibernate.test.Container where c.manyToMany[ maxindex(c.manyToMany) ].count = 2<-
14:13:29,547 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = ( . ( [ ( . c manyToMany ) ( ( maxindex ( exprList ( . c manyToMany ) ) ) ) count ) 2 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Container'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'c'
          |  |  |  \-[IDENT] Node: 'manyToMany'
          |  |  \-[METHOD_CALL] Node: '('
          |  |     +-[IDENT] Node: 'maxindex'
          |  |     \-[EXPR_LIST] Node: 'exprList'
          |  |        \-[DOT] Node: '.'
          |  |           +-[IDENT] Node: 'c'
          |  |           \-[IDENT] Node: 'manyToMany'
          |  \-[WEIRD_IDENT] Node: 'count'
          \-[NUM_INT] Node: '2'

input: ->select c from c in class org.hibernate.test.Container where c.oneToMany[ c.manyToMany[0].count ].name = 's'<-
14:13:29,571 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = ( . ( [ ( . c oneToMany ) ( . ( [ ( . c manyToMany ) 0 ) count ) ) name ) 's' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Container'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'c'
          |  |  |  \-[IDENT] Node: 'oneToMany'
          |  |  \-[DOT] Node: '.'
          |  |     +-[INDEX_OP] Node: '['
          |  |     |  +-[DOT] Node: '.'
          |  |     |  |  +-[IDENT] Node: 'c'
          |  |     |  |  \-[IDENT] Node: 'manyToMany'
          |  |     |  \-[NUM_INT] Node: '0'
          |  |     \-[WEIRD_IDENT] Node: 'count'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''s''

input: ->select c from org.hibernate.test.Container c where c.manyToMany[ c.oneToMany[0].count ].name = 's'<-
14:13:29,581 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = ( . ( [ ( . c manyToMany ) ( . ( [ ( . c oneToMany ) 0 ) count ) ) name ) 's' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Container'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'c'
          |  |  |  \-[IDENT] Node: 'manyToMany'
          |  |  \-[DOT] Node: '.'
          |  |     +-[INDEX_OP] Node: '['
          |  |     |  +-[DOT] Node: '.'
          |  |     |  |  +-[IDENT] Node: 'c'
          |  |     |  |  \-[IDENT] Node: 'oneToMany'
          |  |     |  \-[NUM_INT] Node: '0'
          |  |     \-[WEIRD_IDENT] Node: 'count'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''s''

input: ->select count(comp.name) from org.hibernate.test.Container c join c.components comp<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( join ( . c components ) comp ) ) ( select ( count ( . comp name ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Container'
       |  |  \-[ALIAS] Node: 'c'
       |  \-[JOIN] Node: 'join'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 'c'
       |     |  \-[IDENT] Node: 'components'
       |     \-[ALIAS] Node: 'comp'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'comp'
                \-[IDENT] Node: 'name'

input: ->from org.hibernate.test.Parent p left join fetch p.child<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Parent ) p ) ( join left fetch ( . p child ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Parent'
          |  \-[ALIAS] Node: 'p'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'p'
                \-[IDENT] Node: 'child'

input: ->from org.hibernate.test.Parent p join p.child c where c.x > 0<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Parent ) p ) ( join ( . p child ) c ) ) ) ( where ( > ( . c x ) 0 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Parent'
    |     |  \-[ALIAS] Node: 'p'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'p'
    |        |  \-[IDENT] Node: 'child'
    |        \-[ALIAS] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'c'
          |  \-[IDENT] Node: 'x'
          \-[NUM_INT] Node: '0'

input: ->from org.hibernate.test.Child c join c.parent p where p.x > 0<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) c ) ( join ( . c parent ) p ) ) ) ( where ( > ( . p x ) 0 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Child'
    |     |  \-[ALIAS] Node: 'c'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'c'
    |        |  \-[IDENT] Node: 'parent'
    |        \-[ALIAS] Node: 'p'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'p'
          |  \-[IDENT] Node: 'x'
          \-[NUM_INT] Node: '0'

input: ->from org.hibernate.test.Child<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Child'

input: ->from org.hibernate.test.MoreStuff<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) MoreStuff ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'MoreStuff'

input: ->from org.hibernate.test.Many<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Many ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Many'

input: ->from org.hibernate.test.Fee<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Fee'

input: ->from org.hibernate.test.Qux<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Qux'

input: ->from org.hibernate.test.Fumm<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fumm ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Fumm'

input: ->from org.hibernate.test.Parent<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Parent ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Parent'

input: ->from org.hibernate.test.Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Simple'

input: ->from org.hibernate.test.Holder<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Holder'

input: ->from org.hibernate.test.Part<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Part ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Part'

input: ->from org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Baz'

input: ->from org.hibernate.test.Vetoer<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Vetoer ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Vetoer'

input: ->from org.hibernate.test.Sortable<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Sortable ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Sortable'

input: ->from org.hibernate.test.Contained<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Contained ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Contained'

input: ->from org.hibernate.test.Circular<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Circular ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Circular'

input: ->from org.hibernate.test.Stuff<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Stuff'

input: ->from org.hibernate.test.Immutable<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Immutable ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Immutable'

input: ->from org.hibernate.test.Container<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Container'

input: ->from org.hibernate.test.One<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'One'

input: ->from org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Foo'

input: ->from org.hibernate.test.Fo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Fo'

input: ->from org.hibernate.test.Glarch<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Glarch'

input: ->from org.hibernate.test.Fum<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Fum'

input: ->from org.hibernate.test.Glarch g<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Glarch'
             \-[ALIAS] Node: 'g'

input: ->from org.hibernate.test.Part<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Part ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Part'

input: ->from org.hibernate.test.Baz baz join baz.parts<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz parts ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Baz'
          |  \-[ALIAS] Node: 'baz'
          \-[JOIN] Node: 'join'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'baz'
                \-[IDENT] Node: 'parts'

input: ->from c in class org.hibernate.test.Child where c.parent.count=66<-
14:13:29,759 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) c ) ) ) ( where ( = ( . ( . c parent ) count ) 66 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Child'
    |        \-[ALIAS] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'c'
          |  |  \-[IDENT] Node: 'parent'
          |  \-[WEIRD_IDENT] Node: 'count'
          \-[NUM_INT] Node: '66'

input: ->from org.hibernate.test.Parent p join p.child c where p.count=66<-
14:13:29,770 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=56,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Parent ) p ) ( join ( . p child ) c ) ) ) ( where ( = ( . p count ) 66 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Parent'
    |     |  \-[ALIAS] Node: 'p'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'p'
    |        |  \-[IDENT] Node: 'child'
    |        \-[ALIAS] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'p'
          |  \-[IDENT] Node: 'count'
          \-[NUM_INT] Node: '66'

input: ->select c, c.parent from c in class org.hibernate.test.Child order by c.parent.count<-
14:13:29,782 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) c ) ) ( select c ( . c parent ) ) ) ( order ( . ( . c parent ) count ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Child'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'c'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'c'
    |        \-[IDENT] Node: 'parent'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'c'
          |  \-[IDENT] Node: 'parent'
          \-[WEIRD_IDENT] Node: 'count'

input: ->select c, c.parent from c in class org.hibernate.test.Child where c.parent.count=66 order by c.parent.count<-
14:13:29,783 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
14:13:29,783 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) c ) ) ( select c ( . c parent ) ) ) ( where ( = ( . ( . c parent ) count ) 66 ) ) ( order ( . ( . c parent ) count ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Child'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'c'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'c'
    |        \-[IDENT] Node: 'parent'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'c'
    |     |  |  \-[IDENT] Node: 'parent'
    |     |  \-[WEIRD_IDENT] Node: 'count'
    |     \-[NUM_INT] Node: '66'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'c'
          |  \-[IDENT] Node: 'parent'
          \-[WEIRD_IDENT] Node: 'count'

input: ->select c, c.parent, c.parent.count from c in class org.hibernate.test.Child order by c.parent.count<-
14:13:29,795 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
14:13:29,795 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) c ) ) ( select c ( . c parent ) ( . ( . c parent ) count ) ) ) ( order ( . ( . c parent ) count ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Child'
    |  |     \-[ALIAS] Node: 'c'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'c'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'c'
    |     |  \-[IDENT] Node: 'parent'
    |     \-[DOT] Node: '.'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'c'
    |        |  \-[IDENT] Node: 'parent'
    |        \-[WEIRD_IDENT] Node: 'count'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'c'
          |  \-[IDENT] Node: 'parent'
          \-[WEIRD_IDENT] Node: 'count'

input: ->FROM p IN CLASS org.hibernate.test.Parent WHERE p.count = ?<-
14:13:29,807 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=50,possibleID=false]
AST  :   ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Parent ) p ) ) ) ( WHERE ( = ( . p count ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'FROM'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Parent'
    |        \-[ALIAS] Node: 'p'
    \-[WHERE] Node: 'WHERE'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'p'
          |  \-[IDENT] Node: 'count'
          \-[PARAM] Node: '?'

input: ->select count(*) from org.hibernate.test.Container as c join c.components as ce join ce.simple as s where ce.name='foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( join ( . c components ) ce ) ( join ( . ce simple ) s ) ) ( select ( count * ) ) ) ( where ( = ( . ce name ) 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Container'
    |  |  |  \-[ALIAS] Node: 'c'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'c'
    |  |  |  |  \-[IDENT] Node: 'components'
    |  |  |  \-[ALIAS] Node: 'ce'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'ce'
    |  |     |  \-[IDENT] Node: 'simple'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'ce'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''foo''

input: ->select c, s from org.hibernate.test.Container as c join c.components as ce join ce.simple as s where ce.name='foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( join ( . c components ) ce ) ( join ( . ce simple ) s ) ) ( select c s ) ) ( where ( = ( . ce name ) 'foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Container'
    |  |  |  \-[ALIAS] Node: 'c'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'c'
    |  |  |  |  \-[IDENT] Node: 'components'
    |  |  |  \-[ALIAS] Node: 'ce'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'ce'
    |  |     |  \-[IDENT] Node: 'simple'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     +-[IDENT] Node: 'c'
    |     \-[IDENT] Node: 's'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'ce'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''foo''

input: ->from s in class org.hibernate.test.Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Simple'
             \-[ALIAS] Node: 's'

input: ->from m in class org.hibernate.test.Many<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Many ) m ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Many'
             \-[ALIAS] Node: 'm'

input: ->from o in class org.hibernate.test.One<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'One'
             \-[ALIAS] Node: 'o'

input: ->from c in class org.hibernate.test.Container<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Container'
             \-[ALIAS] Node: 'c'

input: ->from o in class org.hibernate.test.Child<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Child'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.MoreStuff<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) MoreStuff ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'MoreStuff'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Many<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Many ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Many'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fee<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fee'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Qux<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Qux'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fumm<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fumm ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fumm'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Parent<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Parent ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Parent'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Simple'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Holder<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Holder'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Part<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Part ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Part'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Baz<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Baz'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Vetoer<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Vetoer ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Vetoer'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Sortable<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Sortable ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Sortable'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Contained<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Contained ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Contained'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Circular<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Circular ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Circular'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Stuff<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Stuff'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Immutable<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Immutable ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Immutable'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Container<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Container'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.One<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'One'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fo'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Glarch<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Glarch'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Fum<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Fum'
             \-[ALIAS] Node: 'o'

input: ->from c in class org.hibernate.test.C2 where 1=1 or 1=1<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) C2 ) c ) ) ) ( where ( or ( = 1 1 ) ( = 1 1 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'C2'
    |        \-[ALIAS] Node: 'c'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[EQ] Node: '='
          |  +-[NUM_INT] Node: '1'
          |  \-[NUM_INT] Node: '1'
          \-[EQ] Node: '='
             +-[NUM_INT] Node: '1'
             \-[NUM_INT] Node: '1'

input: ->from b in class org.hibernate.test.B<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) B ) b ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'B'
             \-[ALIAS] Node: 'b'

input: ->from a in class org.hibernate.test.A<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) A ) a ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'A'
             \-[ALIAS] Node: 'a'

input: ->from b in class org.hibernate.test.B<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) B ) b ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'B'
             \-[ALIAS] Node: 'b'

input: ->from org.hibernate.test.E e join e.reverse as b where b.count=1<-
14:13:30,050 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=56,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) E ) e ) ( join ( . e reverse ) b ) ) ) ( where ( = ( . b count ) 1 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'E'
    |     |  \-[ALIAS] Node: 'e'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'e'
    |        |  \-[IDENT] Node: 'reverse'
    |        \-[ALIAS] Node: 'b'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'b'
          |  \-[IDENT] Node: 'count'
          \-[NUM_INT] Node: '1'

input: ->from org.hibernate.test.E e join e.as as b where b.count=1<-
14:13:30,062 DEBUG ErrorCounter:63 - Keyword  'as' is being interpreted as an identifier due to: expecting IDENT, found 'as'
14:13:30,062 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=51,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) E ) e ) ( join ( . e as ) b ) ) ) ( where ( = ( . b count ) 1 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'E'
    |     |  \-[ALIAS] Node: 'e'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'e'
    |        |  \-[WEIRD_IDENT] Node: 'as'
    |        \-[ALIAS] Node: 'b'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'b'
          |  \-[IDENT] Node: 'count'
          \-[NUM_INT] Node: '1'

input: ->from org.hibernate.test.B<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) B ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'B'

input: ->from org.hibernate.test.C1<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) C1 ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'C1'

input: ->from org.hibernate.test.C2<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) C2 ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'C2'

input: ->from org.hibernate.test.E e, org.hibernate.test.A a where e.reverse = a.forward and a = ?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) E ) e ) ( RANGE ( . ( . ( . org hibernate ) test ) A ) a ) ) ) ( where ( and ( = ( . e reverse ) ( . a forward ) ) ( = a ? ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'E'
    |     |  \-[ALIAS] Node: 'e'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'A'
    |        \-[ALIAS] Node: 'a'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'e'
          |  |  \-[IDENT] Node: 'reverse'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'a'
          |     \-[IDENT] Node: 'forward'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'a'
             \-[PARAM] Node: '?'

input: ->from org.hibernate.test.E e join fetch e.reverse<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) E ) e ) ( join fetch ( . e reverse ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'E'
          |  \-[ALIAS] Node: 'e'
          \-[JOIN] Node: 'join'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'e'
                \-[IDENT] Node: 'reverse'

input: ->from org.hibernate.test.E e<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) E ) e ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'E'
             \-[ALIAS] Node: 'e'

input: ->select max(s.count) from s in class org.hibernate.test.Simple<-
14:13:30,112 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=13,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( max ( . s count ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Simple'
       |     \-[ALIAS] Node: 's'
       \-[SELECT] Node: 'select'
          \-[AGGREGATE] Node: 'max'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 's'
                \-[IDENT] Node: 'count'

input: ->select new org.hibernate.test.S(s.count, s.address) from s in class org.hibernate.test.Simple<-
14:13:30,122 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=34,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( ( ( . ( . ( . org hibernate ) test ) S ) ( . s count ) ( . s address ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Simple'
       |     \-[ALIAS] Node: 's'
       \-[SELECT] Node: 'select'
          \-[CONSTRUCTOR] Node: '('
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'S'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 's'
             |  \-[IDENT] Node: 'count'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 's'
                \-[IDENT] Node: 'address'

input: ->select max(s.count) from s in class org.hibernate.test.Simple<-
14:13:30,131 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=13,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( max ( . s count ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Simple'
       |     \-[ALIAS] Node: 's'
       \-[SELECT] Node: 'select'
          \-[AGGREGATE] Node: 'max'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 's'
                \-[IDENT] Node: 'count'

input: ->select count(*) from s in class org.hibernate.test.Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( count * ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Simple'
       |     \-[ALIAS] Node: 's'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[ROW_STAR] Node: '*'

input: ->from s in class org.hibernate.test.Simple where s.name=:name and s.count=:count<-
14:13:30,141 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=67,possibleID=false]
14:13:30,142 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( and ( = ( . s name ) ( : name ) ) ( = ( . s count ) ( : count ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 's'
          |  |  \-[IDENT] Node: 'name'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'name'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 's'
             |  \-[IDENT] Node: 'count'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'count'

input: ->from s in class org.hibernate.test.Simple where s.name in (:several0_, :several1_)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( in ( . s name ) ( inList ( : several0_ ) ( : several1_ ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 's'
          |  \-[IDENT] Node: 'name'
          \-[IN_LIST] Node: 'inList'
             +-[COLON] Node: ':'
             |  \-[IDENT] Node: 'several0_'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'several1_'

input: ->from s in class org.hibernate.test.Simple where s.name in (:stuff0_, :stuff1_)<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( in ( . s name ) ( inList ( : stuff0_ ) ( : stuff1_ ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[IN] Node: 'in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 's'
          |  \-[IDENT] Node: 'name'
          \-[IN_LIST] Node: 'inList'
             +-[COLON] Node: ':'
             |  \-[IDENT] Node: 'stuff0_'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'stuff1_'

input: ->from org.hibernate.test.Simple s where s.name=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( = ( . s name ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 's'
          |  \-[IDENT] Node: 'name'
          \-[PARAM] Node: '?'

input: ->from org.hibernate.test.Simple s where s.name=:name<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( = ( . s name ) ( : name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 's'
          |  \-[IDENT] Node: 'name'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'name'

input: ->from s in class org.hibernate.test.Simple where upper( s.name ) ='SIMPLE 1'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( = ( ( upper ( exprList ( . s name ) ) ) 'SIMPLE 1' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'upper'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[DOT] Node: '.'
          |        +-[IDENT] Node: 's'
          |        \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''SIMPLE 1''

input: ->from s in class org.hibernate.test.Simple where not( upper( s.name ) ='yada' or 1=2 or 'foo'='bar' or not('foo'='foo') or 'foo' like 'bar' )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( {and} ( {and} ( {and} ( {and} ( {not}= ( ( upper ( exprList ( . s name ) ) ) 'yada' ) ( {not}= 1 2 ) ) ( {not}= 'foo' 'bar' ) ) ( {not}{not}= 'foo' 'foo' ) ) ( {not}like 'foo' 'bar' ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[AND] Node: '{and}'
          +-[AND] Node: '{and}'
          |  +-[AND] Node: '{and}'
          |  |  +-[AND] Node: '{and}'
          |  |  |  +-[NE] Node: '{not}='
          |  |  |  |  +-[METHOD_CALL] Node: '('
          |  |  |  |  |  +-[IDENT] Node: 'upper'
          |  |  |  |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |  |  |  |     \-[DOT] Node: '.'
          |  |  |  |  |        +-[IDENT] Node: 's'
          |  |  |  |  |        \-[IDENT] Node: 'name'
          |  |  |  |  \-[QUOTED_STRING] Node: ''yada''
          |  |  |  \-[NE] Node: '{not}='
          |  |  |     +-[NUM_INT] Node: '1'
          |  |  |     \-[NUM_INT] Node: '2'
          |  |  \-[NE] Node: '{not}='
          |  |     +-[QUOTED_STRING] Node: ''foo''
          |  |     \-[QUOTED_STRING] Node: ''bar''
          |  \-[EQ] Node: '{not}{not}='
          |     +-[QUOTED_STRING] Node: ''foo''
          |     \-[QUOTED_STRING] Node: ''foo''
          \-[NOT_LIKE] Node: '{not}like'
             +-[QUOTED_STRING] Node: ''foo''
             \-[QUOTED_STRING] Node: ''bar''

input: ->from s in class org.hibernate.test.Simple where lower( s.name || ' foo' ) ='simple 1 foo'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( = ( ( lower ( exprList ( || concat ( concatList ( . s name ) ' foo' ) ) ) ) 'simple 1 foo' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'lower'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[METHOD_CALL] Node: '||'
          |        +-[IDENT] Node: 'concat'
          |        \-[EXPR_LIST] Node: 'concatList'
          |           +-[DOT] Node: '.'
          |           |  +-[IDENT] Node: 's'
          |           |  \-[IDENT] Node: 'name'
          |           \-[QUOTED_STRING] Node: '' foo''
          \-[QUOTED_STRING] Node: ''simple 1 foo''

input: ->from s in class org.hibernate.test.Simple where upper( s.other.name ) ='SIMPLE 2'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( = ( ( upper ( exprList ( . ( . s other ) name ) ) ) 'SIMPLE 2' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'upper'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[DOT] Node: '.'
          |        +-[DOT] Node: '.'
          |        |  +-[IDENT] Node: 's'
          |        |  \-[IDENT] Node: 'other'
          |        \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''SIMPLE 2''

input: ->from s in class org.hibernate.test.Simple where not ( upper( s.other.name ) ='SIMPLE 2' )<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( {not}= ( ( upper ( exprList ( . ( . s other ) name ) ) ) 'SIMPLE 2' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[NE] Node: '{not}='
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'upper'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[DOT] Node: '.'
          |        +-[DOT] Node: '.'
          |        |  +-[IDENT] Node: 's'
          |        |  \-[IDENT] Node: 'other'
          |        \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''SIMPLE 2''

input: ->select distinct s from s in class org.hibernate.test.Simple where ( ( s.other.count + 3 ) = (15*2)/2 and s.count = 69) or ( ( s.other.count + 2 ) / 7 ) = 2<-
14:13:30,237 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
14:13:30,237 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=107,possibleID=false]
14:13:30,238 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select distinct s ) ) ( where ( or ( and ( = ( + ( . ( . s other ) count ) 3 ) ( / ( * 15 2 ) 2 ) ) ( = ( . s count ) 69 ) ) ( = ( / ( + ( . ( . s other ) count ) 2 ) 7 ) 2 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Simple'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     +-[DISTINCT] Node: 'distinct'
    |     \-[IDENT] Node: 's'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[AND] Node: 'and'
          |  +-[EQ] Node: '='
          |  |  +-[PLUS] Node: '+'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[DOT] Node: '.'
          |  |  |  |  |  +-[IDENT] Node: 's'
          |  |  |  |  |  \-[IDENT] Node: 'other'
          |  |  |  |  \-[WEIRD_IDENT] Node: 'count'
          |  |  |  \-[NUM_INT] Node: '3'
          |  |  \-[DIV] Node: '/'
          |  |     +-[STAR] Node: '*'
          |  |     |  +-[NUM_INT] Node: '15'
          |  |     |  \-[NUM_INT] Node: '2'
          |  |     \-[NUM_INT] Node: '2'
          |  \-[EQ] Node: '='
          |     +-[DOT] Node: '.'
          |     |  +-[IDENT] Node: 's'
          |     |  \-[IDENT] Node: 'count'
          |     \-[NUM_INT] Node: '69'
          \-[EQ] Node: '='
             +-[DIV] Node: '/'
             |  +-[PLUS] Node: '+'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[DOT] Node: '.'
             |  |  |  |  +-[IDENT] Node: 's'
             |  |  |  |  \-[IDENT] Node: 'other'
             |  |  |  \-[WEIRD_IDENT] Node: 'count'
             |  |  \-[NUM_INT] Node: '2'
             |  \-[NUM_INT] Node: '7'
             \-[NUM_INT] Node: '2'

input: ->select s from s in class org.hibernate.test.Simple where ( ( s.other.count + 3 ) = (15*2)/2 and s.count = 69) or ( ( s.other.count + 2 ) / 7 ) = 2 order by s.other.count<-
14:13:30,270 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
14:13:30,270 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=98,possibleID=false]
14:13:30,271 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
14:13:30,271 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select s ) ) ( where ( or ( and ( = ( + ( . ( . s other ) count ) 3 ) ( / ( * 15 2 ) 2 ) ) ( = ( . s count ) 69 ) ) ( = ( / ( + ( . ( . s other ) count ) 2 ) 7 ) 2 ) ) ) ( order ( . ( . s other ) count ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Simple'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 's'
    +-[WHERE] Node: 'where'
    |  \-[OR] Node: 'or'
    |     +-[AND] Node: 'and'
    |     |  +-[EQ] Node: '='
    |     |  |  +-[PLUS] Node: '+'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  |  +-[IDENT] Node: 's'
    |     |  |  |  |  |  \-[IDENT] Node: 'other'
    |     |  |  |  |  \-[WEIRD_IDENT] Node: 'count'
    |     |  |  |  \-[NUM_INT] Node: '3'
    |     |  |  \-[DIV] Node: '/'
    |     |  |     +-[STAR] Node: '*'
    |     |  |     |  +-[NUM_INT] Node: '15'
    |     |  |     |  \-[NUM_INT] Node: '2'
    |     |  |     \-[NUM_INT] Node: '2'
    |     |  \-[EQ] Node: '='
    |     |     +-[DOT] Node: '.'
    |     |     |  +-[IDENT] Node: 's'
    |     |     |  \-[IDENT] Node: 'count'
    |     |     \-[NUM_INT] Node: '69'
    |     \-[EQ] Node: '='
    |        +-[DIV] Node: '/'
    |        |  +-[PLUS] Node: '+'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 's'
    |        |  |  |  |  \-[IDENT] Node: 'other'
    |        |  |  |  \-[WEIRD_IDENT] Node: 'count'
    |        |  |  \-[NUM_INT] Node: '2'
    |        |  \-[NUM_INT] Node: '7'
    |        \-[NUM_INT] Node: '2'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 's'
          |  \-[IDENT] Node: 'other'
          \-[WEIRD_IDENT] Node: 'count'

input: ->select sum(s.count) from s in class org.hibernate.test.Simple group by s.count having sum(s.count) > 10<-
14:13:30,541 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=13,possibleID=false]
14:13:30,542 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=73,possibleID=false]
14:13:30,542 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=92,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( sum ( . s count ) ) ) ) ( group ( . s count ) ( having ( > ( sum ( . s count ) ) 10 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Simple'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'sum'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 's'
    |           \-[IDENT] Node: 'count'
    \-[GROUP] Node: 'group'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 's'
       |  \-[IDENT] Node: 'count'
       \-[HAVING] Node: 'having'
          \-[GT] Node: '>'
             +-[AGGREGATE] Node: 'sum'
             |  \-[DOT] Node: '.'
             |     +-[IDENT] Node: 's'
             |     \-[IDENT] Node: 'count'
             \-[NUM_INT] Node: '10'

input: ->select s.count from s in class org.hibernate.test.Simple group by s.count having s.count = 12<-
14:13:31,218 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=9,possibleID=false]
14:13:31,219 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=68,possibleID=false]
14:13:31,219 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=83,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( . s count ) ) ) ( group ( . s count ) ( having ( = ( . s count ) 12 ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Simple'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 's'
    |        \-[IDENT] Node: 'count'
    \-[GROUP] Node: 'group'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 's'
       |  \-[IDENT] Node: 'count'
       \-[HAVING] Node: 'having'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 's'
             |  \-[IDENT] Node: 'count'
             \-[NUM_INT] Node: '12'

input: ->select s.id, s.count, count(t), max(t.date) from s in class org.hibernate.test.Simple, t in class org.hibernate.test.Simple where s.count = t.count group by s.id, s.count order by s.count<-
14:13:31,545 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=15,possibleID=false]
14:13:31,546 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=132,possibleID=false]
14:13:31,546 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=142,possibleID=false]
14:13:31,547 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=165,possibleID=false]
14:13:31,547 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=182,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) t ) ) ( select ( . s id ) ( . s count ) ( count t ) ( max ( . t date ) ) ) ) ( where ( = ( . s count ) ( . t count ) ) ) ( group ( . s id ) ( . s count ) ) ( order ( . s count ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Simple'
    |  |  |  \-[ALIAS] Node: 's'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Simple'
    |  |     \-[ALIAS] Node: 't'
    |  \-[SELECT] Node: 'select'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 's'
    |     |  \-[IDENT] Node: 'id'
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 's'
    |     |  \-[IDENT] Node: 'count'
    |     +-[COUNT] Node: 'count'
    |     |  \-[IDENT] Node: 't'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 't'
    |           \-[IDENT] Node: 'date'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 's'
    |     |  \-[IDENT] Node: 'count'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 't'
    |        \-[IDENT] Node: 'count'
    +-[GROUP] Node: 'group'
    |  +-[DOT] Node: '.'
    |  |  +-[IDENT] Node: 's'
    |  |  \-[IDENT] Node: 'id'
    |  \-[DOT] Node: '.'
    |     +-[IDENT] Node: 's'
    |     \-[IDENT] Node: 'count'
    \-[ORDER] Node: 'order'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 's'
          \-[IDENT] Node: 'count'

input: ->from s in class org.hibernate.test.Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Simple'
             \-[ALIAS] Node: 's'

input: ->from s in class org.hibernate.test.Simple where s.name = ?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( = ( . s name ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 's'
          |  \-[IDENT] Node: 'name'
          \-[PARAM] Node: '?'

input: ->from s in class org.hibernate.test.Simple where s.name = ? and upper(s.name) = ?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( and ( = ( . s name ) ? ) ( = ( ( upper ( exprList ( . s name ) ) ) ? ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 's'
          |  |  \-[IDENT] Node: 'name'
          |  \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[METHOD_CALL] Node: '('
             |  +-[IDENT] Node: 'upper'
             |  \-[EXPR_LIST] Node: 'exprList'
             |     \-[DOT] Node: '.'
             |        +-[IDENT] Node: 's'
             |        \-[IDENT] Node: 'name'
             \-[PARAM] Node: '?'

input: ->from s in class org.hibernate.test.Simple where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1<-
14:13:33,348 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=92,possibleID=false]
14:13:33,348 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
14:13:33,349 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=110,possibleID=false]
14:13:33,349 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( or ( or ( and ( = ( . s name ) ( : foo ) ) ( = ( ( upper ( exprList ( . s name ) ) ) ( : bar ) ) ) ( = ( . s count ) ( : count ) ) ) ( = ( . s count ) ( + ( : count ) 1 ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[OR] Node: 'or'
          |  +-[AND] Node: 'and'
          |  |  +-[EQ] Node: '='
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 's'
          |  |  |  |  \-[IDENT] Node: 'name'
          |  |  |  \-[COLON] Node: ':'
          |  |  |     \-[IDENT] Node: 'foo'
          |  |  \-[EQ] Node: '='
          |  |     +-[METHOD_CALL] Node: '('
          |  |     |  +-[IDENT] Node: 'upper'
          |  |     |  \-[EXPR_LIST] Node: 'exprList'
          |  |     |     \-[DOT] Node: '.'
          |  |     |        +-[IDENT] Node: 's'
          |  |     |        \-[IDENT] Node: 'name'
          |  |     \-[COLON] Node: ':'
          |  |        \-[IDENT] Node: 'bar'
          |  \-[EQ] Node: '='
          |     +-[DOT] Node: '.'
          |     |  +-[IDENT] Node: 's'
          |     |  \-[IDENT] Node: 'count'
          |     \-[COLON] Node: ':'
          |        \-[WEIRD_IDENT] Node: 'count'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 's'
             |  \-[IDENT] Node: 'count'
             \-[PLUS] Node: '+'
                +-[COLON] Node: ':'
                |  \-[WEIRD_IDENT] Node: 'count'
                \-[NUM_INT] Node: '1'

input: ->select s.id from s in class org.hibernate.test.Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( . s id ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Simple'
       |     \-[ALIAS] Node: 's'
       \-[SELECT] Node: 'select'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 's'
             \-[IDENT] Node: 'id'

input: ->select all s, s.other from s in class org.hibernate.test.Simple where s = :s<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( all s ) ( . s other ) ) ) ( where ( = s ( : s ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Simple'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     +-[ALL] Node: 'all'
    |     |  \-[IDENT] Node: 's'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 's'
    |        \-[IDENT] Node: 'other'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 's'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 's'

input: ->from s in class org.hibernate.test.Simple where s.name in (:name_list0_, :name_list1_) and s.count > :count<-
14:13:33,381 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=93,possibleID=false]
14:13:33,381 DEBUG ErrorCounter:63 - Keyword  'count' is being interpreted as an identifier due to: expecting IDENT, found 'count'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( and ( in ( . s name ) ( inList ( : name_list0_ ) ( : name_list1_ ) ) ) ( > ( . s count ) ( : count ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Simple'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[IN] Node: 'in'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 's'
          |  |  \-[IDENT] Node: 'name'
          |  \-[IN_LIST] Node: 'inList'
          |     +-[COLON] Node: ':'
          |     |  \-[IDENT] Node: 'name_list0_'
          |     \-[COLON] Node: ':'
          |        \-[IDENT] Node: 'name_list1_'
          \-[GT] Node: '>'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 's'
             |  \-[IDENT] Node: 'count'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'count'

input: ->from org.hibernate.test.Simple s<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Simple'
             \-[ALIAS] Node: 's'

input: ->from org.hibernate.test.Simple s<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Simple'
             \-[ALIAS] Node: 's'

input: ->from org.hibernate.test.Assignable<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Assignable ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Assignable'

input: ->from org.hibernate.test.Category<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Category ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Category'

input: ->from org.hibernate.test.Simple<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Simple'

input: ->from org.hibernate.test.A<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) A ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'A'

input: ->from foo in class org.hibernate.test.Foo where foo.string=?<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo string ) ? ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Foo'
    |        \-[ALIAS] Node: 'foo'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'foo'
          |  \-[IDENT] Node: 'string'
          \-[PARAM] Node: '?'

input: ->from foo in class org.hibernate.test.Foo<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Foo'
             \-[ALIAS] Node: 'foo'

input: ->from org.hibernate.test.Po po, org.hibernate.test.Lower low where low.mypo = po<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Po ) po ) ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) low ) ) ) ( where ( = ( . low mypo ) po ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Po'
    |     |  \-[ALIAS] Node: 'po'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Lower'
    |        \-[ALIAS] Node: 'low'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'low'
          |  \-[IDENT] Node: 'mypo'
          \-[IDENT] Node: 'po'

input: ->from org.hibernate.test.Po po join po.set as sm where sm.amount > 0<-
14:13:33,925 DEBUG ErrorCounter:63 - Keyword  'set' is being interpreted as an identifier due to: expecting IDENT, found 'set'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Po ) po ) ( join ( . po set ) sm ) ) ) ( where ( > ( . sm amount ) 0 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Po'
    |     |  \-[ALIAS] Node: 'po'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'po'
    |        |  \-[WEIRD_IDENT] Node: 'set'
    |        \-[ALIAS] Node: 'sm'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'sm'
          |  \-[IDENT] Node: 'amount'
          \-[NUM_INT] Node: '0'

input: ->from org.hibernate.test.Po po join po.top as low where low.foo = 'po'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Po ) po ) ( join ( . po top ) low ) ) ) ( where ( = ( . low foo ) 'po' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Po'
    |     |  \-[ALIAS] Node: 'po'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'po'
    |        |  \-[IDENT] Node: 'top'
    |        \-[ALIAS] Node: 'low'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'low'
          |  \-[IDENT] Node: 'foo'
          \-[QUOTED_STRING] Node: ''po''

input: ->from org.hibernate.test.SubMulti sm join sm.children smc where smc.name > 'a'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) sm ) ( join ( . sm children ) smc ) ) ) ( where ( > ( . smc name ) 'a' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'SubMulti'
    |     |  \-[ALIAS] Node: 'sm'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'sm'
    |        |  \-[IDENT] Node: 'children'
    |        \-[ALIAS] Node: 'smc'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'smc'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''a''

input: ->select s, ya from org.hibernate.test.Lower s join s.yetanother ya<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ( join ( . s yetanother ) ya ) ) ( select s ya ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Lower'
       |  |  \-[ALIAS] Node: 's'
       |  \-[JOIN] Node: 'join'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 's'
       |     |  \-[IDENT] Node: 'yetanother'
       |     \-[ALIAS] Node: 'ya'
       \-[SELECT] Node: 'select'
          +-[IDENT] Node: 's'
          \-[IDENT] Node: 'ya'

input: ->from org.hibernate.test.Lower s1 join s1.bag s2<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s1 ) ( join ( . s1 bag ) s2 ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Lower'
          |  \-[ALIAS] Node: 's1'
          \-[JOIN] Node: 'join'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 's1'
             |  \-[IDENT] Node: 'bag'
             \-[ALIAS] Node: 's2'

input: ->from org.hibernate.test.Lower s1 left join s1.bag s2<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s1 ) ( join left ( . s1 bag ) s2 ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Lower'
          |  \-[ALIAS] Node: 's1'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 's1'
             |  \-[IDENT] Node: 'bag'
             \-[ALIAS] Node: 's2'

input: ->select s, a from org.hibernate.test.Lower s join s.another a<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ( join ( . s another ) a ) ) ( select s a ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Lower'
       |  |  \-[ALIAS] Node: 's'
       |  \-[JOIN] Node: 'join'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 's'
       |     |  \-[IDENT] Node: 'another'
       |     \-[ALIAS] Node: 'a'
       \-[SELECT] Node: 'select'
          +-[IDENT] Node: 's'
          \-[IDENT] Node: 'a'

input: ->select s, a from org.hibernate.test.Lower s left join s.another a<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ( join left ( . s another ) a ) ) ( select s a ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  +-[RANGE] Node: 'RANGE'
       |  |  +-[DOT] Node: '.'
       |  |  |  +-[DOT] Node: '.'
       |  |  |  |  +-[DOT] Node: '.'
       |  |  |  |  |  +-[IDENT] Node: 'org'
       |  |  |  |  |  \-[IDENT] Node: 'hibernate'
       |  |  |  |  \-[IDENT] Node: 'test'
       |  |  |  \-[IDENT] Node: 'Lower'
       |  |  \-[ALIAS] Node: 's'
       |  \-[JOIN] Node: 'join'
       |     +-[LEFT] Node: 'left'
       |     +-[DOT] Node: '.'
       |     |  +-[IDENT] Node: 's'
       |     |  \-[IDENT] Node: 'another'
       |     \-[ALIAS] Node: 'a'
       \-[SELECT] Node: 'select'
          +-[IDENT] Node: 's'
          \-[IDENT] Node: 'a'

input: ->from org.hibernate.test.Top s, org.hibernate.test.Lower ls<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  \-[IDENT] Node: 'test'
          |  |  \-[IDENT] Node: 'Top'
          |  \-[ALIAS] Node: 's'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Lower'
             \-[ALIAS] Node: 'ls'

input: ->from org.hibernate.test.Lower ls join ls.set s where s.name > 'a'<-
14:13:34,622 DEBUG ErrorCounter:63 - Keyword  'set' is being interpreted as an identifier due to: expecting IDENT, found 'set'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ( join ( . ls set ) s ) ) ) ( where ( > ( . s name ) 'a' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Lower'
    |     |  \-[ALIAS] Node: 'ls'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'ls'
    |        |  \-[WEIRD_IDENT] Node: 'set'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 's'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''a''

input: ->from org.hibernate.test.Po po join po.list sm where sm.name > 'a'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Po ) po ) ( join ( . po list ) sm ) ) ) ( where ( > ( . sm name ) 'a' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Po'
    |     |  \-[ALIAS] Node: 'po'
    |     \-[JOIN] Node: 'join'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'po'
    |        |  \-[IDENT] Node: 'list'
    |        \-[ALIAS] Node: 'sm'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'sm'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''a''

input: ->from org.hibernate.test.Lower ls inner join ls.another s where s.name is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ( join inner ( . ls another ) s ) ) ) ( where ( is not null ( . s name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Lower'
    |     |  \-[ALIAS] Node: 'ls'
    |     \-[JOIN] Node: 'join'
    |        +-[INNER] Node: 'inner'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'ls'
    |        |  \-[IDENT] Node: 'another'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 's'
             \-[IDENT] Node: 'name'

input: ->from org.hibernate.test.Lower ls where ls.other.another.name is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ) ) ( where ( is not null ( . ( . ( . ls other ) another ) name ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Lower'
    |        \-[ALIAS] Node: 'ls'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[IDENT] Node: 'ls'
             |  |  \-[IDENT] Node: 'other'
             |  \-[IDENT] Node: 'another'
             \-[IDENT] Node: 'name'

input: ->from org.hibernate.test.Multi m where m.derived like 'F%'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Multi ) m ) ) ) ( where ( like ( . m derived ) 'F%' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Multi'
    |        \-[ALIAS] Node: 'm'
    \-[WHERE] Node: 'where'
       \-[LIKE] Node: 'like'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'm'
          |  \-[IDENT] Node: 'derived'
          \-[QUOTED_STRING] Node: ''F%''

input: ->from org.hibernate.test.SubMulti m where m.derived like 'F%'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) m ) ) ) ( where ( like ( . m derived ) 'F%' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'SubMulti'
    |        \-[ALIAS] Node: 'm'
    \-[WHERE] Node: 'where'
       \-[LIKE] Node: 'like'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'm'
          |  \-[IDENT] Node: 'derived'
          \-[QUOTED_STRING] Node: ''F%''

input: ->select s from org.hibernate.test.SubMulti as sm join sm.children as s where s.amount>-1 and s.name is null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) sm ) ( join ( . sm children ) s ) ) ( select s ) ) ( where ( and ( > ( . s amount ) ( - 1 ) ) ( is null ( . s name ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'SubMulti'
    |  |  |  \-[ALIAS] Node: 'sm'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'sm'
    |  |     |  \-[IDENT] Node: 'children'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 's'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[GT] Node: '>'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 's'
          |  |  \-[IDENT] Node: 'amount'
          |  \-[UNARY_MINUS] Node: '-'
          |     \-[NUM_INT] Node: '1'
          \-[IS_NULL] Node: 'is null'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 's'
                \-[IDENT] Node: 'name'

input: ->select elements(sm.children) from org.hibernate.test.SubMulti as sm<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) sm ) ) ( select ( elements ( . sm children ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'SubMulti'
       |     \-[ALIAS] Node: 'sm'
       \-[SELECT] Node: 'select'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'sm'
                \-[IDENT] Node: 'children'

input: ->select distinct sm from org.hibernate.test.SubMulti as sm join sm.children as s where s.amount>-1 and s.name is null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) sm ) ( join ( . sm children ) s ) ) ( select distinct sm ) ) ( where ( and ( > ( . s amount ) ( - 1 ) ) ( is null ( . s name ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'SubMulti'
    |  |  |  \-[ALIAS] Node: 'sm'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'sm'
    |  |     |  \-[IDENT] Node: 'children'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     +-[DISTINCT] Node: 'distinct'
    |     \-[IDENT] Node: 'sm'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[GT] Node: '>'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 's'
          |  |  \-[IDENT] Node: 'amount'
          |  \-[UNARY_MINUS] Node: '-'
          |     \-[NUM_INT] Node: '1'
          \-[IS_NULL] Node: 'is null'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 's'
                \-[IDENT] Node: 'name'

input: ->select distinct s from s in class org.hibernate.test.SubMulti where s.moreChildren[1].amount < 1.0<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) s ) ) ( select distinct s ) ) ( where ( < ( . ( [ ( . s moreChildren ) 1 ) amount ) 1.0 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'SubMulti'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     +-[DISTINCT] Node: 'distinct'
    |     \-[IDENT] Node: 's'
    \-[WHERE] Node: 'where'
       \-[LT] Node: '<'
          +-[DOT] Node: '.'
          |  +-[INDEX_OP] Node: '['
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 's'
          |  |  |  \-[IDENT] Node: 'moreChildren'
          |  |  \-[NUM_INT] Node: '1'
          |  \-[IDENT] Node: 'amount'
          \-[NUM_DOUBLE] Node: '1.0'

input: ->from s in class org.hibernate.test.TrivialClass where s.id = 2<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) TrivialClass ) s ) ) ) ( where ( = ( . s id ) 2 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'TrivialClass'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 's'
          |  \-[IDENT] Node: 'id'
          \-[NUM_INT] Node: '2'

input: ->select s.count from s in class org.hibernate.test.Top<-
14:13:34,752 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=9,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ) ( select ( . s count ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Top'
       |     \-[ALIAS] Node: 's'
       \-[SELECT] Node: 'select'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 's'
             \-[IDENT] Node: 'count'

input: ->from s in class org.hibernate.test.Lower where s.another.name='name'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ) ) ( where ( = ( . ( . s another ) name ) 'name' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Lower'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 's'
          |  |  \-[IDENT] Node: 'another'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''name''

input: ->from s in class org.hibernate.test.Lower where s.yetanother.name='name'<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ) ) ( where ( = ( . ( . s yetanother ) name ) 'name' ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Lower'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 's'
          |  |  \-[IDENT] Node: 'yetanother'
          |  \-[IDENT] Node: 'name'
          \-[QUOTED_STRING] Node: ''name''

input: ->from s in class org.hibernate.test.Lower where s.yetanother.name='name' and s.yetanother.foo is null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ) ) ( where ( and ( = ( . ( . s yetanother ) name ) 'name' ) ( is null ( . ( . s yetanother ) foo ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Lower'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 's'
          |  |  |  \-[IDENT] Node: 'yetanother'
          |  |  \-[IDENT] Node: 'name'
          |  \-[QUOTED_STRING] Node: ''name''
          \-[IS_NULL] Node: 'is null'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 's'
                |  \-[IDENT] Node: 'yetanother'
                \-[IDENT] Node: 'foo'

input: ->from s in class org.hibernate.test.Top where s.count=1<-
14:13:34,754 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=47,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ) ) ( where ( = ( . s count ) 1 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Top'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 's'
          |  \-[IDENT] Node: 'count'
          \-[NUM_INT] Node: '1'

input: ->select s.count from s in class org.hibernate.test.Top, ls in class org.hibernate.test.Lower where ls.another=s<-
14:13:34,776 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=9,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ) ( select ( . s count ) ) ) ( where ( = ( . ls another ) s ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |  |  |  |  \-[IDENT] Node: 'test'
    |  |  |  |  \-[IDENT] Node: 'Top'
    |  |  |  \-[ALIAS] Node: 's'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Lower'
    |  |     \-[ALIAS] Node: 'ls'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 's'
    |        \-[IDENT] Node: 'count'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'ls'
          |  \-[IDENT] Node: 'another'
          \-[IDENT] Node: 's'

input: ->select elements(ls.bag), elements(ls.set) from ls in class org.hibernate.test.Lower<-
14:13:34,793 DEBUG ErrorCounter:63 - Keyword  'set' is being interpreted as an identifier due to: expecting IDENT, found 'set'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ) ( select ( elements ( . ls bag ) ) ( elements ( . ls set ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'org'
       |     |  |  |  \-[IDENT] Node: 'hibernate'
       |     |  |  \-[IDENT] Node: 'test'
       |     |  \-[IDENT] Node: 'Lower'
       |     \-[ALIAS] Node: 'ls'
       \-[SELECT] Node: 'select'
          +-[ELEMENTS] Node: 'elements'
          |  \-[DOT] Node: '.'
          |     +-[IDENT] Node: 'ls'
          |     \-[IDENT] Node: 'bag'
          \-[ELEMENTS] Node: 'elements'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'ls'
                \-[WEIRD_IDENT] Node: 'set'

input: ->from s in class org.hibernate.test.Lower<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Lower'
             \-[ALIAS] Node: 's'

input: ->from s in class org.hibernate.test.Top<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Top'
             \-[ALIAS] Node: 's'

input: ->from sm in class org.hibernate.test.SubMulti<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) sm ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'SubMulti'
             \-[ALIAS] Node: 'sm'

input: ->select

s from s in class org.hibernate.test.Top where s.count>0<-
14:13:34,820 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=3,col=49,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ) ( select s ) ) ( where ( > ( . s count ) 0 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  \-[IDENT] Node: 'test'
    |  |     |  \-[IDENT] Node: 'Top'
    |  |     \-[ALIAS] Node: 's'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 's'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 's'
          |  \-[IDENT] Node: 'count'
          \-[NUM_INT] Node: '0'

input: ->from m in class org.hibernate.test.Multi where m.count>0 and m.extraProp is not null<-
14:13:34,832 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=49,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Multi ) m ) ) ) ( where ( and ( > ( . m count ) 0 ) ( is not null ( . m extraProp ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Multi'
    |        \-[ALIAS] Node: 'm'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[GT] Node: '>'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'm'
          |  |  \-[IDENT] Node: 'count'
          |  \-[NUM_INT] Node: '0'
          \-[IS_NOT_NULL] Node: 'is not null'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'm'
                \-[IDENT] Node: 'extraProp'

input: ->from m in class org.hibernate.test.Top where m.count>0 and m.name is not null<-
14:13:34,843 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=47,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) m ) ) ) ( where ( and ( > ( . m count ) 0 ) ( is not null ( . m name ) ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Top'
    |        \-[ALIAS] Node: 'm'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[GT] Node: '>'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'm'
          |  |  \-[IDENT] Node: 'count'
          |  \-[NUM_INT] Node: '0'
          \-[IS_NOT_NULL] Node: 'is not null'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'm'
                \-[IDENT] Node: 'name'

input: ->from m in class org.hibernate.test.Lower where m.other is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) m ) ) ) ( where ( is not null ( . m other ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Lower'
    |        \-[ALIAS] Node: 'm'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'm'
             \-[IDENT] Node: 'other'

input: ->from m in class org.hibernate.test.Multi where m.other.id = 1<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Multi ) m ) ) ) ( where ( = ( . ( . m other ) id ) 1 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Multi'
    |        \-[ALIAS] Node: 'm'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'm'
          |  |  \-[IDENT] Node: 'other'
          |  \-[IDENT] Node: 'id'
          \-[NUM_INT] Node: '1'

input: ->from m in class org.hibernate.test.SubMulti where m.amount > 0.0<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) m ) ) ) ( where ( > ( . m amount ) 0.0 ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'SubMulti'
    |        \-[ALIAS] Node: 'm'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'm'
          |  \-[IDENT] Node: 'amount'
          \-[NUM_DOUBLE] Node: '0.0'

input: ->from m in class org.hibernate.test.Multi<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Multi ) m ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Multi'
             \-[ALIAS] Node: 'm'

input: ->from m in class org.hibernate.test.Multi where m.class = SubMulti<-
14:13:34,882 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=49,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Multi ) m ) ) ) ( where ( = ( . m class ) SubMulti ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Multi'
    |        \-[ALIAS] Node: 'm'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'm'
          |  \-[IDENT] Node: 'class'
          \-[IDENT] Node: 'SubMulti'

input: ->from m in class org.hibernate.test.Top where m.class = Multi<-
14:13:34,883 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=47,possibleID=false]
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) m ) ) ) ( where ( = ( . m class ) Multi ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  \-[IDENT] Node: 'test'
    |        |  \-[IDENT] Node: 'Top'
    |        \-[ALIAS] Node: 'm'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'm'
          |  \-[IDENT] Node: 'class'
          \-[IDENT] Node: 'Multi'

input: ->from s in class org.hibernate.test.Top<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Top'
             \-[ALIAS] Node: 's'

input: ->from ls in class org.hibernate.test.Lower<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Lower'
             \-[ALIAS] Node: 'ls'

input: ->from ls in class org.hibernate.test.Lower, s in elements(ls.bag) where s.id is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ( join inner ( . ls bag ) s ) ) ) ( where ( is not null ( . s id ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Lower'
    |     |  \-[ALIAS] Node: 'ls'
    |     \-[JOIN] Node: 'join'
    |        +-[INNER] Node: 'inner'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'ls'
    |        |  \-[IDENT] Node: 'bag'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 's'
             \-[IDENT] Node: 'id'

input: ->from ls in class org.hibernate.test.Lower, s in elements(ls.set) where s.id is not null<-
14:13:34,915 DEBUG ErrorCounter:63 - Keyword  'set' is being interpreted as an identifier due to: expecting IDENT, found 'set'
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ( join inner ( . ls set ) s ) ) ) ( where ( is not null ( . s id ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     +-[RANGE] Node: 'RANGE'
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[DOT] Node: '.'
    |     |  |  |  +-[DOT] Node: '.'
    |     |  |  |  |  +-[IDENT] Node: 'org'
    |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |     |  |  |  \-[IDENT] Node: 'test'
    |     |  |  \-[IDENT] Node: 'Lower'
    |     |  \-[ALIAS] Node: 'ls'
    |     \-[JOIN] Node: 'join'
    |        +-[INNER] Node: 'inner'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'ls'
    |        |  \-[WEIRD_IDENT] Node: 'set'
    |        \-[ALIAS] Node: 's'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 's'
             \-[IDENT] Node: 'id'

input: ->from o in class org.hibernate.test.Top<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Top'
             \-[ALIAS] Node: 'o'

input: ->from o in class org.hibernate.test.Po<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Po ) o ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             +-[DOT] Node: '.'
             |  +-[DOT] Node: '.'
             |  |  +-[DOT] Node: '.'
             |  |  |  +-[IDENT] Node: 'org'
             |  |  |  \-[IDENT] Node: 'hibernate'
             |  |  \-[IDENT] Node: 'test'
             |  \-[IDENT] Node: 'Po'
             \-[ALIAS] Node: 'o'

input: ->from ChildMap cm where cm.parent is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ChildMap cm ) ) ) ( where ( is not null ( . cm parent ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'ChildMap'
    |        \-[ALIAS] Node: 'cm'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'cm'
             \-[IDENT] Node: 'parent'

input: ->from ParentMap cm where cm.child is not null<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ParentMap cm ) ) ) ( where ( is not null ( . cm child ) ) ) )
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[IDENT] Node: 'ParentMap'
    |        \-[ALIAS] Node: 'cm'
    \-[WHERE] Node: 'where'
       \-[IS_NOT_NULL] Node: 'is not null'
          \-[DOT] Node: '.'
             +-[IDENT] Node: 'cm'
             \-[IDENT] Node: 'child'

input: ->from org.hibernate.test.Componentizable<-
AST  :   ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Componentizable ) ) ) ) )
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[IDENT] Node: 'org'
                |  |  \-[IDENT] Node: 'hibernate'
                |  \-[IDENT] Node: 'test'
                \-[IDENT] Node: 'Componentizable'

]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
