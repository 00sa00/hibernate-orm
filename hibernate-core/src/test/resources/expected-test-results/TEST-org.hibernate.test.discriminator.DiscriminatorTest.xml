<?xml version="1.0" encoding="UTF-8"?>
<testsuite errors="0" failures="0" hostname="dhcp-10.15.208.168.stl.redhat.com" name="org.hibernate.test.discriminator.DiscriminatorTest" tests="5" time="0.471" timestamp="2013-02-28T20:12:13">
  <properties />
  <testcase classname="org.hibernate.test.discriminator.DiscriminatorTest" name="testAccessAsIncorrectSubclass" time="0.005" />
  <testcase classname="org.hibernate.test.discriminator.DiscriminatorTest" name="testDiscriminatorSubclass" time="0.211" />
  <testcase classname="org.hibernate.test.discriminator.DiscriminatorTest" name="testLoadSuperclassProxyEvictPolymorphicAccess" time="0.055" />
  <testcase classname="org.hibernate.test.discriminator.DiscriminatorTest" name="testLoadSuperclassProxyPolymorphicAccess" time="0.014" />
  <testcase classname="org.hibernate.test.discriminator.DiscriminatorTest" name="testQuerySubclassAttribute" time="0.104" />
  <system-out><![CDATA[14:12:13,099  INFO CustomRunner:132 - BeforeClass: org.hibernate.test.discriminator.DiscriminatorTest
14:12:13,100  INFO Configuration:706 - HHH000221: Reading mappings from resource: org/hibernate/test/discriminator/Person.hbm.xml
14:12:13,111  INFO DriverManagerConnectionProviderImpl:99 - HHH000402: Using Hibernate built-in connection pool (not for production use!)
14:12:13,112  INFO DriverManagerConnectionProviderImpl:135 - HHH000115: Hibernate connection pool size: 5
14:12:13,112  INFO DriverManagerConnectionProviderImpl:138 - HHH000006: Autocommit mode: false
14:12:13,112  INFO DriverManagerConnectionProviderImpl:153 - HHH000401: using driver [org.h2.Driver] at URL [jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE]
14:12:13,112  INFO DriverManagerConnectionProviderImpl:158 - HHH000046: Connection properties: {user=sa}
14:12:13,113  INFO Dialect:103 - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
14:12:13,113  INFO LobCreatorBuilder:94 - HHH000423: Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
14:12:13,114  INFO TransactionFactoryInitiator:66 - HHH000399: Using default transaction strategy (direct JDBC transactions)
14:12:13,114  INFO ASTQueryTranslatorFactory:48 - HHH000397: Using ASTQueryTranslatorFactory
14:12:13,114  WARN CachingRegionFactory:58 - CachingRegionFactory should be only used for testing.
14:12:13,163  INFO SchemaExport:343 - HHH000227: Running hbm2ddl schema export
14:12:13,166 DEBUG SchemaExport:353 - Import file not found: /import.sql
14:12:13,166 DEBUG SQL:104 - 
    alter table Person 
        drop constraint FK8E488775726D9B43
14:12:13,167 ERROR SchemaExport:425 - HHH000389: Unsuccessful: alter table Person drop constraint FK8E488775726D9B43
14:12:13,167 ERROR SchemaExport:426 - Table "PERSON" not found; SQL statement:

    alter table Person 
        drop constraint FK8E488775726D9B43 [42102-145]
14:12:13,167 DEBUG SQL:104 - 
    alter table Person 
        drop constraint FK8E488775C43A76F7
14:12:13,167 ERROR SchemaExport:425 - HHH000389: Unsuccessful: alter table Person drop constraint FK8E488775C43A76F7
14:12:13,167 ERROR SchemaExport:426 - Table "PERSON" not found; SQL statement:

    alter table Person 
        drop constraint FK8E488775C43A76F7 [42102-145]
14:12:13,167 DEBUG SQL:104 - 
    drop table Person if exists
14:12:13,167 DEBUG SQL:104 - 
    create table Person (
        person_id bigint generated by default as identity,
        name varchar(80) not null,
        sex char(255) not null,
        address varchar(255),
        zip varchar(255),
        country varchar(255),
        "title" varchar(20),
        salary decimal(19,2),
        manager bigint,
        comments varchar(255),
        salesperson bigint,
        primary key (person_id)
    )
14:12:13,168 DEBUG SQL:104 - 
    alter table Person 
        add constraint FK8E488775726D9B43 
        foreign key (manager) 
        references Person
14:12:13,169 DEBUG SQL:104 - 
    alter table Person 
        add constraint FK8E488775C43A76F7 
        foreign key (salesperson) 
        references Person
14:12:13,169  INFO SchemaExport:405 - HHH000230: Schema export complete
14:12:13,170  WARN SessionFactoryImpl:1554 - HHH000008: JTASessionContext being used with JDBCTransactionFactory; auto-flush will not operate correctly with getCurrentSession()
14:12:13,170  INFO CustomRunner:139 - Test: testAccessAsIncorrectSubclass
14:12:13,172 DEBUG SQL:104 - 
    insert 
    into
        Person
        (person_id, name, sex, address, zip, country, "title", salary, manager) 
    values
        (null, ?, ?, ?, ?, ?, ?, ?, ?)
14:12:13,173 DEBUG SQL:104 - 
    select
        customer0_.person_id as person1_0_0_,
        customer0_.name as name0_0_,
        customer0_.sex as sex0_0_,
        customer0_.address as address0_0_,
        customer0_.zip as zip0_0_,
        customer0_.country as country0_0_,
        customer0_.comments as comments0_0_,
        customer0_.salesperson as salespe11_0_0_ 
    from
        Person customer0_ 
    where
        customer0_.person_id=? 
        and case 
            when customer0_."title" is not null then 'E' 
            when customer0_.salesperson is not null then 'C' 
            else 'P' 
        end='C'
14:12:13,174 DEBUG SQL:104 - 
    select
        employee0_.person_id as person1_0_0_,
        employee0_.name as name0_0_,
        employee0_.sex as sex0_0_,
        employee0_.address as address0_0_,
        employee0_.zip as zip0_0_,
        employee0_.country as country0_0_,
        employee0_."title" as title7_0_0_,
        employee0_.salary as salary0_0_,
        employee0_.manager as manager0_0_ 
    from
        Person employee0_ 
    where
        employee0_.person_id=? 
        and case 
            when employee0_."title" is not null then 'E' 
            when employee0_.salesperson is not null then 'C' 
            else 'P' 
        end='E'
14:12:13,175 DEBUG SQL:104 - 
    delete 
    from
        Person 
    where
        person_id=?
14:12:13,175  INFO CustomRunner:139 - Test: testDiscriminatorSubclass
14:12:13,177 DEBUG SQL:104 - 
    insert 
    into
        Person
        (person_id, name, sex, address, zip, country) 
    values
        (null, ?, ?, ?, ?, ?)
14:12:13,178 DEBUG SQL:104 - 
    insert 
    into
        Person
        (person_id, name, sex, address, zip, country, "title", salary, manager) 
    values
        (null, ?, ?, ?, ?, ?, ?, ?, ?)
14:12:13,187 DEBUG SQL:104 - 
    insert 
    into
        Person
        (person_id, name, sex, address, zip, country, comments, salesperson) 
    values
        (null, ?, ?, ?, ?, ?, ?, ?)
14:12:13,188  WARN QuerySplitter:128 - HHH000183: no persistent classes found for query class: from java.io.Serializable
14:12:13,189 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.discriminator.Person
14:12:13,190 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[DOT] Node: '.'
                |  |  |  +-[IDENT] Node: 'org'
                |  |  |  \-[IDENT] Node: 'hibernate'
                |  |  \-[IDENT] Node: 'test'
                |  \-[IDENT] Node: 'discriminator'
                \-[IDENT] Node: 'Person'

14:12:13,190 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,190 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.discriminator.Person (<no alias>) -> person0_
14:12:13,190 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} Person person0_ ) )
14:12:13,190 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:12:13,190 DEBUG JoinProcessor:175 - Using FROM fragment [Person person0_]
14:12:13,198 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.person_id as person1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}

14:12:13,198 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,199 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.discriminator.Person
14:12:13,199 DEBUG QueryTranslatorImpl:236 - SQL: select person0_.person_id as person1_0_, person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_ from Person person0_
14:12:13,199 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,199 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_0_,
        person0_.name as name0_,
        person0_.sex as sex0_,
        person0_.address as address0_,
        person0_.zip as zip0_,
        person0_.country as country0_,
        person0_."title" as title7_0_,
        person0_.salary as salary0_,
        person0_.manager as manager0_,
        person0_.comments as comments0_,
        person0_.salesperson as salespe11_0_,
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_ 
    from
        Person person0_
14:12:13,201 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.discriminator.Person p where p.class = Person
14:12:13,201 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=55,possibleID=false]
14:12:13,202 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  |  \-[IDENT] Node: 'test'
    |        |  |  \-[IDENT] Node: 'discriminator'
    |        |  \-[IDENT] Node: 'Person'
    |        \-[ALIAS] Node: 'p'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'p'
          |  \-[IDENT] Node: 'class'
          \-[IDENT] Node: 'Person'

14:12:13,202 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,203 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.discriminator.Person (p) -> person0_
14:12:13,216 DEBUG FromReferenceNode:74 - Resolved : p -> person0_.person_id
14:12:13,216 DEBUG DotNode:599 - getDataType() : class -> org.hibernate.type.CharacterType@26ccbcea
14:12:13,216 DEBUG FromReferenceNode:74 - Resolved : p.class -> case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end
14:12:13,217 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} Person person0_ ) ( where ( = ( case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end person0_.person_id class ) 'P' ) ) )
14:12:13,217 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:12:13,217 DEBUG JoinProcessor:175 - Using FROM fragment [Person person0_]
14:12:13,218 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.person_id as person1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[p], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end' {propertyName=class,dereferenceType=ALL,propertyPath=class,path=p.class,tableAlias=person0_,className=org.hibernate.test.discriminator.Person,classAlias=p}
          |  +-[ALIAS_REF] IdentNode: 'person0_.person_id' {alias=p, className=org.hibernate.test.discriminator.Person, tableAlias=person0_}
          |  \-[IDENT] IdentNode: 'class' {originalText=class}
          \-[IDENT] IdentNode: ''P'' {originalText=Person}

14:12:13,218 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,218 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.discriminator.Person p where p.class = Person
14:12:13,218 DEBUG QueryTranslatorImpl:236 - SQL: select person0_.person_id as person1_0_, person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_ from Person person0_ where case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end='P'
14:12:13,218 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,218 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_0_,
        person0_.name as name0_,
        person0_.sex as sex0_,
        person0_.address as address0_,
        person0_.zip as zip0_,
        person0_.country as country0_,
        person0_."title" as title7_0_,
        person0_.salary as salary0_,
        person0_.manager as manager0_,
        person0_.comments as comments0_,
        person0_.salesperson as salespe11_0_,
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_ 
    from
        Person person0_ 
    where
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end='P'
14:12:13,228 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.discriminator.Person p where p.class = Customer
14:12:13,229 DEBUG HqlParser:378 - handleDotIdent() : new LT(2) token - [".",<15> previously: <15>,line=1,col=55,possibleID=false]
14:12:13,230 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  |  \-[IDENT] Node: 'test'
    |        |  |  \-[IDENT] Node: 'discriminator'
    |        |  \-[IDENT] Node: 'Person'
    |        \-[ALIAS] Node: 'p'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'p'
          |  \-[IDENT] Node: 'class'
          \-[IDENT] Node: 'Customer'

14:12:13,230 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,230 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.discriminator.Person (p) -> person0_
14:12:13,230 DEBUG FromReferenceNode:74 - Resolved : p -> person0_.person_id
14:12:13,249 DEBUG DotNode:599 - getDataType() : class -> org.hibernate.type.CharacterType@26ccbcea
14:12:13,249 DEBUG FromReferenceNode:74 - Resolved : p.class -> case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end
14:12:13,250 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} Person person0_ ) ( where ( = ( case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end person0_.person_id class ) 'C' ) ) )
14:12:13,250 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:12:13,250 DEBUG JoinProcessor:175 - Using FROM fragment [Person person0_]
14:12:13,251 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.person_id as person1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[p], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end' {propertyName=class,dereferenceType=ALL,propertyPath=class,path=p.class,tableAlias=person0_,className=org.hibernate.test.discriminator.Person,classAlias=p}
          |  +-[ALIAS_REF] IdentNode: 'person0_.person_id' {alias=p, className=org.hibernate.test.discriminator.Person, tableAlias=person0_}
          |  \-[IDENT] IdentNode: 'class' {originalText=class}
          \-[IDENT] IdentNode: ''C'' {originalText=Customer}

14:12:13,251 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,251 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.discriminator.Person p where p.class = Customer
14:12:13,251 DEBUG QueryTranslatorImpl:236 - SQL: select person0_.person_id as person1_0_, person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_ from Person person0_ where case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end='C'
14:12:13,251 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,251 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_0_,
        person0_.name as name0_,
        person0_.sex as sex0_,
        person0_.address as address0_,
        person0_.zip as zip0_,
        person0_.country as country0_,
        person0_."title" as title7_0_,
        person0_.salary as salary0_,
        person0_.manager as manager0_,
        person0_.comments as comments0_,
        person0_.salesperson as salespe11_0_,
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_ 
    from
        Person person0_ 
    where
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end='C'
14:12:13,262 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.discriminator.Customer c left join fetch c.salesperson
14:12:13,263 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          +-[RANGE] Node: 'RANGE'
          |  +-[DOT] Node: '.'
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[DOT] Node: '.'
          |  |  |  |  +-[DOT] Node: '.'
          |  |  |  |  |  +-[IDENT] Node: 'org'
          |  |  |  |  |  \-[IDENT] Node: 'hibernate'
          |  |  |  |  \-[IDENT] Node: 'test'
          |  |  |  \-[IDENT] Node: 'discriminator'
          |  |  \-[IDENT] Node: 'Customer'
          |  \-[ALIAS] Node: 'c'
          \-[JOIN] Node: 'join'
             +-[LEFT] Node: 'left'
             +-[FETCH] Node: 'fetch'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'c'
                \-[IDENT] Node: 'salesperson'

14:12:13,272 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,272 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.discriminator.Customer (c) -> customer0_
14:12:13,272 DEBUG FromReferenceNode:74 - Resolved : c -> customer0_.person_id
14:12:13,272 DEBUG DotNode:599 - getDataType() : salesperson -> org.hibernate.type.ManyToOneType(org.hibernate.test.discriminator.Employee)
14:12:13,272 DEBUG DotNode:389 - dereferenceEntityJoin() : generating join for salesperson in org.hibernate.test.discriminator.Customer (<no alias>) parent = [ {null} ]
14:12:13,273 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.discriminator.Employee (<no alias>) -> employee1_
14:12:13,273 DEBUG FromClause:282 - addJoinByPathMap() : c.salesperson -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=employee1_,origin=Person customer0_,columns={customer0_.salesperson ,className=org.hibernate.test.discriminator.Employee}}
14:12:13,273 DEBUG FromReferenceNode:74 - Resolved : c.salesperson -> customer0_.salesperson
14:12:13,273 DEBUG HqlSqlWalker:403 - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Person employee1_' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=employee1_,origin=Person customer0_,columns={customer0_.salesperson ,className=org.hibernate.test.discriminator.Employee}}

14:12:13,273 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} ( Person customer0_ Person employee1_ ) ) )
14:12:13,273 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:12:13,273 DEBUG JoinProcessor:175 - Using FROM fragment [Person customer0_]
14:12:13,274 DEBUG SyntheticAndFactory:92 - Using unprocessed WHERE-fragment [case when customer0_."title" is not null then 'E' when customer0_.salesperson is not null then 'C' else 'P' end='C']
14:12:13,274 DEBUG SyntheticAndFactory:124 - Using processed WHERE-fragment [case when customer0_."title" is not null then 'E' when customer0_.salesperson is not null then 'C' else 'P' end='C']
14:12:13,274 DEBUG QueryNode:73 - getWhereClause() : Creating a new WHERE clause...
14:12:13,281 DEBUG JoinProcessor:175 - Using FROM fragment [left outer join Person employee1_ on customer0_.salesperson=employee1_.person_id]
14:12:13,282 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'customer0_.person_id as person1_0_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=c,role=null,tableName=Person,tableAlias=customer0_,origin=null,columns={,className=org.hibernate.test.discriminator.Customer}}}
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'employee1_.person_id as person1_0_1_' {FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=employee1_,origin=Person customer0_,columns={customer0_.salesperson ,className=org.hibernate.test.discriminator.Employee}}}
    |  +-[SQL_TOKEN] SqlFragment: 'customer0_.name as name0_0_, customer0_.sex as sex0_0_, customer0_.address as address0_0_, customer0_.zip as zip0_0_, customer0_.country as country0_0_, customer0_.comments as comments0_0_, customer0_.salesperson as salespe11_0_0_'
    |  \-[SQL_TOKEN] SqlFragment: 'employee1_.name as name0_1_, employee1_.sex as sex0_1_, employee1_.address as address0_1_, employee1_.zip as zip0_1_, employee1_.country as country0_1_, employee1_."title" as title7_0_1_, employee1_.salary as salary0_1_, employee1_.manager as manager0_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[c], fromElementByTableAlias=[customer0_, employee1_], fromElementsByPath=[c.salesperson], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Person customer0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=c,role=null,tableName=Person,tableAlias=customer0_,origin=null,columns={,className=org.hibernate.test.discriminator.Customer}}
    |     \-[JOIN_FRAGMENT] FromElement: 'left outer join Person employee1_ on customer0_.salesperson=employee1_.person_id' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=employee1_,origin=Person customer0_,columns={customer0_.salesperson ,className=org.hibernate.test.discriminator.Employee}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[FILTERS] SqlNode: '{filter conditions}'
          \-[SQL_TOKEN] SqlFragment: 'case when customer0_."title" is not null then 'E' when customer0_.salesperson is not null then 'C' else 'P' end='C''

14:12:13,282 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,282 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.discriminator.Customer c left join fetch c.salesperson
14:12:13,282 DEBUG QueryTranslatorImpl:236 - SQL: select customer0_.person_id as person1_0_0_, employee1_.person_id as person1_0_1_, customer0_.name as name0_0_, customer0_.sex as sex0_0_, customer0_.address as address0_0_, customer0_.zip as zip0_0_, customer0_.country as country0_0_, customer0_.comments as comments0_0_, customer0_.salesperson as salespe11_0_0_, employee1_.name as name0_1_, employee1_.sex as sex0_1_, employee1_.address as address0_1_, employee1_.zip as zip0_1_, employee1_.country as country0_1_, employee1_."title" as title7_0_1_, employee1_.salary as salary0_1_, employee1_.manager as manager0_1_ from Person customer0_ left outer join Person employee1_ on customer0_.salesperson=employee1_.person_id where case when customer0_."title" is not null then 'E' when customer0_.salesperson is not null then 'C' else 'P' end='C'
14:12:13,282 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,282 DEBUG SQL:104 - 
    select
        customer0_.person_id as person1_0_0_,
        employee1_.person_id as person1_0_1_,
        customer0_.name as name0_0_,
        customer0_.sex as sex0_0_,
        customer0_.address as address0_0_,
        customer0_.zip as zip0_0_,
        customer0_.country as country0_0_,
        customer0_.comments as comments0_0_,
        customer0_.salesperson as salespe11_0_0_,
        employee1_.name as name0_1_,
        employee1_.sex as sex0_1_,
        employee1_.address as address0_1_,
        employee1_.zip as zip0_1_,
        employee1_.country as country0_1_,
        employee1_."title" as title7_0_1_,
        employee1_.salary as salary0_1_,
        employee1_.manager as manager0_1_ 
    from
        Person customer0_ 
    left outer join
        Person employee1_ 
            on customer0_.salesperson=employee1_.person_id 
    where
        case 
            when customer0_."title" is not null then 'E' 
            when customer0_.salesperson is not null then 'C' 
            else 'P' 
        end='C'
14:12:13,293 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.discriminator.Customer
14:12:13,294 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'from'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[DOT] Node: '.'
                |  |  +-[DOT] Node: '.'
                |  |  |  +-[IDENT] Node: 'org'
                |  |  |  \-[IDENT] Node: 'hibernate'
                |  |  \-[IDENT] Node: 'test'
                |  \-[IDENT] Node: 'discriminator'
                \-[IDENT] Node: 'Customer'

14:12:13,302 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,303 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.discriminator.Customer (<no alias>) -> customer0_
14:12:13,303 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} Person customer0_ ) )
14:12:13,303 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:12:13,303 DEBUG JoinProcessor:175 - Using FROM fragment [Person customer0_]
14:12:13,303 DEBUG SyntheticAndFactory:92 - Using unprocessed WHERE-fragment [case when customer0_."title" is not null then 'E' when customer0_.salesperson is not null then 'C' else 'P' end='C']
14:12:13,303 DEBUG SyntheticAndFactory:124 - Using processed WHERE-fragment [case when customer0_."title" is not null then 'E' when customer0_.salesperson is not null then 'C' else 'P' end='C']
14:12:13,304 DEBUG QueryNode:73 - getWhereClause() : Creating a new WHERE clause...
14:12:13,304 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'customer0_.person_id as person1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=customer0_,origin=null,columns={,className=org.hibernate.test.discriminator.Customer}}}
    |  \-[SQL_TOKEN] SqlFragment: 'customer0_.name as name0_, customer0_.sex as sex0_, customer0_.address as address0_, customer0_.zip as zip0_, customer0_.country as country0_, customer0_.comments as comments0_, customer0_.salesperson as salespe11_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[customer0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Person customer0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=customer0_,origin=null,columns={,className=org.hibernate.test.discriminator.Customer}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[FILTERS] SqlNode: '{filter conditions}'
          \-[SQL_TOKEN] SqlFragment: 'case when customer0_."title" is not null then 'E' when customer0_.salesperson is not null then 'C' else 'P' end='C''

14:12:13,304 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,304 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.discriminator.Customer
14:12:13,304 DEBUG QueryTranslatorImpl:236 - SQL: select customer0_.person_id as person1_0_, customer0_.name as name0_, customer0_.sex as sex0_, customer0_.address as address0_, customer0_.zip as zip0_, customer0_.country as country0_, customer0_.comments as comments0_, customer0_.salesperson as salespe11_0_ from Person customer0_ where case when customer0_."title" is not null then 'E' when customer0_.salesperson is not null then 'C' else 'P' end='C'
14:12:13,304 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,305 DEBUG SQL:104 - 
    select
        customer0_.person_id as person1_0_,
        customer0_.name as name0_,
        customer0_.sex as sex0_,
        customer0_.address as address0_,
        customer0_.zip as zip0_,
        customer0_.country as country0_,
        customer0_.comments as comments0_,
        customer0_.salesperson as salespe11_0_ 
    from
        Person customer0_ 
    where
        case 
            when customer0_."title" is not null then 'E' 
            when customer0_.salesperson is not null then 'C' 
            else 'P' 
        end='C'
14:12:13,315 DEBUG SQL:104 - 
    select
        employee0_.person_id as person1_0_0_,
        employee0_.name as name0_0_,
        employee0_.sex as sex0_0_,
        employee0_.address as address0_0_,
        employee0_.zip as zip0_0_,
        employee0_.country as country0_0_,
        employee0_."title" as title7_0_0_,
        employee0_.salary as salary0_0_,
        employee0_.manager as manager0_0_ 
    from
        Person employee0_ 
    where
        employee0_.person_id=? 
        and case 
            when employee0_."title" is not null then 'E' 
            when employee0_.salesperson is not null then 'C' 
            else 'P' 
        end='E'
14:12:13,325 DEBUG SQL:104 - 
    select
        employee0_.person_id as person1_0_0_,
        employee0_.name as name0_0_,
        employee0_.sex as sex0_0_,
        employee0_.address as address0_0_,
        employee0_.zip as zip0_0_,
        employee0_.country as country0_0_,
        employee0_."title" as title7_0_0_,
        employee0_.salary as salary0_0_,
        employee0_.manager as manager0_0_ 
    from
        Person employee0_ 
    where
        employee0_.person_id=? 
        and case 
            when employee0_."title" is not null then 'E' 
            when employee0_.salesperson is not null then 'C' 
            else 'P' 
        end='E'
14:12:13,326 DEBUG SQL:104 - 
    select
        customer0_.person_id as person1_0_0_,
        customer0_.name as name0_0_,
        customer0_.sex as sex0_0_,
        customer0_.address as address0_0_,
        customer0_.zip as zip0_0_,
        customer0_.country as country0_0_,
        customer0_.comments as comments0_0_,
        customer0_.salesperson as salespe11_0_0_ 
    from
        Person customer0_ 
    where
        customer0_.person_id=? 
        and case 
            when customer0_."title" is not null then 'E' 
            when customer0_.salesperson is not null then 'C' 
            else 'P' 
        end='C'
14:12:13,327 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.discriminator.Person p where p.address.zip = '30306'
14:12:13,328 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'org'
    |        |  |  |  |  \-[IDENT] Node: 'hibernate'
    |        |  |  |  \-[IDENT] Node: 'test'
    |        |  |  \-[IDENT] Node: 'discriminator'
    |        |  \-[IDENT] Node: 'Person'
    |        \-[ALIAS] Node: 'p'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'p'
          |  |  \-[IDENT] Node: 'address'
          |  \-[IDENT] Node: 'zip'
          \-[QUOTED_STRING] Node: ''30306''

14:12:13,337 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,338 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.discriminator.Person (p) -> person0_
14:12:13,338 DEBUG FromReferenceNode:74 - Resolved : p -> person0_.person_id
14:12:13,338 DEBUG DotNode:599 - getDataType() : address -> org.hibernate.type.ComponentType@461c78d7
14:12:13,338 DEBUG DotNode:585 - Unresolved property path is now 'address.zip'
14:12:13,338 DEBUG FromReferenceNode:74 - Resolved : p.address -> person0_.zip
14:12:13,338 DEBUG DotNode:599 - getDataType() : address.zip -> org.hibernate.type.StringType@2dc8de40
14:12:13,338 DEBUG FromReferenceNode:74 - Resolved : p.address.zip -> person0_.zip
14:12:13,339 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} Person person0_ ) ( where ( = ( person0_.zip ( person0_.zip person0_.person_id address ) zip ) '30306' ) ) )
14:12:13,339 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:12:13,339 DEBUG JoinProcessor:175 - Using FROM fragment [Person person0_]
14:12:13,339 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.person_id as person1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[p], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'person0_.zip' {propertyName=zip,dereferenceType=ALL,propertyPath=address.zip,path=p.address.zip,tableAlias=person0_,className=org.hibernate.test.discriminator.Person,classAlias=p}
          |  +-[DOT] DotNode: 'person0_.zip' {propertyName=zip,dereferenceType=2,propertyPath=address.zip,path=p.address,tableAlias=person0_,className=org.hibernate.test.discriminator.Person,classAlias=p}
          |  |  +-[ALIAS_REF] IdentNode: 'person0_.person_id' {alias=p, className=org.hibernate.test.discriminator.Person, tableAlias=person0_}
          |  |  \-[IDENT] IdentNode: 'address' {originalText=address}
          |  \-[IDENT] IdentNode: 'zip' {originalText=zip}
          \-[QUOTED_STRING] LiteralNode: ''30306''

14:12:13,349 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,349 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.discriminator.Person p where p.address.zip = '30306'
14:12:13,349 DEBUG QueryTranslatorImpl:236 - SQL: select person0_.person_id as person1_0_, person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_ from Person person0_ where person0_.zip='30306'
14:12:13,350 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,350 DEBUG SQL:104 - 
    update
        Person 
    set
        name=?,
        address=?,
        zip=?,
        country=?,
        "title"=?,
        salary=?,
        manager=? 
    where
        person_id=?
14:12:13,351 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_0_,
        person0_.name as name0_,
        person0_.sex as sex0_,
        person0_.address as address0_,
        person0_.zip as zip0_,
        person0_.country as country0_,
        person0_."title" as title7_0_,
        person0_.salary as salary0_,
        person0_.manager as manager0_,
        person0_.comments as comments0_,
        person0_.salesperson as salespe11_0_,
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_ 
    from
        Person person0_ 
    where
        person0_.zip='30306'
14:12:13,372 DEBUG SQL:104 - 
    update
        Person 
    set
        name=?,
        address=?,
        zip=?,
        country=?,
        comments=?,
        salesperson=? 
    where
        person_id=?
14:12:13,373 DEBUG SQL:104 - 
    delete 
    from
        Person 
    where
        person_id=?
14:12:13,373 DEBUG SQL:104 - 
    delete 
    from
        Person 
    where
        person_id=?
14:12:13,373 DEBUG SQL:104 - 
    delete 
    from
        Person 
    where
        person_id=?
14:12:13,381 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_0_,
        person0_.name as name0_,
        person0_.sex as sex0_,
        person0_.address as address0_,
        person0_.zip as zip0_,
        person0_.country as country0_,
        person0_."title" as title7_0_,
        person0_.salary as salary0_,
        person0_.manager as manager0_,
        person0_.comments as comments0_,
        person0_.salesperson as salespe11_0_,
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_ 
    from
        Person person0_
14:12:13,388  INFO CustomRunner:139 - Test: testLoadSuperclassProxyEvictPolymorphicAccess
14:12:13,395 DEBUG SQL:104 - 
    insert 
    into
        Person
        (person_id, name, sex, address, zip, country, "title", salary, manager) 
    values
        (null, ?, ?, ?, ?, ?, ?, ?, ?)
14:12:13,402 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_0_0_,
        person0_.name as name0_0_,
        person0_.sex as sex0_0_,
        person0_.address as address0_0_,
        person0_.zip as zip0_0_,
        person0_.country as country0_0_,
        person0_."title" as title7_0_0_,
        person0_.salary as salary0_0_,
        person0_.manager as manager0_0_,
        person0_.comments as comments0_0_,
        person0_.salesperson as salespe11_0_0_,
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_0_ 
    from
        Person person0_ 
    where
        person0_.person_id=?
14:12:13,404 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.discriminator.Person where id = :id
14:12:13,405 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[DOT] Node: '.'
    |           |  |  +-[DOT] Node: '.'
    |           |  |  |  +-[IDENT] Node: 'org'
    |           |  |  |  \-[IDENT] Node: 'hibernate'
    |           |  |  \-[IDENT] Node: 'test'
    |           |  \-[IDENT] Node: 'discriminator'
    |           \-[IDENT] Node: 'Person'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'id'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'id'

14:12:13,412 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,412 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.discriminator.Person (<no alias>) -> person0_
14:12:13,412 DEBUG FromReferenceNode:74 - Resolved : {synthetic-alias} -> {synthetic-alias}
14:12:13,413 DEBUG DotNode:599 - getDataType() : id -> org.hibernate.type.LongType@4bf3f9d
14:12:13,413 DEBUG FromReferenceNode:74 - Resolved : {synthetic-alias}.id -> person0_.person_id
14:12:13,413 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} Person person0_ ) ( where ( = ( person0_.person_id {synthetic-alias} id ) ? ) ) )
14:12:13,413 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:12:13,413 DEBUG JoinProcessor:175 - Using FROM fragment [Person person0_]
14:12:13,413 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.person_id as person1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'person0_.person_id' {propertyName=id,dereferenceType=ALL,propertyPath=id,path={synthetic-alias}.id,tableAlias=person0_,className=org.hibernate.test.discriminator.Person,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[NAMED_PARAM] ParameterNode: '?' {name=id, expectedType=org.hibernate.type.LongType@4bf3f9d}

14:12:13,422 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,422 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.discriminator.Person where id = :id
14:12:13,423 DEBUG QueryTranslatorImpl:236 - SQL: select person0_.person_id as person1_0_, person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_ from Person person0_ where person0_.person_id=?
14:12:13,423 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,423 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_0_,
        person0_.name as name0_,
        person0_.sex as sex0_,
        person0_.address as address0_,
        person0_.zip as zip0_,
        person0_.country as country0_,
        person0_."title" as title7_0_,
        person0_.salary as salary0_,
        person0_.manager as manager0_,
        person0_.comments as comments0_,
        person0_.salesperson as salespe11_0_,
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_ 
    from
        Person person0_ 
    where
        person0_.person_id=?
14:12:13,434 DEBUG SQL:104 - 
    select
        this_.person_id as person1_0_0_,
        this_.name as name0_0_,
        this_.sex as sex0_0_,
        this_.address as address0_0_,
        this_.zip as zip0_0_,
        this_.country as country0_0_,
        this_."title" as title7_0_0_,
        this_.salary as salary0_0_,
        this_.manager as manager0_0_,
        this_.comments as comments0_0_,
        this_.salesperson as salespe11_0_0_,
        case 
            when this_."title" is not null then 'E' 
            when this_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_0_ 
    from
        Person this_ 
    where
        this_.person_id = ?
14:12:13,436 DEBUG SQL:104 - 
    delete 
    from
        Person 
    where
        person_id=?
14:12:13,445  INFO CustomRunner:139 - Test: testLoadSuperclassProxyPolymorphicAccess
14:12:13,446 DEBUG SQL:104 - 
    insert 
    into
        Person
        (person_id, name, sex, address, zip, country, "title", salary, manager) 
    values
        (null, ?, ?, ?, ?, ?, ?, ?, ?)
14:12:13,447 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_0_0_,
        person0_.name as name0_0_,
        person0_.sex as sex0_0_,
        person0_.address as address0_0_,
        person0_.zip as zip0_0_,
        person0_.country as country0_0_,
        person0_."title" as title7_0_0_,
        person0_.salary as salary0_0_,
        person0_.manager as manager0_0_,
        person0_.comments as comments0_0_,
        person0_.salesperson as salespe11_0_0_,
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_0_ 
    from
        Person person0_ 
    where
        person0_.person_id=?
14:12:13,455 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_0_,
        person0_.name as name0_,
        person0_.sex as sex0_,
        person0_.address as address0_,
        person0_.zip as zip0_,
        person0_.country as country0_,
        person0_."title" as title7_0_,
        person0_.salary as salary0_,
        person0_.manager as manager0_,
        person0_.comments as comments0_,
        person0_.salesperson as salespe11_0_,
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_ 
    from
        Person person0_ 
    where
        person0_.person_id=?
14:12:13,457 DEBUG SQL:104 - 
    select
        this_.person_id as person1_0_0_,
        this_.name as name0_0_,
        this_.sex as sex0_0_,
        this_.address as address0_0_,
        this_.zip as zip0_0_,
        this_.country as country0_0_,
        this_."title" as title7_0_0_,
        this_.salary as salary0_0_,
        this_.manager as manager0_0_,
        this_.comments as comments0_0_,
        this_.salesperson as salespe11_0_0_,
        case 
            when this_."title" is not null then 'E' 
            when this_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_0_ 
    from
        Person this_ 
    where
        this_.person_id = ?
14:12:13,459 DEBUG SQL:104 - 
    delete 
    from
        Person 
    where
        person_id=?
14:12:13,460  INFO CustomRunner:139 - Test: testQuerySubclassAttribute
14:12:13,461 DEBUG SQL:104 - 
    insert 
    into
        Person
        (person_id, name, sex, address, zip, country) 
    values
        (null, ?, ?, ?, ?, ?)
14:12:13,470 DEBUG SQL:104 - 
    insert 
    into
        Person
        (person_id, name, sex, address, zip, country, "title", salary, manager) 
    values
        (null, ?, ?, ?, ?, ?, ?, ?, ?)
14:12:13,471 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.discriminator.Person where salary > 100
14:12:13,472 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[DOT] Node: '.'
    |           |  |  +-[DOT] Node: '.'
    |           |  |  |  +-[IDENT] Node: 'org'
    |           |  |  |  \-[IDENT] Node: 'hibernate'
    |           |  |  \-[IDENT] Node: 'test'
    |           |  \-[IDENT] Node: 'discriminator'
    |           \-[IDENT] Node: 'Person'
    \-[WHERE] Node: 'where'
       \-[GT] Node: '>'
          +-[IDENT] Node: 'salary'
          \-[NUM_INT] Node: '100'

14:12:13,473 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,489 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.discriminator.Person (<no alias>) -> person0_
14:12:13,489 DEBUG FromReferenceNode:74 - Resolved : {synthetic-alias} -> {synthetic-alias}
14:12:13,490 DEBUG DotNode:599 - getDataType() : salary -> org.hibernate.type.BigDecimalType@3bb4a749
14:12:13,490 DEBUG FromReferenceNode:74 - Resolved : {synthetic-alias}.salary -> person0_.salary
14:12:13,490 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} Person person0_ ) ( where ( > ( person0_.salary {synthetic-alias} salary ) 100 ) ) )
14:12:13,490 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:12:13,490 DEBUG JoinProcessor:175 - Using FROM fragment [Person person0_]
14:12:13,491 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.person_id as person1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}
    \-[WHERE] SqlNode: 'where'
       \-[GT] BinaryLogicOperatorNode: '>'
          +-[DOT] DotNode: 'person0_.salary' {propertyName=salary,dereferenceType=ALL,propertyPath=salary,path={synthetic-alias}.salary,tableAlias=person0_,className=org.hibernate.test.discriminator.Person,classAlias=null}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'salary' {originalText=salary}
          \-[NUM_INT] LiteralNode: '100'

14:12:13,491 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,491 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.discriminator.Person where salary > 100
14:12:13,491 DEBUG QueryTranslatorImpl:236 - SQL: select person0_.person_id as person1_0_, person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_ from Person person0_ where person0_.salary>100
14:12:13,491 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,492 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_0_,
        person0_.name as name0_,
        person0_.sex as sex0_,
        person0_.address as address0_,
        person0_.zip as zip0_,
        person0_.country as country0_,
        person0_."title" as title7_0_,
        person0_.salary as salary0_,
        person0_.manager as manager0_,
        person0_.comments as comments0_,
        person0_.salesperson as salespe11_0_,
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_ 
    from
        Person person0_ 
    where
        person0_.salary>100
14:12:13,516 DEBUG QueryTranslatorImpl:265 - parse() - HQL: from org.hibernate.test.discriminator.Person where salary > 100 or name like 'E%'
14:12:13,518 DEBUG QueryTranslatorImpl:283 - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[DOT] Node: '.'
    |           |  |  +-[DOT] Node: '.'
    |           |  |  |  +-[IDENT] Node: 'org'
    |           |  |  |  \-[IDENT] Node: 'hibernate'
    |           |  |  \-[IDENT] Node: 'test'
    |           |  \-[IDENT] Node: 'discriminator'
    |           \-[IDENT] Node: 'Person'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[GT] Node: '>'
          |  +-[IDENT] Node: 'salary'
          |  \-[NUM_INT] Node: '100'
          \-[LIKE] Node: 'like'
             +-[IDENT] Node: 'name'
             \-[QUOTED_STRING] Node: ''E%''

14:12:13,519 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,519 DEBUG FromElement:157 - FromClause{level=1} : org.hibernate.test.discriminator.Person (<no alias>) -> person0_
14:12:13,527 DEBUG FromReferenceNode:74 - Resolved : {synthetic-alias} -> {synthetic-alias}
14:12:13,527 DEBUG DotNode:599 - getDataType() : salary -> org.hibernate.type.BigDecimalType@3bb4a749
14:12:13,527 DEBUG FromReferenceNode:74 - Resolved : {synthetic-alias}.salary -> person0_.salary
14:12:13,528 DEBUG FromReferenceNode:74 - Resolved : {synthetic-alias} -> {synthetic-alias}
14:12:13,528 DEBUG DotNode:599 - getDataType() : name -> org.hibernate.type.StringType@2dc8de40
14:12:13,528 DEBUG FromReferenceNode:74 - Resolved : {synthetic-alias}.name -> person0_.name
14:12:13,528 DEBUG HqlSqlWalker:629 - processQuery() :  ( SELECT ( FromClause{level=1} Person person0_ ) ( where ( or ( > ( person0_.salary {synthetic-alias} salary ) 100 ) ( like ( person0_.name {synthetic-alias} name ) 'E%' ) ) ) )
14:12:13,529 DEBUG HqlSqlWalker:869 - Derived SELECT clause created.
14:12:13,529 DEBUG JoinProcessor:175 - Using FROM fragment [Person person0_]
14:12:13,529 DEBUG QueryTranslatorImpl:252 - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.person_id as person1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=org.hibernate.test.discriminator.Person}}
    \-[WHERE] SqlNode: 'where'
       \-[OR] SqlNode: 'or'
          +-[GT] BinaryLogicOperatorNode: '>'
          |  +-[DOT] DotNode: 'person0_.salary' {propertyName=salary,dereferenceType=ALL,propertyPath=salary,path={synthetic-alias}.salary,tableAlias=person0_,className=org.hibernate.test.discriminator.Person,classAlias=null}
          |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  \-[IDENT] IdentNode: 'salary' {originalText=salary}
          |  \-[NUM_INT] LiteralNode: '100'
          \-[LIKE] BinaryLogicOperatorNode: 'like'
             +-[DOT] DotNode: 'person0_.name' {propertyName=name,dereferenceType=ALL,propertyPath=name,path={synthetic-alias}.name,tableAlias=person0_,className=org.hibernate.test.discriminator.Person,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'name' {originalText=name}
             \-[QUOTED_STRING] LiteralNode: ''E%''

14:12:13,537 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,538 DEBUG QueryTranslatorImpl:235 - HQL: from org.hibernate.test.discriminator.Person where salary > 100 or name like 'E%'
14:12:13,538 DEBUG QueryTranslatorImpl:236 - SQL: select person0_.person_id as person1_0_, person0_.name as name0_, person0_.sex as sex0_, person0_.address as address0_, person0_.zip as zip0_, person0_.country as country0_, person0_."title" as title7_0_, person0_.salary as salary0_, person0_.manager as manager0_, person0_.comments as comments0_, person0_.salesperson as salespe11_0_, case when person0_."title" is not null then 'E' when person0_.salesperson is not null then 'C' else 'P' end as clazz_ from Person person0_ where person0_.salary>100 or person0_.name like 'E%'
14:12:13,538 DEBUG ErrorCounter:82 - throwQueryException() : no errors
14:12:13,538 DEBUG SQL:104 - 
    select
        person0_.person_id as person1_0_,
        person0_.name as name0_,
        person0_.sex as sex0_,
        person0_.address as address0_,
        person0_.zip as zip0_,
        person0_.country as country0_,
        person0_."title" as title7_0_,
        person0_.salary as salary0_,
        person0_.manager as manager0_,
        person0_.comments as comments0_,
        person0_.salesperson as salespe11_0_,
        case 
            when person0_."title" is not null then 'E' 
            when person0_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_ 
    from
        Person person0_ 
    where
        person0_.salary>100 
        or person0_.name like 'E%'
14:12:13,540 DEBUG SQL:104 - 
    select
        this_.person_id as person1_0_0_,
        this_.name as name0_0_,
        this_.sex as sex0_0_,
        this_.address as address0_0_,
        this_.zip as zip0_0_,
        this_.country as country0_0_,
        this_."title" as title7_0_0_,
        this_.salary as salary0_0_,
        this_.manager as manager0_0_,
        this_.comments as comments0_0_,
        this_.salesperson as salespe11_0_0_,
        case 
            when this_."title" is not null then 'E' 
            when this_.salesperson is not null then 'C' 
            else 'P' 
        end as clazz_0_ 
    from
        Person this_ 
    where
        this_.salary>?
14:12:13,553 DEBUG SQL:104 - 
    delete 
    from
        Person 
    where
        person_id=?
14:12:13,553 DEBUG SQL:104 - 
    delete 
    from
        Person 
    where
        person_id=?
14:12:13,565  INFO SchemaExport:343 - HHH000227: Running hbm2ddl schema export
14:12:13,566 DEBUG SchemaExport:353 - Import file not found: /import.sql
14:12:13,566 DEBUG SQL:104 - 
    alter table Person 
        drop constraint FK8E488775726D9B43
14:12:13,566 DEBUG SQL:104 - 
    alter table Person 
        drop constraint FK8E488775C43A76F7
14:12:13,566 DEBUG SQL:104 - 
    drop table Person if exists
14:12:13,566  INFO SchemaExport:405 - HHH000230: Schema export complete
14:12:13,567  INFO DriverManagerConnectionProviderImpl:162 - HHH000030: Cleaning up connection pool [jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE]
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
