/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * Copyright (c) 2008-2011, Red Hat Inc. or third-party contributors as
 * indicated by the @author tags or express copyright attribution
 * statements applied by the authors.  All third-party contributions are
 * distributed under license by Red Hat Inc.
 *
 * This copyrighted material is made available to anyone wishing to use, modify,
 * copy, or redistribute it subject to the terms and conditions of the GNU
 * Lesser General Public License, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this distribution; if not, write to:
 * Free Software Foundation, Inc.
 * 51 Franklin Street, Fifth Floor
 * Boston, MA  02110-1301  USA
 */
package org.hibernate.engine.spi;

import java.util.Map;
import java.util.Set;

import org.jboss.logging.Logger;

import org.hibernate.internal.CoreMessageLogger;
import org.hibernate.internal.util.StringHelper;
import org.hibernate.persister.entity.Loadable;
import org.hibernate.persister.entity.PropertyMapping;

/**
 * @author Gavin King
 */
public class SubselectFetch {
	private static final CoreMessageLogger LOG = Logger.getMessageLogger(
			CoreMessageLogger.class,
			SubselectFetch.class.getName()
	);
	private final Set resultingEntityKeys;
	private final String queryString;
	private final String alias;
	private final Loadable loadable;
	private final QueryParameters queryParameters;
	private final Map namedParameterLocMap;

	/**
	 * Construct a SubselectFetch instance. The subselect fetch query fragment is generated by
	 * {@link #createSubselectFetchQueryFragment}.
	 *
	 * If the same value for {@code queryParameters} is to be used when constructing multiple
	 * SubselectFetch objects, then it is preferable to generate the subselect fetch query
	 * fragment using {@link #createSubselectFetchQueryFragment}, and pass the result as an
	 * argument to constructor {@link #SubselectFetch(String, String, Loadable, QueryParameters, Set, Map)}.
	 *
	 * @param alias - the table alias used in the subselect fetch query fragment
	 * (to be generated by {@link #createSubselectFetchQueryFragment(QueryParameters)} that
	 * corresponds to {@code loadable};
	 * @param loadable - the {@link Loadable} for the associated entities to be subselect fetched;
	 * @param queryParameters - the query parameters;
	 * @param resultingEntityKeys - the {@link EntityKey} objects for the entities to be subselect fetched;
	 * @param namedParameterLocMap - mapping from named parameter to the parameter index located in the
	 * subselect fetch query fragment.
	 *
	 * @see #SubselectFetch(String, String, Loadable, QueryParameters, Set, Map)
	 */
	public SubselectFetch(
			final String alias,
			final Loadable loadable,
			final QueryParameters queryParameters,
			final Set resultingEntityKeys,
			final Map namedParameterLocMap) {
		this(
				createSubselectFetchQueryFragment( queryParameters ),
				alias,
				loadable,
				queryParameters,
				resultingEntityKeys,
				namedParameterLocMap
		);
	}

	/**
	 * Construct a SubselectFetch instance using the provided subselect fetch query fragment,
	 * {@code subselectFetchQueryFragment}. It is assumed that {@code subselectFetchQueryFragment}
	 * is the result of calling {@link #createSubselectFetchQueryFragment} with the same value
	 * provided for {@code queryParameters}.
	 *
	 * @param subselectFetchQueryFragment - the subselect fetch query fragment;
	 * @param alias - the table alias used in {@code subselectFetchQueryFragment} that
	 * corresponds to {@code loadable};
	 * @param loadable - the {@link Loadable} for the associated entities to be subselect fetched;
	 * @param queryParameters - the query parameters;
	 * @param resultingEntityKeys - the {@link EntityKey} objects for the entities to be subselect fetched;
	 * @param namedParameterLocMap - mapping from named parameter to the parameter index located in the
	 * subselect fetch query fragment.
	 */
	public SubselectFetch(
			final String subselectFetchQueryFragment,
			final String alias,
			final Loadable loadable,
			final QueryParameters queryParameters,
			final Set resultingEntityKeys,
			final Map namedParameterLocMap) {
		this.resultingEntityKeys = resultingEntityKeys;
		this.queryParameters = queryParameters;
		this.namedParameterLocMap = namedParameterLocMap;
		this.loadable = loadable;
		this.alias = alias;

		this.queryString = subselectFetchQueryFragment;
	}

	/**
	 * Create the subselect fetch query fragment for the provided {@link QueryParameters}
	 * with SELECT and ORDER BY clauses removed.
	 *
	 * @param queryParameters -the query parameters.
	 * @return the subselect fetch query fragment.
	 */
	public static String createSubselectFetchQueryFragment(QueryParameters queryParameters) {
		//TODO: ugly here:
		final String queryString = queryParameters.getFilteredSQL();
		int fromIndex = queryString.indexOf(" from ");
		int orderByIndex = queryString.lastIndexOf("order by");
		final String subselectQueryFragment =  orderByIndex > 0
				? queryString.substring( fromIndex, orderByIndex )
				: queryString.substring( fromIndex );
		if ( LOG.isTraceEnabled() ) {
			LOG.tracef( "SubselectFetch query fragment: %s", subselectQueryFragment );
		}
		return subselectQueryFragment;
	}

	public QueryParameters getQueryParameters() {
		return queryParameters;
	}

	/**
	 * Get the Set of EntityKeys
	 */
	public Set getResult() {
		return resultingEntityKeys;
	}

	public String toSubselectString(String ukname) {

		String[] joinColumns = ukname==null ?
			StringHelper.qualify( alias, loadable.getIdentifierColumnNames() ) :
			( (PropertyMapping) loadable ).toColumns(alias, ukname);

		return new StringBuilder()
			.append("select ")
			.append( StringHelper.join(", ", joinColumns) )
			.append(queryString)
			.toString();
	}

	@Override
    public String toString() {
		return "SubselectFetch(" + queryString + ')';
	}

	public Map getNamedParameterLocMap() {
		return namedParameterLocMap;
	}

}
